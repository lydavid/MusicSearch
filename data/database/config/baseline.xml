<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues></ManuallySuppressedIssues>
  <CurrentIssues>
    <ID>CyclomaticComplexMethod:ToRelationDatabaseModel.kt$fun RelationMusicBrainzModel.toRelationDatabaseModel( entityId: String, order: Int, ): RelationWithOrder?</ID>
    <ID>LongMethod:MusicSearchDatabase.kt$fun createDatabase(driver: SqlDriver): Database</ID>
    <ID>LongMethod:ToRelationDatabaseModel.kt$fun RelationMusicBrainzModel.toRelationDatabaseModel( entityId: String, order: Int, ): RelationWithOrder?</ID>
    <ID>NoUnusedImports:SpotifyHistoryDao.kt$ly.david.musicsearch.data.database.dao.SpotifyHistoryDao.kt</ID>
    <ID>ReturnCount:ToRelationDatabaseModel.kt$fun RelationMusicBrainzModel.toRelationDatabaseModel( entityId: String, order: Int, ): RelationWithOrder?</ID>
    <ID>SwallowedException:ArtistCreditDao.kt$ArtistCreditDao$ex: Exception</ID>
    <ID>SwallowedException:CollectionEntityDao.kt$CollectionEntityDao$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:ArtistCreditDao.kt$ArtistCreditDao$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:CollectionEntityDao.kt$CollectionEntityDao$ex: Exception</ID>
    <ID>TrailingCommaOnCallSite:MusicSearchDatabase.kt$( driver = driver, relationAdapter = Relation.Adapter( linked_entityAdapter = MusicBrainzEntityStringColumnAdapter, orderAdapter = IntColumnAdapter, ), browse_entity_countAdapter = Browse_entity_count.Adapter( browse_entityAdapter = MusicBrainzEntityStringColumnAdapter, local_countAdapter = IntColumnAdapter, remote_countAdapter = IntColumnAdapter, ), collectionAdapter = Collection.Adapter( entity_countAdapter = IntColumnAdapter, entityAdapter = MusicBrainzEntityStringColumnAdapter, ), labelAdapter = Label.Adapter( label_codeAdapter = IntColumnAdapter, ), recordingAdapter = Recording.Adapter( lengthAdapter = IntColumnAdapter, isrcsAdapter = ListStringColumnAdapter, ), artist_credit_nameAdapter = Artist_credit_name.Adapter( positionAdapter = IntColumnAdapter, ), release_groupAdapter = Release_group.Adapter( secondary_typesAdapter = ListStringColumnAdapter, secondary_type_idsAdapter = ListStringColumnAdapter, ), workAdapter = Work.Adapter( iswcsAdapter = ListStringColumnAdapter, ), releaseAdapter = Release.Adapter( cover_art_countAdapter = IntColumnAdapter, ), mediumAdapter = Medium.Adapter( positionAdapter = IntColumnAdapter, track_countAdapter = IntColumnAdapter, ), trackAdapter = Track.Adapter( positionAdapter = IntColumnAdapter, lengthAdapter = IntColumnAdapter, ), lookup_historyAdapter = Lookup_history.Adapter( entityAdapter = MusicBrainzEntityStringColumnAdapter, number_of_visitsAdapter = IntColumnAdapter, last_accessedAdapter = InstantLongColumnAdapter, ), now_playing_historyAdapter = Now_playing_history.Adapter( last_playedAdapter = InstantLongColumnAdapter, ), search_historyAdapter = Search_history.Adapter( entityAdapter = MusicBrainzEntityStringColumnAdapter, last_accessedAdapter = InstantLongColumnAdapter, ), spotify_historyAdapter = Spotify_history.Adapter( track_lengthAdapter = IntColumnAdapter, number_of_listensAdapter = IntColumnAdapter, last_listenedAdapter = InstantLongColumnAdapter, ) )</ID>
    <ID>UnusedPrivateProperty:SpotifyHistoryDao.kt$SpotifyHistoryDao$private val coroutineDispatchers: CoroutineDispatchers</ID>
  </CurrentIssues>
</SmellBaseline>
