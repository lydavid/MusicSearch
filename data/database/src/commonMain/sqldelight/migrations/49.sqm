import kotlin.Boolean;

-- Migration script to add CASCADE DELETE to alias tables
-- This script recreates all alias tables with CASCADE DELETE foreign key constraints

-- Drop existing indices and view
DROP INDEX IF EXISTS idx_work_alias_work_id;
DROP INDEX IF EXISTS idx_work_alias_name;
DROP INDEX IF EXISTS idx_series_alias_series_id;
DROP INDEX IF EXISTS idx_series_alias_name;
DROP INDEX IF EXISTS idx_release_group_alias_release_group_id;
DROP INDEX IF EXISTS idx_release_group_alias_name;
DROP INDEX IF EXISTS idx_release_alias_release_id;
DROP INDEX IF EXISTS idx_release_alias_name;
DROP INDEX IF EXISTS idx_recording_alias_recording_id;
DROP INDEX IF EXISTS idx_recording_alias_name;
DROP INDEX IF EXISTS idx_place_alias_place_id;
DROP INDEX IF EXISTS idx_place_alias_name;
DROP INDEX IF EXISTS idx_label_alias_label_id;
DROP INDEX IF EXISTS idx_label_alias_name;
DROP INDEX IF EXISTS idx_instrument_alias_instrument_id;
DROP INDEX IF EXISTS idx_instrument_alias_name;
DROP INDEX IF EXISTS idx_genre_alias_genre_id;
DROP INDEX IF EXISTS idx_genre_alias_name;
DROP INDEX IF EXISTS idx_event_alias_event_id;
DROP INDEX IF EXISTS idx_event_alias_name;
DROP INDEX IF EXISTS idx_artist_alias_artist_id;
DROP INDEX IF EXISTS idx_artist_alias_name;
DROP INDEX IF EXISTS idx_area_alias_area_id;
DROP INDEX IF EXISTS idx_area_alias_name;

DROP VIEW IF EXISTS all_alias_names;

-- Backup tables
CREATE TABLE area_alias_backup AS SELECT * FROM area_alias;
CREATE TABLE artist_alias_backup AS SELECT * FROM artist_alias;
CREATE TABLE event_alias_backup AS SELECT * FROM event_alias;
CREATE TABLE genre_alias_backup AS SELECT * FROM genre_alias;
CREATE TABLE instrument_alias_backup AS SELECT * FROM instrument_alias;
CREATE TABLE label_alias_backup AS SELECT * FROM label_alias;
CREATE TABLE place_alias_backup AS SELECT * FROM place_alias;
CREATE TABLE recording_alias_backup AS SELECT * FROM recording_alias;
CREATE TABLE release_alias_backup AS SELECT * FROM release_alias;
CREATE TABLE release_group_alias_backup AS SELECT * FROM release_group_alias;
CREATE TABLE series_alias_backup AS SELECT * FROM series_alias;
CREATE TABLE work_alias_backup AS SELECT * FROM work_alias;

-- Drop tables
DROP TABLE IF EXISTS work_alias;
DROP TABLE IF EXISTS series_alias;
DROP TABLE IF EXISTS release_group_alias;
DROP TABLE IF EXISTS release_alias;
DROP TABLE IF EXISTS recording_alias;
DROP TABLE IF EXISTS place_alias;
DROP TABLE IF EXISTS label_alias;
DROP TABLE IF EXISTS instrument_alias;
DROP TABLE IF EXISTS genre_alias;
DROP TABLE IF EXISTS event_alias;
DROP TABLE IF EXISTS artist_alias;
DROP TABLE IF EXISTS area_alias;

-- Recreate tables with CASCADE DELETE foreign keys
CREATE TABLE area_alias (
  id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
  area_id TEXT NOT NULL,
  name TEXT NOT NULL,
  is_primary INTEGER AS Boolean NOT NULL,
  locale TEXT,
  type_id TEXT,
  begin_date TEXT NOT NULL,
  end_date TEXT NOT NULL,
  ended INTEGER AS Boolean NOT NULL,
  FOREIGN KEY (area_id) REFERENCES area(id) ON DELETE CASCADE
);

CREATE TABLE artist_alias (
  id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
  artist_id TEXT NOT NULL,
  name TEXT NOT NULL,
  is_primary INTEGER AS Boolean NOT NULL,
  locale TEXT,
  type_id TEXT,
  begin_date TEXT NOT NULL,
  end_date TEXT NOT NULL,
  ended INTEGER AS Boolean NOT NULL,
  FOREIGN KEY (artist_id) REFERENCES artist(id) ON DELETE CASCADE
);

CREATE TABLE event_alias (
  id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
  event_id TEXT NOT NULL,
  name TEXT NOT NULL,
  is_primary INTEGER AS Boolean NOT NULL,
  locale TEXT,
  type_id TEXT,
  begin_date TEXT NOT NULL,
  end_date TEXT NOT NULL,
  ended INTEGER AS Boolean NOT NULL,
  FOREIGN KEY (event_id) REFERENCES event(id) ON DELETE CASCADE
);

CREATE TABLE genre_alias (
  id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
  genre_id TEXT NOT NULL,
  name TEXT NOT NULL,
  is_primary INTEGER AS Boolean NOT NULL,
  locale TEXT,
  type_id TEXT,
  begin_date TEXT NOT NULL,
  end_date TEXT NOT NULL,
  ended INTEGER AS Boolean NOT NULL,
  FOREIGN KEY (genre_id) REFERENCES genre(id) ON DELETE CASCADE
);

CREATE TABLE instrument_alias (
  id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
  instrument_id TEXT NOT NULL,
  name TEXT NOT NULL,
  is_primary INTEGER AS Boolean NOT NULL,
  locale TEXT,
  type_id TEXT,
  begin_date TEXT NOT NULL,
  end_date TEXT NOT NULL,
  ended INTEGER AS Boolean NOT NULL,
  FOREIGN KEY (instrument_id) REFERENCES instrument(id) ON DELETE CASCADE
);

CREATE TABLE label_alias (
  id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
  label_id TEXT NOT NULL,
  name TEXT NOT NULL,
  is_primary INTEGER AS Boolean NOT NULL,
  locale TEXT,
  type_id TEXT,
  begin_date TEXT NOT NULL,
  end_date TEXT NOT NULL,
  ended INTEGER AS Boolean NOT NULL,
  FOREIGN KEY (label_id) REFERENCES label(id) ON DELETE CASCADE
);

CREATE TABLE place_alias (
  id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
  place_id TEXT NOT NULL,
  name TEXT NOT NULL,
  is_primary INTEGER AS Boolean NOT NULL,
  locale TEXT,
  type_id TEXT,
  begin_date TEXT NOT NULL,
  end_date TEXT NOT NULL,
  ended INTEGER AS Boolean NOT NULL,
  FOREIGN KEY (place_id) REFERENCES place(id) ON DELETE CASCADE
);

CREATE TABLE recording_alias (
  id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
  recording_id TEXT NOT NULL,
  name TEXT NOT NULL,
  is_primary INTEGER AS Boolean NOT NULL,
  locale TEXT,
  type_id TEXT,
  begin_date TEXT NOT NULL,
  end_date TEXT NOT NULL,
  ended INTEGER AS Boolean NOT NULL,
  FOREIGN KEY (recording_id) REFERENCES recording(id) ON DELETE CASCADE
);

CREATE TABLE release_alias (
  id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
  release_id TEXT NOT NULL,
  name TEXT NOT NULL,
  is_primary INTEGER AS Boolean NOT NULL,
  locale TEXT,
  type_id TEXT,
  begin_date TEXT NOT NULL,
  end_date TEXT NOT NULL,
  ended INTEGER AS Boolean NOT NULL,
  FOREIGN KEY (release_id) REFERENCES `release`(id) ON DELETE CASCADE
);

CREATE TABLE release_group_alias (
  id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
  release_group_id TEXT NOT NULL,
  name TEXT NOT NULL,
  is_primary INTEGER AS Boolean NOT NULL,
  locale TEXT,
  type_id TEXT,
  begin_date TEXT NOT NULL,
  end_date TEXT NOT NULL,
  ended INTEGER AS Boolean NOT NULL,
  FOREIGN KEY (release_group_id) REFERENCES release_group(id) ON DELETE CASCADE
);

CREATE TABLE series_alias (
  id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
  series_id TEXT NOT NULL,
  name TEXT NOT NULL,
  is_primary INTEGER AS Boolean NOT NULL,
  locale TEXT,
  type_id TEXT,
  begin_date TEXT NOT NULL,
  end_date TEXT NOT NULL,
  ended INTEGER AS Boolean NOT NULL,
  FOREIGN KEY (series_id) REFERENCES series(id) ON DELETE CASCADE
);

CREATE TABLE work_alias (
  id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
  work_id TEXT NOT NULL,
  name TEXT NOT NULL,
  is_primary INTEGER AS Boolean NOT NULL,
  locale TEXT,
  type_id TEXT,
  begin_date TEXT NOT NULL,
  end_date TEXT NOT NULL,
  ended INTEGER AS Boolean NOT NULL,
  FOREIGN KEY (work_id) REFERENCES work(id) ON DELETE CASCADE
);

-- Recreate indices
CREATE INDEX idx_area_alias_area_id ON area_alias(area_id);
CREATE INDEX idx_area_alias_name ON area_alias(name);

CREATE INDEX idx_artist_alias_artist_id ON artist_alias(artist_id);
CREATE INDEX idx_artist_alias_name ON artist_alias(name);

CREATE INDEX idx_event_alias_event_id ON event_alias(event_id);
CREATE INDEX idx_event_alias_name ON event_alias(name);

CREATE INDEX idx_genre_alias_genre_id ON genre_alias(genre_id);
CREATE INDEX idx_genre_alias_name ON genre_alias(name);

CREATE INDEX idx_instrument_alias_instrument_id ON instrument_alias(instrument_id);
CREATE INDEX idx_instrument_alias_name ON instrument_alias(name);

CREATE INDEX idx_label_alias_label_id ON label_alias(label_id);
CREATE INDEX idx_label_alias_name ON label_alias(name);

CREATE INDEX idx_place_alias_place_id ON place_alias(place_id);
CREATE INDEX idx_place_alias_name ON place_alias(name);

CREATE INDEX idx_recording_alias_recording_id ON recording_alias(recording_id);
CREATE INDEX idx_recording_alias_name ON recording_alias(name);

CREATE INDEX idx_release_alias_release_id ON release_alias(release_id);
CREATE INDEX idx_release_alias_name ON release_alias(name);

CREATE INDEX idx_release_group_alias_release_group_id ON release_group_alias(release_group_id);
CREATE INDEX idx_release_group_alias_name ON release_group_alias(name);

CREATE INDEX idx_series_alias_series_id ON series_alias(series_id);
CREATE INDEX idx_series_alias_name ON series_alias(name);

CREATE INDEX idx_work_alias_work_id ON work_alias(work_id);
CREATE INDEX idx_work_alias_name ON work_alias(name);

-- Recreate the view
CREATE VIEW all_alias_names AS
SELECT area_id AS mbid, name FROM area_alias
UNION ALL
SELECT artist_id AS mbid, name FROM artist_alias
UNION ALL
SELECT event_id AS mbid, name FROM event_alias
UNION ALL
SELECT genre_id AS mbid, name FROM genre_alias
UNION ALL
SELECT instrument_id AS mbid, name FROM instrument_alias
UNION ALL
SELECT label_id AS mbid, name FROM label_alias
UNION ALL
SELECT place_id AS mbid, name FROM place_alias
UNION ALL
SELECT recording_id AS mbid, name FROM recording_alias
UNION ALL
SELECT release_id AS mbid, name FROM release_alias
UNION ALL
SELECT release_group_id AS mbid, name FROM release_group_alias
UNION ALL
SELECT series_id AS mbid, name FROM series_alias
UNION ALL
SELECT work_id AS mbid, name FROM work_alias;

-- Restore data from backups
INSERT INTO area_alias SELECT * FROM area_alias_backup;
INSERT INTO artist_alias SELECT * FROM artist_alias_backup;
INSERT INTO event_alias SELECT * FROM event_alias_backup;
INSERT INTO genre_alias SELECT * FROM genre_alias_backup;
INSERT INTO instrument_alias SELECT * FROM instrument_alias_backup;
INSERT INTO label_alias SELECT * FROM label_alias_backup;
INSERT INTO place_alias SELECT * FROM place_alias_backup;
INSERT INTO recording_alias SELECT * FROM recording_alias_backup;
INSERT INTO release_alias SELECT * FROM release_alias_backup;
INSERT INTO release_group_alias SELECT * FROM release_group_alias_backup;
INSERT INTO series_alias SELECT * FROM series_alias_backup;
INSERT INTO work_alias SELECT * FROM work_alias_backup;

-- Drop backup tables
DROP TABLE area_alias_backup;
DROP TABLE artist_alias_backup;
DROP TABLE event_alias_backup;
DROP TABLE genre_alias_backup;
DROP TABLE instrument_alias_backup;
DROP TABLE label_alias_backup;
DROP TABLE place_alias_backup;
DROP TABLE recording_alias_backup;
DROP TABLE release_alias_backup;
DROP TABLE release_group_alias_backup;
DROP TABLE series_alias_backup;
DROP TABLE work_alias_backup;
