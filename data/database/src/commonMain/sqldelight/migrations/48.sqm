import kotlin.Boolean;

-- Create new alias tables
CREATE TABLE area_alias (
  id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
  area_id TEXT NOT NULL,
  name TEXT NOT NULL,
  is_primary INTEGER AS Boolean NOT NULL,
  locale TEXT,
  type_id TEXT,
  begin_date TEXT NOT NULL,
  end_date TEXT NOT NULL,
  ended INTEGER AS Boolean NOT NULL,
  FOREIGN KEY (area_id) REFERENCES area(id)
);

CREATE TABLE artist_alias (
  id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
  artist_id TEXT NOT NULL,
  name TEXT NOT NULL,
  is_primary INTEGER AS Boolean NOT NULL,
  locale TEXT,
  type_id TEXT,
  begin_date TEXT NOT NULL,
  end_date TEXT NOT NULL,
  ended INTEGER AS Boolean NOT NULL,
  FOREIGN KEY (artist_id) REFERENCES artist(id)
);

CREATE TABLE event_alias (
  id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
  event_id TEXT NOT NULL,
  name TEXT NOT NULL,
  is_primary INTEGER AS Boolean NOT NULL,
  locale TEXT,
  type_id TEXT,
  begin_date TEXT NOT NULL,
  end_date TEXT NOT NULL,
  ended INTEGER AS Boolean NOT NULL,
  FOREIGN KEY (event_id) REFERENCES event(id)
);

CREATE TABLE genre_alias (
  id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
  genre_id TEXT NOT NULL,
  name TEXT NOT NULL,
  is_primary INTEGER AS Boolean NOT NULL,
  locale TEXT,
  type_id TEXT,
  begin_date TEXT NOT NULL,
  end_date TEXT NOT NULL,
  ended INTEGER AS Boolean NOT NULL,
  FOREIGN KEY (genre_id) REFERENCES genre(id)
);

CREATE TABLE instrument_alias (
  id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
  instrument_id TEXT NOT NULL,
  name TEXT NOT NULL,
  is_primary INTEGER AS Boolean NOT NULL,
  locale TEXT,
  type_id TEXT,
  begin_date TEXT NOT NULL,
  end_date TEXT NOT NULL,
  ended INTEGER AS Boolean NOT NULL,
  FOREIGN KEY (instrument_id) REFERENCES instrument(id)
);

CREATE TABLE label_alias (
  id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
  label_id TEXT NOT NULL,
  name TEXT NOT NULL,
  is_primary INTEGER AS Boolean NOT NULL,
  locale TEXT,
  type_id TEXT,
  begin_date TEXT NOT NULL,
  end_date TEXT NOT NULL,
  ended INTEGER AS Boolean NOT NULL,
  FOREIGN KEY (label_id) REFERENCES label(id)
);

CREATE TABLE place_alias (
  id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
  place_id TEXT NOT NULL,
  name TEXT NOT NULL,
  is_primary INTEGER AS Boolean NOT NULL,
  locale TEXT,
  type_id TEXT,
  begin_date TEXT NOT NULL,
  end_date TEXT NOT NULL,
  ended INTEGER AS Boolean NOT NULL,
  FOREIGN KEY (place_id) REFERENCES place(id)
);

CREATE TABLE recording_alias (
  id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
  recording_id TEXT NOT NULL,
  name TEXT NOT NULL,
  is_primary INTEGER AS Boolean NOT NULL,
  locale TEXT,
  type_id TEXT,
  begin_date TEXT NOT NULL,
  end_date TEXT NOT NULL,
  ended INTEGER AS Boolean NOT NULL,
  FOREIGN KEY (recording_id) REFERENCES recording(id)
);

CREATE TABLE release_alias (
  id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
  release_id TEXT NOT NULL,
  name TEXT NOT NULL,
  is_primary INTEGER AS Boolean NOT NULL,
  locale TEXT,
  type_id TEXT,
  begin_date TEXT NOT NULL,
  end_date TEXT NOT NULL,
  ended INTEGER AS Boolean NOT NULL,
  FOREIGN KEY (release_id) REFERENCES `release`(id)
);

CREATE TABLE release_group_alias (
  id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
  release_group_id TEXT NOT NULL,
  name TEXT NOT NULL,
  is_primary INTEGER AS Boolean NOT NULL,
  locale TEXT,
  type_id TEXT,
  begin_date TEXT NOT NULL,
  end_date TEXT NOT NULL,
  ended INTEGER AS Boolean NOT NULL,
  FOREIGN KEY (release_group_id) REFERENCES release_group(id)
);

CREATE TABLE series_alias (
  id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
  series_id TEXT NOT NULL,
  name TEXT NOT NULL,
  is_primary INTEGER AS Boolean NOT NULL,
  locale TEXT,
  type_id TEXT,
  begin_date TEXT NOT NULL,
  end_date TEXT NOT NULL,
  ended INTEGER AS Boolean NOT NULL,
  FOREIGN KEY (series_id) REFERENCES series(id)
);

CREATE TABLE work_alias (
  id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
  work_id TEXT NOT NULL,
  name TEXT NOT NULL,
  is_primary INTEGER AS Boolean NOT NULL,
  locale TEXT,
  type_id TEXT,
  begin_date TEXT NOT NULL,
  end_date TEXT NOT NULL,
  ended INTEGER AS Boolean NOT NULL,
  FOREIGN KEY (work_id) REFERENCES work(id)
);

-- Migrate data from original alias table to entity-specific tables
INSERT INTO area_alias (area_id, name, is_primary, locale, type_id, begin_date, end_date, ended)
SELECT alias.mbid, alias.name, alias.is_primary, alias.locale, alias.type_id, alias.begin_date, alias.end_date, 0
FROM alias
INNER JOIN area ON area.id = alias.mbid;

INSERT INTO artist_alias (artist_id, name, is_primary, locale, type_id, begin_date, end_date, ended)
SELECT alias.mbid, alias.name, alias.is_primary, alias.locale, alias.type_id, alias.begin_date, alias.end_date, 0
FROM alias
INNER JOIN artist ON artist.id = alias.mbid;

INSERT INTO event_alias (event_id, name, is_primary, locale, type_id, begin_date, end_date, ended)
SELECT alias.mbid, alias.name, alias.is_primary, alias.locale, alias.type_id, alias.begin_date, alias.end_date, 0
FROM alias
INNER JOIN event ON event.id = alias.mbid;

INSERT INTO genre_alias (genre_id, name, is_primary, locale, type_id, begin_date, end_date, ended)
SELECT alias.mbid, alias.name, alias.is_primary, alias.locale, alias.type_id, alias.begin_date, alias.end_date, 0
FROM alias
INNER JOIN genre ON genre.id = alias.mbid;

INSERT INTO instrument_alias (instrument_id, name, is_primary, locale, type_id, begin_date, end_date, ended)
SELECT alias.mbid, alias.name, alias.is_primary, alias.locale, alias.type_id, alias.begin_date, alias.end_date, 0
FROM alias
INNER JOIN instrument ON instrument.id = alias.mbid;

INSERT INTO label_alias (label_id, name, is_primary, locale, type_id, begin_date, end_date, ended)
SELECT alias.mbid, alias.name, alias.is_primary, alias.locale, alias.type_id, alias.begin_date, alias.end_date, 0
FROM alias
INNER JOIN label ON label.id = alias.mbid;

INSERT INTO place_alias (place_id, name, is_primary, locale, type_id, begin_date, end_date, ended)
SELECT alias.mbid, alias.name, alias.is_primary, alias.locale, alias.type_id, alias.begin_date, alias.end_date, 0
FROM alias
INNER JOIN place ON place.id = alias.mbid;

INSERT INTO recording_alias (recording_id, name, is_primary, locale, type_id, begin_date, end_date, ended)
SELECT alias.mbid, alias.name, alias.is_primary, alias.locale, alias.type_id, alias.begin_date, alias.end_date, 0
FROM alias
INNER JOIN recording ON recording.id = alias.mbid;

INSERT INTO release_alias (release_id, name, is_primary, locale, type_id, begin_date, end_date, ended)
SELECT alias.mbid, alias.name, alias.is_primary, alias.locale, alias.type_id, alias.begin_date, alias.end_date, 0
FROM alias
INNER JOIN `release` ON `release`.id = alias.mbid;

INSERT INTO release_group_alias (release_group_id, name, is_primary, locale, type_id, begin_date, end_date, ended)
SELECT alias.mbid, alias.name, alias.is_primary, alias.locale, alias.type_id, alias.begin_date, alias.end_date, 0
FROM alias
INNER JOIN release_group ON release_group.id = alias.mbid;

INSERT INTO series_alias (series_id, name, is_primary, locale, type_id, begin_date, end_date, ended)
SELECT alias.mbid, alias.name, alias.is_primary, alias.locale, alias.type_id, alias.begin_date, alias.end_date, 0
FROM alias
INNER JOIN series ON series.id = alias.mbid;

INSERT INTO work_alias (work_id, name, is_primary, locale, type_id, begin_date, end_date, ended)
SELECT alias.mbid, alias.name, alias.is_primary, alias.locale, alias.type_id, alias.begin_date, alias.end_date, 0
FROM alias
INNER JOIN work ON work.id = alias.mbid;

-- Create indexes
CREATE INDEX idx_area_alias_area_id ON area_alias(area_id);
CREATE INDEX idx_area_alias_name ON area_alias(name);

CREATE INDEX idx_artist_alias_artist_id ON artist_alias(artist_id);
CREATE INDEX idx_artist_alias_name ON artist_alias(name);

CREATE INDEX idx_event_alias_event_id ON event_alias(event_id);
CREATE INDEX idx_event_alias_name ON event_alias(name);

CREATE INDEX idx_genre_alias_genre_id ON genre_alias(genre_id);
CREATE INDEX idx_genre_alias_name ON genre_alias(name);

CREATE INDEX idx_instrument_alias_instrument_id ON instrument_alias(instrument_id);
CREATE INDEX idx_instrument_alias_name ON instrument_alias(name);

CREATE INDEX idx_label_alias_label_id ON label_alias(label_id);
CREATE INDEX idx_label_alias_name ON label_alias(name);

CREATE INDEX idx_place_alias_place_id ON place_alias(place_id);
CREATE INDEX idx_place_alias_name ON place_alias(name);

CREATE INDEX idx_recording_alias_recording_id ON recording_alias(recording_id);
CREATE INDEX idx_recording_alias_name ON recording_alias(name);

CREATE INDEX idx_release_alias_release_id ON release_alias(release_id);
CREATE INDEX idx_release_alias_name ON release_alias(name);

CREATE INDEX idx_release_group_alias_release_group_id ON release_group_alias(release_group_id);
CREATE INDEX idx_release_group_alias_name ON release_group_alias(name);

CREATE INDEX idx_series_alias_series_id ON series_alias(series_id);
CREATE INDEX idx_series_alias_name ON series_alias(name);

CREATE INDEX idx_work_alias_work_id ON work_alias(work_id);
CREATE INDEX idx_work_alias_name ON work_alias(name);

CREATE VIEW all_alias_names AS
SELECT area_id AS mbid, name FROM area_alias
UNION ALL
SELECT artist_id AS mbid, name FROM artist_alias
UNION ALL
SELECT event_id AS mbid, name FROM event_alias
UNION ALL
SELECT genre_id AS mbid, name FROM genre_alias
UNION ALL
SELECT instrument_id AS mbid, name FROM instrument_alias
UNION ALL
SELECT label_id AS mbid, name FROM label_alias
UNION ALL
SELECT place_id AS mbid, name FROM place_alias
UNION ALL
SELECT recording_id AS mbid, name FROM recording_alias
UNION ALL
SELECT release_id AS mbid, name FROM release_alias
UNION ALL
SELECT release_group_id AS mbid, name FROM release_group_alias
UNION ALL
SELECT series_id AS mbid, name FROM series_alias
UNION ALL
SELECT work_id AS mbid, name FROM work_alias;

DROP TABLE alias;
