import kotlin.Boolean;
import ly.david.musicsearch.shared.domain.network.MusicBrainzEntity;

CREATE TABLE collection_entity_backup AS
SELECT * FROM collection_entity;

CREATE TABLE collection_temp (
  id TEXT PRIMARY KEY NOT NULL,
  is_remote INTEGER AS Boolean NOT NULL,
  name TEXT NOT NULL,
  entity TEXT AS MusicBrainzEntity NOT NULL,
  type TEXT,
  type_id TEXT,
  deleted INTEGER AS Boolean NOT NULL DEFAULT 0
);

INSERT INTO collection_temp(
  id,
  is_remote,
  name,
  entity,
  type,
  type_id,
  deleted
)
SELECT
  id,
  is_remote,
  name,
  entity,
  type,
  type_id,
  0
FROM collection;

DROP TABLE collection;

ALTER TABLE collection_temp RENAME TO collection;

CREATE VIEW collection_view AS
SELECT *
FROM collection
WHERE deleted = 0;

-- dropping collection would have dropped these
-- but since collection did not appear in our migrations,
-- we would not be able to recreate them with the same name
DROP TABLE IF EXISTS collection_entity;
DROP INDEX IF EXISTS idx_collection_entity_entity_id;

CREATE TABLE collection_entity (
  id TEXT NOT NULL,
  entity_id TEXT NOT NULL,
  deleted INTEGER AS Boolean NOT NULL DEFAULT 0,

  PRIMARY KEY(id, entity_id),

  FOREIGN KEY(id) REFERENCES collection(id)
  ON UPDATE CASCADE
  ON DELETE CASCADE
);

INSERT INTO collection_entity(id, entity_id, deleted)
SELECT id, entity_id, deleted FROM collection_entity_backup;

DROP TABLE collection_entity_backup;

CREATE INDEX idx_collection_entity_entity_id ON collection_entity(entity_id);
