import kotlin.Boolean;

CREATE TABLE area_alias (
  id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
  area_id TEXT NOT NULL,
  name TEXT NOT NULL,
  is_primary INTEGER AS Boolean NOT NULL,
  locale TEXT,
  type_id TEXT,
  begin_date TEXT NOT NULL,
  end_date TEXT NOT NULL,
  ended INTEGER AS Boolean NOT NULL,
  FOREIGN KEY (area_id) REFERENCES area(id) ON DELETE CASCADE
);

CREATE TABLE artist_alias (
  id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
  artist_id TEXT NOT NULL,
  name TEXT NOT NULL,
  is_primary INTEGER AS Boolean NOT NULL,
  locale TEXT,
  type_id TEXT,
  begin_date TEXT NOT NULL,
  end_date TEXT NOT NULL,
  ended INTEGER AS Boolean NOT NULL,
  FOREIGN KEY (artist_id) REFERENCES artist(id) ON DELETE CASCADE
);

CREATE TABLE event_alias (
  id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
  event_id TEXT NOT NULL,
  name TEXT NOT NULL,
  is_primary INTEGER AS Boolean NOT NULL,
  locale TEXT,
  type_id TEXT,
  begin_date TEXT NOT NULL,
  end_date TEXT NOT NULL,
  ended INTEGER AS Boolean NOT NULL,
  FOREIGN KEY (event_id) REFERENCES event(id) ON DELETE CASCADE
);

CREATE TABLE genre_alias (
  id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
  genre_id TEXT NOT NULL,
  name TEXT NOT NULL,
  is_primary INTEGER AS Boolean NOT NULL,
  locale TEXT,
  type_id TEXT,
  begin_date TEXT NOT NULL,
  end_date TEXT NOT NULL,
  ended INTEGER AS Boolean NOT NULL,
  FOREIGN KEY (genre_id) REFERENCES genre(id) ON DELETE CASCADE
);

CREATE TABLE instrument_alias (
  id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
  instrument_id TEXT NOT NULL,
  name TEXT NOT NULL,
  is_primary INTEGER AS Boolean NOT NULL,
  locale TEXT,
  type_id TEXT,
  begin_date TEXT NOT NULL,
  end_date TEXT NOT NULL,
  ended INTEGER AS Boolean NOT NULL,
  FOREIGN KEY (instrument_id) REFERENCES instrument(id) ON DELETE CASCADE
);

CREATE TABLE label_alias (
  id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
  label_id TEXT NOT NULL,
  name TEXT NOT NULL,
  is_primary INTEGER AS Boolean NOT NULL,
  locale TEXT,
  type_id TEXT,
  begin_date TEXT NOT NULL,
  end_date TEXT NOT NULL,
  ended INTEGER AS Boolean NOT NULL,
  FOREIGN KEY (label_id) REFERENCES label(id) ON DELETE CASCADE
);

CREATE TABLE place_alias (
  id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
  place_id TEXT NOT NULL,
  name TEXT NOT NULL,
  is_primary INTEGER AS Boolean NOT NULL,
  locale TEXT,
  type_id TEXT,
  begin_date TEXT NOT NULL,
  end_date TEXT NOT NULL,
  ended INTEGER AS Boolean NOT NULL,
  FOREIGN KEY (place_id) REFERENCES place(id) ON DELETE CASCADE
);

CREATE TABLE recording_alias (
  id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
  recording_id TEXT NOT NULL,
  name TEXT NOT NULL,
  is_primary INTEGER AS Boolean NOT NULL,
  locale TEXT,
  type_id TEXT,
  begin_date TEXT NOT NULL,
  end_date TEXT NOT NULL,
  ended INTEGER AS Boolean NOT NULL,
  FOREIGN KEY (recording_id) REFERENCES recording(id) ON DELETE CASCADE
);

CREATE TABLE release_alias (
  id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
  release_id TEXT NOT NULL,
  name TEXT NOT NULL,
  is_primary INTEGER AS Boolean NOT NULL,
  locale TEXT,
  type_id TEXT,
  begin_date TEXT NOT NULL,
  end_date TEXT NOT NULL,
  ended INTEGER AS Boolean NOT NULL,
  FOREIGN KEY (release_id) REFERENCES `release`(id) ON DELETE CASCADE
);

CREATE TABLE release_group_alias (
  id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
  release_group_id TEXT NOT NULL,
  name TEXT NOT NULL,
  is_primary INTEGER AS Boolean NOT NULL,
  locale TEXT,
  type_id TEXT,
  begin_date TEXT NOT NULL,
  end_date TEXT NOT NULL,
  ended INTEGER AS Boolean NOT NULL,
  FOREIGN KEY (release_group_id) REFERENCES release_group(id) ON DELETE CASCADE
);

CREATE TABLE series_alias (
  id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
  series_id TEXT NOT NULL,
  name TEXT NOT NULL,
  is_primary INTEGER AS Boolean NOT NULL,
  locale TEXT,
  type_id TEXT,
  begin_date TEXT NOT NULL,
  end_date TEXT NOT NULL,
  ended INTEGER AS Boolean NOT NULL,
  FOREIGN KEY (series_id) REFERENCES series(id) ON DELETE CASCADE
);

CREATE TABLE work_alias (
  id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
  work_id TEXT NOT NULL,
  name TEXT NOT NULL,
  is_primary INTEGER AS Boolean NOT NULL,
  locale TEXT,
  type_id TEXT,
  begin_date TEXT NOT NULL,
  end_date TEXT NOT NULL,
  ended INTEGER AS Boolean NOT NULL,
  FOREIGN KEY (work_id) REFERENCES work(id) ON DELETE CASCADE
);

CREATE INDEX idx_area_alias_area_id ON area_alias(area_id);
CREATE INDEX idx_area_alias_name ON area_alias(name);

CREATE INDEX idx_artist_alias_artist_id ON artist_alias(artist_id);
CREATE INDEX idx_artist_alias_name ON artist_alias(name);

CREATE INDEX idx_event_alias_event_id ON event_alias(event_id);
CREATE INDEX idx_event_alias_name ON event_alias(name);

CREATE INDEX idx_genre_alias_genre_id ON genre_alias(genre_id);
CREATE INDEX idx_genre_alias_name ON genre_alias(name);

CREATE INDEX idx_instrument_alias_instrument_id ON instrument_alias(instrument_id);
CREATE INDEX idx_instrument_alias_name ON instrument_alias(name);

CREATE INDEX idx_label_alias_label_id ON label_alias(label_id);
CREATE INDEX idx_label_alias_name ON label_alias(name);

CREATE INDEX idx_place_alias_place_id ON place_alias(place_id);
CREATE INDEX idx_place_alias_name ON place_alias(name);

CREATE INDEX idx_recording_alias_recording_id ON recording_alias(recording_id);
CREATE INDEX idx_recording_alias_name ON recording_alias(name);

CREATE INDEX idx_release_alias_release_id ON release_alias(release_id);
CREATE INDEX idx_release_alias_name ON release_alias(name);

CREATE INDEX idx_release_group_alias_release_group_id ON release_group_alias(release_group_id);
CREATE INDEX idx_release_group_alias_name ON release_group_alias(name);

CREATE INDEX idx_series_alias_series_id ON series_alias(series_id);
CREATE INDEX idx_series_alias_name ON series_alias(name);

CREATE INDEX idx_work_alias_work_id ON work_alias(work_id);
CREATE INDEX idx_work_alias_name ON work_alias(name);

CREATE VIEW all_primary_alias AS
SELECT
  area_id AS mbid,
  name,
  locale
FROM area_alias
WHERE is_primary
UNION ALL
SELECT
  artist_id AS mbid,
  name,
  locale
FROM artist_alias
WHERE is_primary
UNION ALL
SELECT
  event_id AS mbid,
  name,
  locale
FROM event_alias
WHERE is_primary
UNION ALL
SELECT
  genre_id AS mbid,
  name,
  locale
FROM genre_alias
WHERE is_primary
UNION ALL
SELECT
  instrument_id AS mbid,
  name,
  locale
FROM instrument_alias
WHERE is_primary
UNION ALL
SELECT
  label_id AS mbid,
  name,
  locale
FROM label_alias
WHERE is_primary
UNION ALL
SELECT
  place_id AS mbid,
  name,
  locale
FROM place_alias
WHERE is_primary
UNION ALL
SELECT
  recording_id AS mbid,
  name,
  locale
FROM recording_alias
WHERE is_primary
UNION ALL
SELECT
  release_id AS mbid,
  name,
  locale
FROM release_alias
WHERE is_primary
UNION ALL
SELECT
  release_group_id AS mbid,
  name,
  locale
FROM release_group_alias
WHERE is_primary
UNION ALL
SELECT
  series_id AS mbid,
  name,
  locale
FROM series_alias
WHERE is_primary
UNION ALL
SELECT
  work_id AS mbid,
  name,
  locale
FROM work_alias
WHERE is_primary;

insertAreaAlias:
INSERT INTO area_alias (
  id,
  area_id,
  name,
  locale,
  type_id,
  is_primary,
  begin_date,
  end_date,
  ended
)
VALUES (
  nullif(:id, 0),
  :mbid,
  :name,
  :locale,
  :typeId,
  :isPrimary,
  :beginDate,
  :endDate,
  :ended
);

deleteAreaAlias:
DELETE FROM area_alias
WHERE area_id = :mbid;

insertArtistAlias:
INSERT INTO artist_alias (
  id,
  artist_id,
  name,
  locale,
  type_id,
  is_primary,
  begin_date,
  end_date,
  ended
)
VALUES (
  nullif(:id, 0),
  :mbid,
  :name,
  :locale,
  :typeId,
  :isPrimary,
  :beginDate,
  :endDate,
  :ended
);

deleteArtistAlias:
DELETE FROM artist_alias
WHERE artist_id = :mbid;

insertEventAlias:
INSERT INTO event_alias (
  id,
  event_id,
  name,
  locale,
  type_id,
  is_primary,
  begin_date,
  end_date,
  ended
)
VALUES (
  nullif(:id, 0),
  :mbid,
  :name,
  :locale,
  :typeId,
  :isPrimary,
  :beginDate,
  :endDate,
  :ended
);

deleteEventAlias:
DELETE FROM event_alias
WHERE event_id = :mbid;

insertGenreAlias:
INSERT INTO genre_alias (
  id,
  genre_id,
  name,
  locale,
  type_id,
  is_primary,
  begin_date,
  end_date,
  ended
)
VALUES (
  nullif(:id, 0),
  :mbid,
  :name,
  :locale,
  :typeId,
  :isPrimary,
  :beginDate,
  :endDate,
  :ended
);

deleteGenreAlias:
DELETE FROM genre_alias
WHERE genre_id = :mbid;

insertInstrumentAlias:
INSERT INTO instrument_alias (
  id,
  instrument_id,
  name,
  locale,
  type_id,
  is_primary,
  begin_date,
  end_date,
  ended
)
VALUES (
  nullif(:id, 0),
  :mbid,
  :name,
  :locale,
  :typeId,
  :isPrimary,
  :beginDate,
  :endDate,
  :ended
);

deleteInstrumentAlias:
DELETE FROM instrument_alias
WHERE instrument_id = :mbid;

insertLabelAlias:
INSERT INTO label_alias (
  id,
  label_id,
  name,
  locale,
  type_id,
  is_primary,
  begin_date,
  end_date,
  ended
)
VALUES (
  nullif(:id, 0),
  :mbid,
  :name,
  :locale,
  :typeId,
  :isPrimary,
  :beginDate,
  :endDate,
  :ended
);

deleteLabelAlias:
DELETE FROM label_alias
WHERE label_id = :mbid;

insertPlaceAlias:
INSERT INTO place_alias (
  id,
  place_id,
  name,
  locale,
  type_id,
  is_primary,
  begin_date,
  end_date,
  ended
)
VALUES (
  nullif(:id, 0),
  :mbid,
  :name,
  :locale,
  :typeId,
  :isPrimary,
  :beginDate,
  :endDate,
  :ended
);

deletePlaceAlias:
DELETE FROM place_alias
WHERE place_id = :mbid;

insertRecordingAlias:
INSERT INTO recording_alias (
  id,
  recording_id,
  name,
  locale,
  type_id,
  is_primary,
  begin_date,
  end_date,
  ended
)
VALUES (
  nullif(:id, 0),
  :mbid,
  :name,
  :locale,
  :typeId,
  :isPrimary,
  :beginDate,
  :endDate,
  :ended
);

deleteRecordingAlias:
DELETE FROM recording_alias
WHERE recording_id = :mbid;

insertReleaseAlias:
INSERT INTO release_alias (
  id,
  release_id,
  name,
  locale,
  type_id,
  is_primary,
  begin_date,
  end_date,
  ended
)
VALUES (
  nullif(:id, 0),
  :mbid,
  :name,
  :locale,
  :typeId,
  :isPrimary,
  :beginDate,
  :endDate,
  :ended
);

deleteReleaseAlias:
DELETE FROM release_alias
WHERE release_id = :mbid;

insertReleaseGroupAlias:
INSERT INTO release_group_alias (
  id,
  release_group_id,
  name,
  locale,
  type_id,
  is_primary,
  begin_date,
  end_date,
  ended
)
VALUES (
  nullif(:id, 0),
  :mbid,
  :name,
  :locale,
  :typeId,
  :isPrimary,
  :beginDate,
  :endDate,
  :ended
);

deleteReleaseGroupAlias:
DELETE FROM release_group_alias
WHERE release_group_id = :mbid;

insertSeriesAlias:
INSERT INTO series_alias (
  id,
  series_id,
  name,
  locale,
  type_id,
  is_primary,
  begin_date,
  end_date,
  ended
)
VALUES (
  nullif(:id, 0),
  :mbid,
  :name,
  :locale,
  :typeId,
  :isPrimary,
  :beginDate,
  :endDate,
  :ended
);

deleteSeriesAlias:
DELETE FROM series_alias
WHERE series_id = :mbid;

insertWorkAlias:
INSERT INTO work_alias (
  id,
  work_id,
  name,
  locale,
  type_id,
  is_primary,
  begin_date,
  end_date,
  ended
)
VALUES (
  nullif(:id, 0),
  :mbid,
  :name,
  :locale,
  :typeId,
  :isPrimary,
  :beginDate,
  :endDate,
  :ended
);

deleteWorkAlias:
DELETE FROM work_alias
WHERE work_id = :mbid;

getAreaAliases:
SELECT
  name,
  locale,
  is_primary
FROM area_alias
WHERE area_alias.area_id = :mbid;

getArtistAliases:
SELECT
  name,
  locale,
  is_primary
FROM artist_alias
WHERE artist_alias.artist_id = :mbid;

getEventAliases:
SELECT
  name,
  locale,
  is_primary
FROM event_alias
WHERE event_alias.event_id = :mbid;

getGenreAliases:
SELECT
  name,
  locale,
  is_primary
FROM genre_alias
WHERE genre_alias.genre_id = :mbid;

getInstrumentAliases:
SELECT
  name,
  locale,
  is_primary
FROM instrument_alias
WHERE instrument_alias.instrument_id = :mbid;

getLabelAliases:
SELECT
  name,
  locale,
  is_primary
FROM label_alias
WHERE label_alias.label_id = :mbid;

getPlaceAliases:
SELECT
  name,
  locale,
  is_primary
FROM place_alias
WHERE place_alias.place_id = :mbid;

getRecordingAliases:
SELECT
  name,
  locale,
  is_primary
FROM recording_alias
WHERE recording_alias.recording_id = :mbid;

getReleaseAliases:
SELECT
  name,
  locale,
  is_primary
FROM release_alias
WHERE release_alias.release_id = :mbid;

getReleaseGroupAliases:
SELECT
  name,
  locale,
  is_primary
FROM release_group_alias
WHERE release_group_alias.release_group_id = :mbid;

getSeriesAliases:
SELECT
  name,
  locale,
  is_primary
FROM series_alias
WHERE series_alias.series_id = :mbid;

getWorkAliases:
SELECT
  name,
  locale,
  is_primary
FROM work_alias
WHERE work_alias.work_id = :mbid;
