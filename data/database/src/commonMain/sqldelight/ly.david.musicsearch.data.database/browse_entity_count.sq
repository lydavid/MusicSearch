import kotlin.Int;
import ly.david.data.core.network.MusicBrainzEntity;

-- Tracks how many [browse_entity] there are in MusicBrainz with [remote_count]
-- and how many we have collected with [local_count] that are linked to the entity with [entity_id].
--
-- Originally, we used a SQL count query to sum up the local entities.
-- But that would mess up our browsing because we might have collected an entity via other means than browsing,
-- (such as lookup) which would make us incorrectly begin our offset at 0.
-- Because we cannot guarantee the order of individually lookup'd entities, we will make sure to browse everything
-- starting from offset 0, while making sure to Ignore rather than Replace when inserting entities.
--
-- entity_id: The entity's id we're tracking the progress of browsing a paginated browse_entity.
--  eg. An Area we want to browse all of its Releases.
-- browse_entity: The entity we're browsing.
--  eg. Releases in an Area.
-- local_count: This is not actually the number of browse_entity we have in our local database,
--  but rather the current offset for browsing browse_entity.
-- remote_count: How many browse_entity exists in MusicBrainz's database.
--  NULL means we have not yet started browsing. 0 means there were none.
CREATE TABLE browse_entity_count (
  entity_id TEXT NOT NULL,
  browse_entity TEXT AS MusicBrainzEntity NOT NULL,
  local_count INTEGER AS Int NOT NULL,
  remote_count INTEGER AS Int
);

CREATE INDEX IF NOT EXISTS browse_entity_count_pk ON browse_entity_count (entity_id, browse_entity);

insert:
INSERT OR IGNORE INTO browse_entity_count
VALUES ?;

getBrowseEntityCount:
SELECT *
FROM browse_entity_count
WHERE entity_id = :entityId AND browse_entity = :browseEntity;

updateLocalCountForEntity:
UPDATE browse_entity_count
SET local_count = :localCount
WHERE entity_id = :entityId AND browse_entity = :browseEntity;

deleteBrowseEntityCountByEntity:
DELETE FROM browse_entity_count
WHERE entity_id = :entityId AND browse_entity = :browseEntity;

deleteAllBrowseEntityCountByRemoteCollections:
DELETE FROM browse_entity_count
WHERE entity_id IN (
  SELECT id FROM collection WHERE is_remote
);
