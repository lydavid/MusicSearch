import kotlin.Boolean;
import ly.david.musicsearch.shared.domain.network.MusicBrainzEntity;

CREATE TABLE collection (
  id TEXT PRIMARY KEY NOT NULL,
  is_remote INTEGER AS Boolean NOT NULL,
  name TEXT NOT NULL,
  entity TEXT AS MusicBrainzEntity NOT NULL,
  type TEXT,
  type_id TEXT,
  deleted INTEGER AS Boolean NOT NULL DEFAULT 0
);

CREATE VIEW collection_view AS
SELECT *
FROM collection
WHERE deleted = 0;

insert:
INSERT OR IGNORE INTO collection
VALUES ?;

getCountOfCollections:
SELECT IFNULL(
  (
    SELECT count(*) FROM collection_view
    WHERE id IN (
      SELECT id FROM collection_view
      WHERE is_remote = 0 AND :showLocal
      UNION
      SELECT id FROM collection_view
      WHERE is_remote AND :showRemote
    )
    AND name LIKE :query
    AND (:entity = NULL OR entity = :entity)
  ),
  0
) AS count;

getAllCollections:
SELECT
  c.id,
  c.is_remote,
  c.name,
  c.entity,
  COALESCE(ce.entity_count, 0) AS entity_count,
  details_metadata.entity_id IS NOT NULL AS visited,
  (
    SELECT COUNT(*) > 0
    FROM collection_entity
    WHERE id = c.id AND entity_id = :entityIdToCheckExists
  ) AS contains_entity
FROM collection_view c
LEFT JOIN (
  SELECT id, COUNT(entity_id) AS entity_count
  FROM collection_entity
  GROUP BY id
) ce ON c.id = ce.id
LEFT JOIN details_metadata ON details_metadata.entity_id = c.id
WHERE c.id IN (
  SELECT id FROM collection_view
  WHERE is_remote = 0 AND :showLocal
  UNION
  SELECT id FROM collection_view
  WHERE is_remote AND :showRemote
)
AND name LIKE :query
AND (:entity = NULL OR entity = :entity)
ORDER BY
  CASE WHEN :alphabetically THEN `name` END ASC,
  CASE WHEN :alphabeticallyReverse THEN `name` END DESC,
  CASE WHEN :mostEntities THEN ce.`entity_count` END DESC,
  CASE WHEN :leastEntities THEN ce.`entity_count` END ASC
LIMIT :limit OFFSET :offset;

getAllCollectionsOfType:
SELECT *
FROM collection_view
WHERE entity = :entity
ORDER BY name;

getCollection:
SELECT
  c.id,
  c.is_remote,
  c.name,
  c.entity,
  COALESCE(ce.entity_count, 0) AS entity_count,
  details_metadata.entity_id IS NOT NULL AS visited
FROM collection_view c
LEFT JOIN (
  SELECT id, COUNT(entity_id) AS entity_count
  FROM collection_entity
  GROUP BY id
) ce ON c.id = ce.id
LEFT JOIN details_metadata ON details_metadata.entity_id = c.id
WHERE c.id = :id;

deleteMusicBrainzCollections:
DELETE FROM collection
WHERE is_remote;

markDeletedCollection:
UPDATE collection
SET deleted = 1
WHERE id = :collectionId;

unMarkDeletedCollections:
UPDATE collection
SET deleted = 0
WHERE deleted = 1;

deleteCollectionsMarkedForDeletion {
DELETE FROM collection_entity
WHERE collection_entity.id IN (
    SELECT id FROM collection WHERE deleted = 1
);

DELETE FROM collection
WHERE deleted = 1;
}
