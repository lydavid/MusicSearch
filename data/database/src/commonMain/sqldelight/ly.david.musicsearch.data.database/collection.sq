import kotlin.Boolean;
import kotlin.Int;
import ly.david.musicsearch.core.models.network.MusicBrainzEntity;

CREATE TABLE IF NOT EXISTS collection (
  id TEXT PRIMARY KEY NOT NULL,
  is_remote INTEGER AS Boolean NOT NULL,
  name TEXT NOT NULL,
  entity TEXT AS MusicBrainzEntity NOT NULL,
  type TEXT,
  type_id TEXT,

  -- not used, but meant for remote collections where we may not have stored all of their entities,
  -- so a COUNT(*) would be inaccurate
  entity_count INTEGER AS Int NOT NULL
);

insert:
INSERT OR IGNORE INTO collection
VALUES ?;

getNumberOfCollections:
SELECT IFNULL(
  (
    SELECT count(*) FROM collection
    WHERE id IN
      (SELECT id FROM collection
      WHERE is_remote = 0 AND :showLocal
      UNION
      SELECT id FROM collection
      WHERE is_remote AND :showRemote)
    AND name LIKE :query
    AND (:entity = NULL OR entity = :entity)
  ),
  0
) AS count;

getAllCollections:
SELECT
  c.id,
  c.is_remote,
  c.name,
  c.entity,
  COALESCE(ce.entity_count, 0) AS entity_count
FROM collection c
LEFT JOIN (
  SELECT id, COUNT(entity_id) AS entity_count
  FROM collection_entity
  GROUP BY id
) ce ON c.id = ce.id
WHERE c.id IN
  (SELECT id FROM collection
  WHERE is_remote = 0 AND :showLocal
  UNION
  SELECT id FROM collection
  WHERE is_remote AND :showRemote)
AND name LIKE :query
AND (:entity = NULL OR entity = :entity)
ORDER BY
  CASE WHEN :alphabetically THEN `name` END ASC,
  CASE WHEN :alphabeticallyReverse THEN `name` END DESC,
  CASE WHEN :mostEntities THEN ce.`entity_count` END DESC,
  CASE WHEN :leastEntities THEN ce.`entity_count` END ASC
LIMIT :limit OFFSET :offset;

getAllCollectionsOfType:
SELECT *
FROM collection
WHERE entity = :entity
ORDER BY name;

deleteMusicBrainzCollections:
DELETE FROM collection
WHERE is_remote;

getCollection:
SELECT
  c.id,
  c.is_remote,
  c.name,
  c.entity,
  COALESCE(ce.entity_count, 0) AS entity_count
FROM collection c
LEFT JOIN (
  SELECT id, COUNT(entity_id) AS entity_count
  FROM collection_entity
  GROUP BY id
) ce ON c.id = ce.id
WHERE c.id = :id;
