import kotlin.Boolean;
import kotlin.Int;
import kotlin.String;
import kotlin.collections.List;

CREATE TABLE IF NOT EXISTS recording (
  id TEXT PRIMARY KEY NOT NULL,
  name TEXT NOT NULL,
  disambiguation TEXT NOT NULL,
  first_release_date TEXT,
  length INTEGER AS Int,
  video INTEGER AS Boolean NOT NULL,
  isrcs TEXT AS List<String>
);

insertRecording:
INSERT OR IGNORE INTO recording
VALUES ?;

getRecordingForDetails:
SELECT
  id,
  name,
  disambiguation,
  first_release_date,
  length,
  video,
  isrcs,
  details_metadata.last_updated
FROM recording
LEFT JOIN details_metadata ON details_metadata.entity_id = id
WHERE id = :recordingId;

deleteRecording:
DELETE FROM recording
WHERE id = :id;

-- recordings by entity

CREATE TABLE IF NOT EXISTS recordings_by_entity (
  entity_id TEXT NOT NULL,
  recording_id TEXT NOT NULL,

  PRIMARY KEY (entity_id, recording_id)
);

insertOrIgnoreRecordingByEntity:
INSERT OR IGNORE INTO recordings_by_entity
VALUES ?;

deleteRecordingLinksByEntity {
DELETE FROM recordings_by_entity WHERE entity_id = :entityId;
}

getNumberOfRecordingsByEntity:
SELECT IFNULL(
  (
    SELECT COUNT(DISTINCT recording.id)
    FROM recordings_by_entity re
    INNER JOIN recording ON recording.id = re.recording_id
    INNER JOIN artist_credit_entity acr ON acr.entity_id = recording.id
    INNER JOIN artist_credit ac ON ac.id = acr.artist_credit_id
    LEFT JOIN alias ON recording.id = alias.mbid
    WHERE re.entity_id = :entityId
    AND (
      recording.name LIKE :query OR
      recording.disambiguation LIKE :query OR
      recording.first_release_date LIKE :query OR
      ac.name LIKE :query OR
      alias.name LIKE :query
    )
  ),
  0
) AS count;

getRecordingsByEntity:
SELECT
  recording.id,
  recording.name,
  recording.disambiguation,
  recording.first_release_date,
  recording.length,
  recording.video,
  ac.name AS artist_credits,
  details_metadata.entity_id IS NOT NULL AS visited,
  EXISTS (
    SELECT 1 FROM collection_entity WHERE collection_entity.entity_id = recording.id
  ) AS collected
FROM recordings_by_entity re
INNER JOIN recording ON recording.id = re.recording_id
INNER JOIN artist_credit_entity acr ON acr.entity_id = recording.id
INNER JOIN artist_credit ac ON ac.id = acr.artist_credit_id
LEFT JOIN alias ON recording.id = alias.mbid
LEFT JOIN details_metadata ON details_metadata.entity_id = recording.id
WHERE re.entity_id = :entityId
AND (
  recording.name LIKE :query OR
  recording.disambiguation LIKE :query OR
  recording.first_release_date LIKE :query OR
  ac.name LIKE :query OR
  alias.name LIKE :query
)
GROUP BY recording.id
ORDER BY recording.first_release_date, recording.name
LIMIT :limit OFFSET :offset;

-- recordings by collection

getNumberOfRecordingsByCollection:
SELECT IFNULL(
  (
    SELECT COUNT(DISTINCT recording.id)
    FROM recording
    INNER JOIN collection_entity ce ON recording.id = ce.entity_id
    INNER JOIN collection c ON c.id = ce.id
    INNER JOIN artist_credit_entity acr ON acr.entity_id = recording.id
    INNER JOIN artist_credit ac ON ac.id = acr.artist_credit_id
    LEFT JOIN alias ON recording.id = alias.mbid
    WHERE c.id = :collectionId
    AND ce.deleted = 0
    AND (
      recording.name LIKE :query OR
      recording.disambiguation LIKE :query OR
      recording.first_release_date LIKE :query OR
      ac.name LIKE :query OR
      alias.name LIKE :query
    )
  ),
  0
) AS count;

getRecordingsByCollection:
SELECT
  recording.id,
  recording.name,
  recording.disambiguation,
  recording.first_release_date,
  recording.length,
  recording.video,
  ac.name AS artist_credits,
  details_metadata.entity_id IS NOT NULL AS visited,
  ce.id IS NOT NULL AS collected
FROM recording
INNER JOIN collection_entity ce ON recording.id = ce.entity_id
INNER JOIN collection c ON c.id = ce.id
INNER JOIN artist_credit_entity acr ON acr.entity_id = recording.id
INNER JOIN artist_credit ac ON ac.id = acr.artist_credit_id
LEFT JOIN alias ON recording.id = alias.mbid
LEFT JOIN details_metadata ON details_metadata.entity_id = recording.id
WHERE c.id = :collectionId
AND ce.deleted = 0
AND (
  recording.name LIKE :query OR
  recording.disambiguation LIKE :query OR
  recording.first_release_date LIKE :query OR
  ac.name LIKE :query OR
  alias.name LIKE :query
)
GROUP BY recording.id
ORDER BY recording.first_release_date, recording.name
LIMIT :limit OFFSET :offset;

-- all recordings

getCountOfAllRecordings:
SELECT IFNULL(
  (
    SELECT COUNT(DISTINCT recording.id)
    FROM recording
    INNER JOIN artist_credit_entity acr ON acr.entity_id = recording.id
    INNER JOIN artist_credit ac ON ac.id = acr.artist_credit_id
    LEFT JOIN alias ON recording.id = alias.mbid
    WHERE (
      recording.name LIKE :query OR
      recording.disambiguation LIKE :query OR
      recording.first_release_date LIKE :query OR
      ac.name LIKE :query OR
      alias.name LIKE :query
    )
  ),
  0
) AS count;

getAllRecordings:
SELECT
  recording.id,
  recording.name,
  recording.disambiguation,
  recording.first_release_date,
  recording.length,
  recording.video,
  ac.name AS artist_credits,
  details_metadata.entity_id IS NOT NULL AS visited,
  EXISTS (
    SELECT 1 FROM collection_entity WHERE collection_entity.entity_id = recording.id
  ) AS collected
FROM recording
INNER JOIN artist_credit_entity acr ON acr.entity_id = recording.id
INNER JOIN artist_credit ac ON ac.id = acr.artist_credit_id
LEFT JOIN alias ON recording.id = alias.mbid
LEFT JOIN details_metadata ON details_metadata.entity_id = recording.id
WHERE (
  recording.name LIKE :query OR
  recording.disambiguation LIKE :query OR
  recording.first_release_date LIKE :query OR
  ac.name LIKE :query OR
  alias.name LIKE :query
)
GROUP BY recording.id
ORDER BY recording.first_release_date, recording.name
LIMIT :limit OFFSET :offset;
