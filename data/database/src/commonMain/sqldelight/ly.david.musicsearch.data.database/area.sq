import kotlin.Boolean;

CREATE TABLE area (
  id TEXT PRIMARY KEY NOT NULL,
  name TEXT NOT NULL,
  sort_name TEXT NOT NULL,
  disambiguation TEXT NOT NULL,
  type TEXT NOT NULL,
  type_id TEXT NOT NULL,
  begin TEXT NOT NULL,
  end TEXT NOT NULL,
  ended INTEGER AS Boolean NOT NULL
);

insertArea:
INSERT OR IGNORE INTO area
VALUES ?;

insertOrReplaceArea:
INSERT OR REPLACE INTO area
VALUES ?;

deleteArea:
DELETE FROM area
WHERE id = :areaId;

getAreaForDetails:
SELECT
  id,
  name,
  disambiguation,
  type,
  begin,
  end,
  ended,
  country_code.code,
  details_metadata.last_updated
FROM area
LEFT JOIN country_code ON id = country_code.area_id
LEFT JOIN details_metadata ON details_metadata.entity_id = id
WHERE id = :areaId
GROUP BY id;

-- areas by entity

CREATE TABLE IF NOT EXISTS areas_by_entity (
  entity_id TEXT NOT NULL,
  area_id TEXT NOT NULL,

  PRIMARY KEY (entity_id, area_id)
);

insertOrIgnoreAreasByEntity:
INSERT OR IGNORE INTO areas_by_entity
VALUES ?;

-- all areas

getCountOfAllAreas:
SELECT IFNULL(
  (
    SELECT COUNT(DISTINCT area.id)
    FROM area
    LEFT JOIN area_alias ON area.id = area_alias.area_id AND area_alias.is_primary
    WHERE (
      area.name LIKE :query OR
      area.disambiguation LIKE :query OR
      area.sort_name LIKE :query OR
      area.type LIKE :query OR
      area_alias.name LIKE :query
    )
  ),
  0
) AS count;

getAllAreas:
SELECT
  area.id,
  area.name,
  area.sort_name,
  area.disambiguation,
  area.type,
  area.begin,
  area.end,
  area.ended,
  cc.code,
  details_metadata.entity_id IS NOT NULL AS visited,
  EXISTS (
    SELECT 1 FROM collection_entity WHERE collection_entity.entity_id = area.id
  ) AS collected,
  GROUP_CONCAT(area_alias.name, CHAR(9)) AS alias_names,
  GROUP_CONCAT(area_alias.locale, CHAR(9)) AS alias_locales
FROM area
LEFT JOIN area_alias ON area.id = area_alias.area_id AND area_alias.is_primary
LEFT JOIN country_code cc ON area.id = cc.area_id
LEFT JOIN details_metadata ON details_metadata.entity_id = area.id
WHERE (
  area.name LIKE :query OR
  area.disambiguation LIKE :query OR
  area.sort_name LIKE :query OR
  area.type LIKE :query OR
  area_alias.name LIKE :query
)
GROUP BY area.id
ORDER BY area.begin, area.end, area.name
LIMIT :limit OFFSET :offset;

-- areas by collection

getNumberOfAreasByCollection:
SELECT IFNULL(
  (
    SELECT COUNT(DISTINCT area.id)
    FROM area
    INNER JOIN collection_entity ce ON area.id = ce.entity_id
    INNER JOIN collection c ON c.id = ce.id
    LEFT JOIN area_alias ON area.id = area_alias.area_id AND area_alias.is_primary
    WHERE c.id = :collectionId
    AND ce.deleted = 0
    AND (
      area.name LIKE :query OR
      area.disambiguation LIKE :query OR
      area.sort_name LIKE :query OR
      area.type LIKE :query OR
      area_alias.name LIKE :query
    )
  ),
  0
) AS count;

getAreasByCollection:
SELECT
  area.id,
  area.name,
  area.sort_name,
  area.disambiguation,
  area.type,
  area.begin,
  area.end,
  area.ended,
  cc.code,
  details_metadata.entity_id IS NOT NULL AS visited,
  ce.id IS NOT NULL AS collected,
  GROUP_CONCAT(area_alias.name, CHAR(9)) AS alias_names,
  GROUP_CONCAT(area_alias.locale, CHAR(9)) AS alias_locales
FROM area
INNER JOIN collection_entity ce ON area.id = ce.entity_id
INNER JOIN collection c ON c.id = ce.id
LEFT JOIN area_alias ON area.id = area_alias.area_id AND area_alias.is_primary
LEFT JOIN country_code cc ON area.id = cc.area_id
LEFT JOIN details_metadata ON details_metadata.entity_id = area.id
WHERE c.id = :collectionId
AND ce.deleted = 0
AND (
  area.name LIKE :query OR
  area.disambiguation LIKE :query OR
  area.sort_name LIKE :query OR
  area.type LIKE :query OR
  area_alias.name LIKE :query
)
GROUP BY area.id
ORDER BY area.begin, area.end, area.name
LIMIT :limit OFFSET :offset;

-- area by place

getAreasByPlace:
SELECT
  area.id,
  area.name,
  area.sort_name,
  area.disambiguation,
  area.type,
  area.begin,
  area.end,
  area.ended,
  '' AS countryCode,
  details_metadata.entity_id IS NOT NULL AS visited,
  area.id IS NULL AS collected, -- don't care about whether it's collected
  GROUP_CONCAT(area_alias.name, CHAR(9)) AS alias_names,
  GROUP_CONCAT(area_alias.locale, CHAR(9)) AS alias_locales
FROM area
INNER JOIN area_place ap ON area.id = ap.area_id
LEFT JOIN area_alias ON area.id = area_alias.area_id AND area_alias.is_primary
LEFT JOIN details_metadata ON details_metadata.entity_id = area.id
WHERE ap.place_id = :placeId
GROUP BY area.id;

-- An area that does not have a type is the area for a place that has never been visited.
-- We only delete this one so that we don't delete the rest of its containment.
deleteAreaPlaceLink:
DELETE FROM area_place WHERE area_id IN (
  SELECT a.id
  FROM place p
  INNER JOIN area_place ap ON p.id = ap.place_id
  INNER JOIN area a ON a.id = ap.area_id
  WHERE place_id = :placeId
  AND a.type IS NULL
);

-- countries by release

getCountriesByRelease:
SELECT
  a.id,
  a.name,
  rc.date,
  cc.code,
  details_metadata.entity_id IS NOT NULL AS visited
FROM area a
INNER JOIN areas_by_entity ae ON a.id = ae.area_id
INNER JOIN release_country rc ON rc.release_id = :releaseId AND rc.country_id = a.id
LEFT JOIN country_code cc ON cc.area_id = a.id
LEFT JOIN details_metadata ON details_metadata.entity_id = a.id
WHERE ae.entity_id = :releaseId
ORDER BY rc.date, a.name;
