import kotlin.Boolean;

CREATE TABLE IF NOT EXISTS area (
  id TEXT PRIMARY KEY NOT NULL,
  name TEXT NOT NULL,
  sort_name TEXT NOT NULL,
  disambiguation TEXT,
  type TEXT,
  type_id TEXT,
  begin TEXT,
  end TEXT,
  ended INTEGER AS Boolean
);

insert:
INSERT OR IGNORE INTO area
VALUES ?;

insertReplace:
INSERT OR REPLACE INTO area
VALUES ?;

getArea:
SELECT
  id,
  name,
  disambiguation,
  type,
  begin,
  end,
  ended,
  cc.code
FROM area
LEFT JOIN country_code cc ON id = cc.area_id
WHERE id = ?
GROUP BY id;

delete:
DELETE FROM area
WHERE id = :areaId;

-- all areas

getNumberOfAreas:
SELECT IFNULL(
  (
    SELECT COUNT(*)
    FROM area a
    WHERE (
      a.name LIKE :query OR
      a.disambiguation LIKE :query OR
      a.sort_name LIKE :query OR
      a.type LIKE :query
    )
  ),
  0
) AS count;

getAllAreas:
SELECT
  a.id,
  a.name,
  a.sort_name,
  a.disambiguation,
  a.type,
  a.begin,
  a.end,
  a.ended,
  visited.entity_id IS NOT NULL AS visited
FROM area a
LEFT JOIN visited ON visited.entity_id = a.id
WHERE (
  a.name LIKE :query OR
  a.disambiguation LIKE :query OR
  a.sort_name LIKE :query OR
  a.type LIKE :query
)
ORDER BY a.begin, a.end, a.name
LIMIT :limit OFFSET :offset;

-- areas by collection

getNumberOfAreasByCollection:
SELECT IFNULL(
  (
    SELECT COUNT(*)
    FROM area a
    INNER JOIN collection_entity ce ON a.id = ce.entity_id
    INNER JOIN collection c ON c.id = ce.id
    WHERE c.id = :collectionId
    AND (
      a.name LIKE :query OR
      a.disambiguation LIKE :query OR
      a.sort_name LIKE :query OR
      a.type LIKE :query
    )
  ),
  0
) AS count;

getAreasByCollection:
SELECT
  a.id,
  a.name,
  a.sort_name,
  a.disambiguation,
  a.type,
  a.begin,
  a.end,
  a.ended,
  visited.entity_id IS NOT NULL AS visited
FROM area a
INNER JOIN collection_entity ce ON a.id = ce.entity_id
INNER JOIN collection c ON c.id = ce.id
LEFT JOIN visited ON visited.entity_id = a.id
WHERE c.id = :collectionId
AND (
  a.name LIKE :query OR
  a.disambiguation LIKE :query OR
  a.sort_name LIKE :query OR
  a.type LIKE :query
)
ORDER BY a.begin, a.end, a.name
LIMIT :limit OFFSET :offset;

-- area by place

getAreasByPlace:
SELECT
  a.id,
  a.name,
  a.sort_name,
  a.disambiguation,
  a.type,
  a.begin,
  a.end,
  a.ended,
  visited.entity_id IS NOT NULL AS visited
FROM area a
INNER JOIN area_place ap ON a.id = ap.area_id
LEFT JOIN visited ON visited.entity_id = a.id
WHERE ap.place_id = :placeId;

-- An area that does not have a type is the area for a place that has never been visited.
-- We only delete this one so that we don't delete the rest of its containment.
deleteAreaPlaceLink:
DELETE FROM area_place WHERE area_id IN (
  SELECT a.id
  FROM place p
  INNER JOIN area_place ap ON p.id = ap.place_id
  INNER JOIN area a ON a.id = ap.area_id
  WHERE place_id = :placeId
  AND a.type IS NULL
);

-- countries by release

getCountriesByRelease:
SELECT
  a.id,
  a.name,
  rc.date,
  cc.code,
  visited.entity_id IS NOT NULL AS visited
FROM area a
INNER JOIN release_country rc ON rc.country_id = a.id
INNER JOIN `release` r ON r.id = rc.release_id
LEFT JOIN country_code cc ON cc.area_id = a.id
LEFT JOIN visited ON visited.entity_id = a.id
WHERE r.id = :releaseId
ORDER BY rc.date, a.name;

deleteCountriesByReleaseLinks:
DELETE FROM release_country
WHERE release_id = :releaseId;
