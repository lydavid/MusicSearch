CREATE TABLE IF NOT EXISTS genre (
  id TEXT PRIMARY KEY NOT NULL,
  name TEXT NOT NULL,
  disambiguation TEXT
);

insert:
INSERT OR IGNORE INTO genre
VALUES ?;

getGenre:
SELECT
  id,
  name,
  disambiguation
FROM genre WHERE id = ?;

-- genres by collection

getNumberOfGenresByCollection:
SELECT IFNULL(
  (
    SELECT COUNT(*)
    FROM genre
    INNER JOIN collection_entity ce ON genre.id = ce.entity_id
    INNER JOIN collection c ON c.id = ce.id
    WHERE c.id = :collectionId
    AND ce.deleted = 0
    AND (
      genre.name LIKE :query OR
      genre.disambiguation LIKE :query
    )
  ),
  0
) AS count;

getGenresByCollection:
SELECT
  genre.id,
  genre.name,
  genre.disambiguation,
  EXISTS (
    SELECT 1 FROM details_metadata WHERE details_metadata.entity_id = genre.id
  ) AS visited,
  ce.id IS NOT NULL AS collected
FROM genre
INNER JOIN collection_entity ce ON genre.id = ce.entity_id
INNER JOIN collection c ON c.id = ce.id
WHERE c.id = :collectionId
AND ce.deleted = 0
AND (
  genre.name LIKE :query OR
  genre.disambiguation LIKE :query
)
LIMIT :limit OFFSET :offset;

-- all genres

getCountOfAllGenres:
SELECT IFNULL(
  (
    SELECT COUNT(*)
    FROM genre
    WHERE (
      genre.name LIKE :query OR
      genre.disambiguation LIKE :query
    )
  ),
  0
) AS count;

getAllGenres:
SELECT
  genre.id,
  genre.name,
  genre.disambiguation,
  EXISTS (
    SELECT 1 FROM details_metadata WHERE details_metadata.entity_id = genre.id
  ) AS visited,
  EXISTS (
    SELECT 1 FROM collection_entity WHERE collection_entity.entity_id = genre.id
  ) AS collected
FROM genre
WHERE (
  genre.name LIKE :query OR
  genre.disambiguation LIKE :query
)
LIMIT :limit OFFSET :offset;
