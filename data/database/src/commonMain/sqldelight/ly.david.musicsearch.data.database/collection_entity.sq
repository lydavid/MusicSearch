CREATE TABLE IF NOT EXISTS collection_entity (
  `id` TEXT NOT NULL,
  `entity_id` TEXT NOT NULL,

  PRIMARY KEY(`id`, `entity_id`),

  FOREIGN KEY(`id`) REFERENCES `collection`(`id`)
  ON UPDATE CASCADE
  ON DELETE CASCADE
);

insertOrFail:
INSERT OR FAIL INTO collection_entity
VALUES ?;

lastInsertRowId:
SELECT last_insert_rowid();

getEntitiesFromCollection:
SELECT ce.*
FROM collection_entity ce
INNER JOIN collection c ON c.id = ce.id
WHERE c.id = :collectionId;

deleteAllFromCollection:
DELETE FROM collection_entity
WHERE id = :collectionId;

deleteFromCollection:
DELETE FROM collection_entity
WHERE id = :collectionId
AND entity_id = :collectableId;

deleteCollection {
DELETE FROM collection
WHERE id = :collectionId;

DELETE FROM collection_entity
WHERE id = :collectionId;
}

-- areas by collection

getNumberOfAreasByCollection:
SELECT IFNULL(
  (
    SELECT COUNT(*)
    FROM area a
    INNER JOIN collection_entity ce ON a.id = ce.entity_id
    INNER JOIN collection c ON c.id = ce.id
    WHERE c.id = :collectionId
    AND (
      a.name LIKE :query OR
      a.disambiguation LIKE :query OR
      a.sort_name LIKE :query OR
      a.type LIKE :query
    )
  ),
  0
) AS count;

getAreasByCollection:
SELECT
  a.id,
  a.name,
  a.sort_name,
  a.disambiguation,
  a.type,
  a.begin,
  a.end,
  a.ended,
  visited.entity_id IS NOT NULL AS visited
FROM area a
INNER JOIN collection_entity ce ON a.id = ce.entity_id
INNER JOIN collection c ON c.id = ce.id
LEFT JOIN visited ON visited.entity_id = a.id
WHERE c.id = :collectionId
AND (
  a.name LIKE :query OR
  a.disambiguation LIKE :query OR
  a.sort_name LIKE :query OR
  a.type LIKE :query
)
ORDER BY a.begin, a.end, a.name
LIMIT :limit OFFSET :offset;


-- aritsts by collection

getNumberOfArtistsByCollection:
SELECT IFNULL(
  (
    SELECT COUNT(*)
    FROM artist a
    INNER JOIN collection_entity ce ON a.id = ce.entity_id
    INNER JOIN collection c ON c.id = ce.id
    WHERE c.id = :collectionId
    AND (
      a.name LIKE :query OR
      a.disambiguation LIKE :query OR
      a.sort_name LIKE :query OR
      a.type LIKE :query OR
      a.gender LIKE :query OR
      a.country_code LIKE :query
    )
  ),
  0
) AS count;

getArtistsByCollection:
SELECT
  a.id,
  a.name,
  a.sort_name,
  a.disambiguation,
  a.type,
  a.gender,
  a.country_code,
  a.begin,
  a.end,
  a.ended,
  mi.thumbnail_url,
  visited.entity_id IS NOT NULL AS visited
FROM artist a
INNER JOIN collection_entity ce ON a.id = ce.entity_id
INNER JOIN collection c ON c.id = ce.id
LEFT JOIN mbid_image mi ON mi.mbid = a.id
LEFT JOIN visited ON visited.entity_id = a.id
WHERE c.id = :collectionId
AND (
  a.name LIKE :query OR
  a.disambiguation LIKE :query OR
  a.sort_name LIKE :query OR
  a.type LIKE :query OR
  a.gender LIKE :query OR
  a.country_code LIKE :query
)
ORDER BY a.begin, a.end, a.name
LIMIT :limit OFFSET :offset;


-- events by collection

getNumberOfEventsByCollection:
SELECT IFNULL(
  (
    SELECT COUNT(*)
    FROM event e
    INNER JOIN collection_entity ce ON e.id = ce.entity_id
    INNER JOIN collection c ON c.id = ce.id
    WHERE c.id = :collectionId
    AND (
      e.name LIKE :query OR
      e.disambiguation LIKE :query OR
      e.type LIKE :query
    )
  ),
  0
) AS count;

getEventsByCollection:
SELECT
  e.id,
  e.name,
  e.disambiguation,
  e.type,
  e.time,
  e.cancelled,
  e.begin,
  e.end,
  e.ended,
  visited.entity_id IS NOT NULL AS visited
FROM event e
INNER JOIN collection_entity ce ON e.id = ce.entity_id
INNER JOIN collection c ON c.id = ce.id
LEFT JOIN visited ON visited.entity_id = e.id
WHERE c.id = :collectionId
AND (
  e.name LIKE :query OR
  e.disambiguation LIKE :query OR
  e.type LIKE :query
)
ORDER BY e.begin, e.end, e.name
LIMIT :limit OFFSET :offset;


-- genres by collection

getNumberOfGenresByCollection:
SELECT IFNULL(
  (
    SELECT COUNT(*)
    FROM genre e
    INNER JOIN collection_entity ce ON e.id = ce.entity_id
    INNER JOIN collection c ON c.id = ce.id
    WHERE c.id = :collectionId
    AND (
      e.name LIKE :query OR
      e.disambiguation LIKE :query
    )
  ),
  0
) AS count;

getGenresByCollection:
SELECT
  e.id,
  e.name,
  e.disambiguation
FROM genre e
INNER JOIN collection_entity ce ON e.id = ce.entity_id
INNER JOIN collection c ON c.id = ce.id
WHERE c.id = :collectionId
AND (
  e.name LIKE :query OR
  e.disambiguation LIKE :query
)
LIMIT :limit OFFSET :offset;


-- instruments by collection

getNumberOfInstrumentsByCollection:
SELECT IFNULL(
  (
    SELECT COUNT(*)
    FROM instrument i
    INNER JOIN collection_entity ce ON i.id = ce.entity_id
    INNER JOIN collection c ON c.id = ce.id
    WHERE c.id = :collectionId
    AND (
      i.name LIKE :query OR
      i.disambiguation LIKE :query OR
      i.type LIKE :query OR
      i.description LIKE :query
    )
  ),
  0
) AS count;

getInstrumentsByCollection:
SELECT
  i.id,
  i.name,
  i.disambiguation,
  i.description,
  i.type,
  visited.entity_id IS NOT NULL AS visited
FROM instrument i
INNER JOIN collection_entity ce ON i.id = ce.entity_id
INNER JOIN collection c ON c.id = ce.id
LEFT JOIN visited ON visited.entity_id = i.id
WHERE c.id = :collectionId
AND (
  i.name LIKE :query OR
  i.disambiguation LIKE :query OR
  i.type LIKE :query OR
  i.description LIKE :query
)
LIMIT :limit OFFSET :offset;


-- labels by collection

getNumberOfLabelsByCollection:
SELECT IFNULL(
  (
    SELECT COUNT(*)
    FROM label l
    INNER JOIN collection_entity ce ON l.id = ce.entity_id
    INNER JOIN collection c ON c.id = ce.id
    WHERE c.id = :collectionId
    AND (
      l.name LIKE :query OR
      l.disambiguation LIKE :query OR
      l.type LIKE :query OR
      l.label_code LIKE :query
    )
  ),
  0
) AS count;

getLabelsByCollection:
SELECT
  l.id,
  l.name,
  l.disambiguation,
  l.type,
  l.label_code,
  visited.entity_id IS NOT NULL AS visited
FROM label l
INNER JOIN collection_entity ce ON l.id = ce.entity_id
INNER JOIN collection c ON c.id = ce.id
LEFT JOIN visited ON visited.entity_id = l.id
WHERE c.id = :collectionId
AND (
  l.name LIKE :query OR
  l.disambiguation LIKE :query OR
  l.type LIKE :query OR
  l.label_code LIKE :query
)
LIMIT :limit OFFSET :offset;


-- places by collection

getNumberOfPlacesByCollection:
SELECT IFNULL(
  (
    SELECT COUNT(*)
    FROM place p
    INNER JOIN collection_entity ce ON p.id = ce.entity_id
    INNER JOIN collection c ON c.id = ce.id
    WHERE c.id = :collectionId
    AND (
      p.name LIKE :query OR
      p.disambiguation LIKE :query OR
      p.address LIKE :query OR
      p.type LIKE :query
    )
  ),
  0
) AS count;

getPlacesByCollection:
SELECT
  p.id,
  p.name,
  p.disambiguation,
  p.address,
  p.type,
  p.longitude,
  p.latitude,
  p.begin,
  p.end,
  p.ended,
  visited.entity_id IS NOT NULL AS visited
FROM place p
INNER JOIN collection_entity ce ON p.id = ce.entity_id
INNER JOIN collection c ON c.id = ce.id
LEFT JOIN visited ON visited.entity_id = p.id
WHERE c.id = :collectionId
AND (
  p.name LIKE :query OR
  p.disambiguation LIKE :query OR
  p.address LIKE :query OR
  p.type LIKE :query
)
ORDER BY p.name, p.address
LIMIT :limit OFFSET :offset;


-- recordings by collection

getNumberOfRecordingsByCollection:
SELECT IFNULL(
  (
    SELECT COUNT(DISTINCT r.id)
    FROM recording r
    INNER JOIN collection_entity ce ON r.id = ce.entity_id
    INNER JOIN collection c ON c.id = ce.id
    INNER JOIN artist_credit_entity acr ON acr.entity_id = r.id
    INNER JOIN artist_credit ac ON ac.id = acr.artist_credit_id
    WHERE c.id = :collectionId
    AND (
      r.name LIKE :query
      OR r.disambiguation LIKE :query
      OR r.first_release_date LIKE :query
      OR ac.name LIKE :query
    )
  ),
  0
) AS count;

getRecordingsByCollection:
SELECT
  r.id,
  r.name,
  r.disambiguation,
  r.first_release_date,
  r.length,
  r.video,
  ac.name AS artist_credits,
  visited.entity_id IS NOT NULL AS visited
FROM recording r
INNER JOIN collection_entity ce ON r.id = ce.entity_id
INNER JOIN collection c ON c.id = ce.id
INNER JOIN artist_credit_entity acr ON acr.entity_id = r.id
INNER JOIN artist_credit ac ON ac.id = acr.artist_credit_id
LEFT JOIN visited ON visited.entity_id = r.id
WHERE c.id = :collectionId
AND (
  r.name LIKE :query
  OR r.disambiguation LIKE :query
  OR r.first_release_date LIKE :query
  OR ac.name LIKE :query
)
GROUP BY r.id
ORDER BY r.first_release_date, r.name
LIMIT :limit OFFSET :offset;


-- releases by collection

getNumberOfReleasesByCollection:
SELECT IFNULL(
  (
    SELECT COUNT(DISTINCT r.id)
    FROM release r
    INNER JOIN collection_entity ce ON r.id = ce.entity_id
    INNER JOIN collection c ON c.id = ce.id
    INNER JOIN artist_credit_entity acr ON acr.entity_id = r.id
    INNER JOIN artist_credit ac ON ac.id = acr.artist_credit_id
    WHERE c.id = :collectionId
    AND (
      r.name LIKE :query
      OR r.disambiguation LIKE :query
      OR r.date LIKE :query
      OR r.country_code LIKE :query
      OR ac.name LIKE :query
    )
  ),
  0
) AS count;

getReleasesByCollection:
SELECT
  r.*,
  ac.name AS artistCreditNames,
  mi.thumbnail_url,
  (
    SELECT COUNT(cc.area_id)
    FROM `release`
    INNER JOIN release_country rc ON rc.release_id = `release`.id
    INNER JOIN country_code cc ON cc.area_id = rc.country_id
    WHERE r.id = `release`.id
  ) AS releaseCountryCount,
  visited.entity_id IS NOT NULL AS visited
FROM `release` r
INNER JOIN collection_entity ce ON r.id = ce.entity_id
INNER JOIN collection c ON c.id = ce.id
INNER JOIN artist_credit_entity acr ON acr.entity_id = r.id
INNER JOIN artist_credit ac ON ac.id = acr.artist_credit_id
LEFT JOIN mbid_image mi ON mi.mbid = r.id
LEFT JOIN visited ON visited.entity_id = r.id
WHERE c.id = :collectionId
AND (
  r.name LIKE :query
  OR r.disambiguation LIKE :query
  OR r.date LIKE :query
  OR r.country_code LIKE :query
  OR ac.name LIKE :query
)
GROUP BY r.id
ORDER BY r.date, r.name
LIMIT :limit OFFSET :offset;


-- release groups by collection

getNumberOfReleaseGroupsByCollection:
SELECT IFNULL(
  (
    SELECT COUNT(DISTINCT rg.id)
    FROM release_group rg
    INNER JOIN collection_entity ce ON rg.id = ce.entity_id
    INNER JOIN collection c ON c.id = ce.id
    INNER JOIN artist_credit_entity acr ON acr.entity_id = rg.id
    INNER JOIN artist_credit ac ON ac.id = acr.artist_credit_id
    WHERE c.id = :collectionId
    AND (
      rg.name LIKE :query
      OR rg.disambiguation LIKE :query
      OR rg.first_release_date LIKE :query
      OR rg.primary_type LIKE :query
      OR rg.secondary_types LIKE :query
      OR ac.name LIKE :query
    )
  ),
  0
) AS count;

getReleaseGroupsByCollection:
SELECT
  rg.id,
  rg.name,
  rg.first_release_date,
  rg.disambiguation,
  rg.primary_type,
  rg.secondary_types,
  ac.name AS artist_credits,
  mi.thumbnail_url,
  visited.entity_id IS NOT NULL AS visited
FROM release_group rg
INNER JOIN collection_entity ce ON rg.id = ce.entity_id
INNER JOIN collection c ON c.id = ce.id
INNER JOIN artist_credit_entity acr ON acr.entity_id = rg.id
INNER JOIN artist_credit ac ON ac.id = acr.artist_credit_id
LEFT JOIN mbid_image mi ON mi.mbid = rg.id
LEFT JOIN visited ON visited.entity_id = rg.id
WHERE c.id = :collectionId
AND (
  rg.name LIKE :query
  OR rg.disambiguation LIKE :query
  OR rg.first_release_date LIKE :query
  OR rg.primary_type LIKE :query
  OR rg.secondary_types LIKE :query
  OR ac.name LIKE :query
)
GROUP BY rg.id
ORDER BY
  CASE WHEN :sorted THEN rg.primary_type ELSE ce.rowid END,
  CASE WHEN :sorted THEN rg.secondary_types END,
  CASE WHEN :sorted THEN rg.first_release_date END
LIMIT :limit OFFSET :offset;


-- series by collection

getNumberOfSeriesByCollection:
SELECT IFNULL(
  (
    SELECT COUNT(*)
    FROM series s
    INNER JOIN collection_entity ce ON s.id = ce.entity_id
    INNER JOIN collection c ON c.id = ce.id
    WHERE c.id = :collectionId
    AND (
      s.name LIKE :query
      OR s.disambiguation LIKE :query
      OR s.type LIKE :query
    )
  ),
  0
) AS count;

getSeriesByCollection:
SELECT
  s.id,
  s.name,
  s.disambiguation,
  s.type,
  visited.entity_id IS NOT NULL AS visited
FROM series s
INNER JOIN collection_entity ce ON s.id = ce.entity_id
INNER JOIN collection c ON c.id = ce.id
LEFT JOIN visited ON visited.entity_id = s.id
WHERE c.id = :collectionId
AND (
  s.name LIKE :query
  OR s.disambiguation LIKE :query
  OR s.type LIKE :query
)
LIMIT :limit OFFSET :offset;


-- works by collection

getNumberOfWorksByCollection:
SELECT IFNULL(
  (
    SELECT COUNT(*)
    FROM work w
    INNER JOIN collection_entity ce ON w.id = ce.entity_id
    INNER JOIN collection c ON c.id = ce.id
    WHERE c.id = :collectionId
    AND (
      w.name LIKE :query
      OR w.disambiguation LIKE :query
      OR w.type LIKE :query
      OR w.language LIKE :query
      OR w.iswcs LIKE :query
    )
  ),
  0
) AS count;

getWorksByCollection:
SELECT
  w.id,
  w.name,
  w.disambiguation,
  w.type,
  w.language,
  w.iswcs,
  visited.entity_id IS NOT NULL AS visited
FROM work w
INNER JOIN collection_entity ce ON w.id = ce.entity_id
INNER JOIN collection c ON c.id = ce.id
LEFT JOIN visited ON visited.entity_id = w.id
WHERE c.id = :collectionId
AND (
  w.name LIKE :query
  OR w.disambiguation LIKE :query
  OR w.type LIKE :query
  OR w.language LIKE :query
  OR w.iswcs LIKE :query
)
LIMIT :limit OFFSET :offset;
