CREATE TABLE IF NOT EXISTS collection_entity (
  `id` TEXT NOT NULL,
  `entity_id` TEXT NOT NULL,

  PRIMARY KEY(`id`, `entity_id`),

  FOREIGN KEY(`id`) REFERENCES `collection`(`id`)
  ON UPDATE CASCADE
  ON DELETE CASCADE
);

insert:
INSERT OR IGNORE INTO collection_entity
VALUES ?;

getEntitiesFromCollection:
SELECT ce.*
FROM collection_entity ce
INNER JOIN collection c ON c.id = ce.id
WHERE c.id = :collectionId;

deleteAllFromCollection:
DELETE FROM collection_entity WHERE id = :collectionId;

deleteFromCollection:
DELETE FROM collection_entity
WHERE id = :collectionId
AND entity_id = :collectableId;


-- areas by collection

getNumberOfAreasByCollection:
SELECT IFNULL(
  (
    SELECT COUNT(*)
    FROM area a
    INNER JOIN collection_entity ce ON a.id = ce.entity_id
    INNER JOIN collection c ON c.id = ce.id
    WHERE c.id = :collectionId
    AND (
      a.name LIKE :query OR
      a.disambiguation LIKE :query OR
      a.sort_name LIKE :query OR
      a.type LIKE :query
    )
  ),
  0
) AS count;

getAreasByCollection:
SELECT a.*
FROM area a
INNER JOIN collection_entity ce ON a.id = ce.entity_id
INNER JOIN collection c ON c.id = ce.id
WHERE c.id = :collectionId
AND (
  a.name LIKE :query OR
  a.disambiguation LIKE :query OR
  a.sort_name LIKE :query OR
  a.type LIKE :query
)
ORDER BY a.begin, a.end, a.name
LIMIT :limit OFFSET :offset;


-- areas by collection

getNumberOfArtistsByCollection:
SELECT IFNULL(
  (
    SELECT COUNT(*)
    FROM artist a
    INNER JOIN collection_entity ce ON a.id = ce.entity_id
    INNER JOIN collection c ON c.id = ce.id
    WHERE c.id = :collectionId
    AND (
      a.name LIKE :query OR
      a.disambiguation LIKE :query OR
      a.sort_name LIKE :query OR
      a.type LIKE :query OR
      a.gender LIKE :query OR
      a.country_code LIKE :query
    )
  ),
  0
) AS count;

getArtistsByCollection:
SELECT a.*
FROM artist a
INNER JOIN collection_entity ce ON a.id = ce.entity_id
INNER JOIN collection c ON c.id = ce.id
WHERE c.id = :collectionId
AND (
  a.name LIKE :query OR
  a.disambiguation LIKE :query OR
  a.sort_name LIKE :query OR
  a.type LIKE :query OR
  a.gender LIKE :query OR
  a.country_code LIKE :query
)
ORDER BY a.begin, a.end, a.name
LIMIT :limit OFFSET :offset;


-- events by collection

getNumberOfEventsByCollection:
SELECT IFNULL(
  (
    SELECT COUNT(*)
    FROM event e
    INNER JOIN collection_entity ce ON e.id = ce.entity_id
    INNER JOIN collection c ON c.id = ce.id
    WHERE c.id = :collectionId
    AND (
      e.name LIKE :query OR
      e.disambiguation LIKE :query OR
      e.type LIKE :query
    )
  ),
  0
) AS count;

getEventsByCollection:
SELECT e.*
FROM event e
INNER JOIN collection_entity ce ON e.id = ce.entity_id
INNER JOIN collection c ON c.id = ce.id
WHERE c.id = :collectionId
AND (
  e.name LIKE :query OR
  e.disambiguation LIKE :query OR
  e.type LIKE :query
)
ORDER BY e.begin, e.end, e.name
LIMIT :limit OFFSET :offset;


-- instruments by collection

getNumberOfInstrumentsByCollection:
SELECT IFNULL(
  (
    SELECT COUNT(*)
    FROM instrument i
    INNER JOIN collection_entity ce ON i.id = ce.entity_id
    INNER JOIN collection c ON c.id = ce.id
    WHERE c.id = :collectionId
    AND (
      i.name LIKE :query OR
      i.disambiguation LIKE :query OR
      i.type LIKE :query OR
      i.description LIKE :query
    )
  ),
  0
) AS count;

getInstrumentsByCollection:
SELECT i.*
FROM instrument i
INNER JOIN collection_entity ce ON i.id = ce.entity_id
INNER JOIN collection c ON c.id = ce.id
WHERE c.id = :collectionId
AND (
  i.name LIKE :query OR
  i.disambiguation LIKE :query OR
  i.type LIKE :query OR
  i.description LIKE :query
)
LIMIT :limit OFFSET :offset;


-- labels by collection

getNumberOfLabelsByCollection:
SELECT IFNULL(
  (
    SELECT COUNT(*)
    FROM label l
    INNER JOIN collection_entity ce ON l.id = ce.entity_id
    INNER JOIN collection c ON c.id = ce.id
    WHERE c.id = :collectionId
    AND (
      l.name LIKE :query OR
      l.disambiguation LIKE :query OR
      l.type LIKE :query OR
      l.label_code LIKE :query
    )
  ),
  0
) AS count;

getLabelsByCollection:
SELECT l.*
FROM label l
INNER JOIN collection_entity ce ON l.id = ce.entity_id
INNER JOIN collection c ON c.id = ce.id
WHERE c.id = :collectionId
AND (
  l.name LIKE :query OR
  l.disambiguation LIKE :query OR
  l.type LIKE :query OR
  l.label_code LIKE :query
)
LIMIT :limit OFFSET :offset;


-- places by collection

getNumberOfPlacesByCollection:
SELECT IFNULL(
  (
    SELECT COUNT(*)
    FROM place p
    INNER JOIN collection_entity ce ON p.id = ce.entity_id
    INNER JOIN collection c ON c.id = ce.id
    WHERE c.id = :collectionId
    AND (
      p.name LIKE :query OR
      p.disambiguation LIKE :query OR
      p.address LIKE :query OR
      p.type LIKE :query
    )
  ),
  0
) AS count;

getPlacesByCollection:
SELECT p.*
FROM place p
INNER JOIN collection_entity ce ON p.id = ce.entity_id
INNER JOIN collection c ON c.id = ce.id
WHERE c.id = :collectionId
AND (
  p.name LIKE :query OR
  p.disambiguation LIKE :query OR
  p.address LIKE :query OR
  p.type LIKE :query
)
ORDER BY p.name, p.address
LIMIT :limit OFFSET :offset;


-- recordings by collection

getNumberOfRecordingsByCollection:
SELECT IFNULL(
  (
    SELECT COUNT(*)
    FROM recording r
    INNER JOIN collection_entity ce ON r.id = ce.entity_id
    INNER JOIN collection c ON c.id = ce.id
    LEFT JOIN artist_credit_entity acr ON acr.entity_id = r.id
    LEFT JOIN artist_credit ac ON ac.id = acr.artist_credit_id
    WHERE c.id = :collectionId
    AND (
      r.name LIKE :query
      OR r.disambiguation LIKE :query
      OR r.first_release_date LIKE :query
      OR ac.name LIKE :query
    )
  ),
  0
) AS count;

getRecordingsByCollection:
SELECT r.*, ac.name
FROM recording r
INNER JOIN collection_entity ce ON r.id = ce.entity_id
INNER JOIN collection c ON c.id = ce.id
LEFT JOIN artist_credit_entity acr ON acr.entity_id = r.id
LEFT JOIN artist_credit ac ON ac.id = acr.artist_credit_id
WHERE c.id = :collectionId
AND (
  r.name LIKE :query
  OR r.disambiguation LIKE :query
  OR r.first_release_date LIKE :query
  OR ac.name LIKE :query
)
ORDER BY r.first_release_date, r.name
LIMIT :limit OFFSET :offset;
