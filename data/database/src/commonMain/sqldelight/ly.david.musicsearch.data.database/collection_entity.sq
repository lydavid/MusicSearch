CREATE TABLE IF NOT EXISTS collection_entity (
  `id` TEXT NOT NULL,
  `entity_id` TEXT NOT NULL,

  PRIMARY KEY(`id`, `entity_id`),

  FOREIGN KEY(`id`) REFERENCES `collection`(`id`)
  ON UPDATE CASCADE
  ON DELETE CASCADE
);

insertOrFail:
INSERT OR FAIL INTO collection_entity
VALUES ?;

getEntitiesFromCollection:
SELECT ce.*
FROM collection_entity ce
INNER JOIN collection c ON c.id = ce.id
WHERE c.id = :collectionId;

deleteAllFromCollection:
DELETE FROM collection_entity
WHERE id = :collectionId;

deleteFromCollection:
DELETE FROM collection_entity
WHERE id = :collectionId
AND entity_id = :collectableId;

deleteCollection {
DELETE FROM collection
WHERE id = :collectionId;

DELETE FROM collection_entity
WHERE id = :collectionId;
}

getCountOfEntitiesByCollection:
SELECT IFNULL(
  (
    SELECT COUNT(*)
    FROM collection_entity ce
    WHERE ce.id = :collectionId
  ),
  0
) AS count;


-- genres by collection

getNumberOfGenresByCollection:
SELECT IFNULL(
  (
    SELECT COUNT(*)
    FROM genre e
    INNER JOIN collection_entity ce ON e.id = ce.entity_id
    INNER JOIN collection c ON c.id = ce.id
    WHERE c.id = :collectionId
    AND (
      e.name LIKE :query OR
      e.disambiguation LIKE :query
    )
  ),
  0
) AS count;

getGenresByCollection:
SELECT
  e.id,
  e.name,
  e.disambiguation
FROM genre e
INNER JOIN collection_entity ce ON e.id = ce.entity_id
INNER JOIN collection c ON c.id = ce.id
WHERE c.id = :collectionId
AND (
  e.name LIKE :query OR
  e.disambiguation LIKE :query
)
LIMIT :limit OFFSET :offset;




-- series by collection

getNumberOfSeriesByCollection:
SELECT IFNULL(
  (
    SELECT COUNT(*)
    FROM series s
    INNER JOIN collection_entity ce ON s.id = ce.entity_id
    INNER JOIN collection c ON c.id = ce.id
    WHERE c.id = :collectionId
    AND (
      s.name LIKE :query
      OR s.disambiguation LIKE :query
      OR s.type LIKE :query
    )
  ),
  0
) AS count;

getSeriesByCollection:
SELECT
  s.id,
  s.name,
  s.disambiguation,
  s.type,
  visited.entity_id IS NOT NULL AS visited
FROM series s
INNER JOIN collection_entity ce ON s.id = ce.entity_id
INNER JOIN collection c ON c.id = ce.id
LEFT JOIN visited ON visited.entity_id = s.id
WHERE c.id = :collectionId
AND (
  s.name LIKE :query
  OR s.disambiguation LIKE :query
  OR s.type LIKE :query
)
LIMIT :limit OFFSET :offset;
