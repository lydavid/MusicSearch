import kotlin.Boolean;

CREATE TABLE IF NOT EXISTS collection_entity (
  id TEXT NOT NULL,
  entity_id TEXT NOT NULL,
  deleted INTEGER AS Boolean NOT NULL DEFAULT 0,

  PRIMARY KEY(id, entity_id),

  FOREIGN KEY(id) REFERENCES collection(id)
  ON UPDATE CASCADE
  ON DELETE CASCADE
);

CREATE INDEX idx_collection_entity_entity_id ON collection_entity(entity_id);

insert:
INSERT OR IGNORE INTO collection_entity
VALUES ?;

getEntitiesFromCollection:
SELECT ce.*
FROM collection_entity ce
INNER JOIN collection c ON c.id = ce.id
WHERE c.id = :collectionId;

deleteAllFromCollection:
DELETE FROM collection_entity
WHERE id = :collectionId;

markDeletedFromCollection:
UPDATE collection_entity
SET deleted = 1
WHERE id = :collectionId
AND entity_id = :collectableId;

unMarkDeletedFromCollection:
UPDATE collection_entity
SET deleted = 0
WHERE id = :collectionId;

getIdsMarkedForDeletionFromCollection:
SELECT entity_id
FROM collection_entity
WHERE id = :collectionId
AND deleted = 1;

deleteFromCollection:
DELETE FROM collection_entity
WHERE id = :collectionId
AND deleted = 1;

getCountOfEntitiesByCollection:
SELECT IFNULL(
  (
    SELECT COUNT(*)
    FROM collection_entity ce
    WHERE ce.id = :collectionId
  ),
  0
) AS count;

entityIsInACollection:
SELECT COUNT(collection.id) > 0
FROM collection_entity
INNER JOIN collection ON collection_entity.id = collection.id
WHERE collection_entity.entity_id = :entityId;
