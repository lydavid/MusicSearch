import kotlin.String;
import kotlin.collections.List;

CREATE TABLE release_group (
  id TEXT PRIMARY KEY NOT NULL,
  name TEXT NOT NULL,
  disambiguation TEXT NOT NULL,
  first_release_date TEXT NOT NULL,
  primary_type TEXT NOT NULL,
  primary_type_id TEXT NOT NULL,
  secondary_types TEXT AS List<String> NOT NULL,
  secondary_type_ids TEXT AS List<String> NOT NULL
);

CREATE VIEW release_group_base AS
SELECT
  release_group.id,
  release_group.name,
  release_group.disambiguation,
  release_group.first_release_date,
  release_group.primary_type,
  release_group.secondary_types,
  ac.name AS artist_credits,
  mi.thumbnail_url,
  mi.id AS image_id,
  EXISTS (
    SELECT 1 FROM details_metadata WHERE details_metadata.entity_id = release_group.id
  ) AS visited,
  EXISTS (
    SELECT 1 FROM collection_entity WHERE collection_entity.entity_id = release_group.id
  ) AS collected,
  GROUP_CONCAT(release_group_alias.name, CHAR(9)) AS alias_names,
  GROUP_CONCAT(release_group_alias.locale, CHAR(9)) AS alias_locales
FROM release_group
INNER JOIN artist_credit_entity acr ON acr.entity_id = release_group.id
INNER JOIN artist_credit ac ON ac.id = acr.artist_credit_id
LEFT JOIN release_group_alias ON release_group.id = release_group_alias.release_group_id AND release_group_alias.is_primary
LEFT JOIN mbid_image mi ON mi.mbid = release_group.id
GROUP BY release_group.id;

-- queries

upsert {
UPDATE release_group
SET
  name = :name,
  disambiguation = :disambiguation,
  first_release_date = :first_release_date,
  primary_type = :primary_type,
  primary_type_id = :primary_type_id,
  secondary_types = :secondary_types,
  secondary_type_ids = :secondary_type_ids
WHERE id = :id;

INSERT OR IGNORE INTO release_group
VALUES (
  :id,
  :name,
  :disambiguation,
  :first_release_date,
  :primary_type,
  :primary_type_id,
  :secondary_types,
  :secondary_type_ids
);
}

getReleaseGroupForDetails:
SELECT
  rg.id,
  rg.name,
  rg.disambiguation,
  rg.first_release_date,
  rg.primary_type,
  rg.secondary_types,
  details_metadata.last_updated
FROM release_group rg
LEFT JOIN details_metadata ON details_metadata.entity_id = rg.id
WHERE rg.id = :releaseGroupId;

getReleaseGroupForRelease:
SELECT rg.*
FROM release_group rg
INNER JOIN release_release_group rrg ON rg.id = rrg.release_group_id
INNER JOIN release r ON rrg.release_id = r.id
WHERE r.id = :releaseId
LIMIT 1;

deleteReleaseGroup:
DELETE FROM release_group
WHERE id = :id;

-- release groups by entity

CREATE TABLE IF NOT EXISTS release_groups_by_entity (
  entity_id TEXT NOT NULL,
  release_group_id TEXT NOT NULL,

  PRIMARY KEY(entity_id, release_group_id)
);

insertOrIgnoreReleaseGroupByEntity:
INSERT OR IGNORE INTO release_groups_by_entity
VALUES ?;

deleteReleaseGroupLinksByEntity {
DELETE FROM release_groups_by_entity WHERE entity_id = :entityId;
}

getCountOfEachAlbumTypes:
SELECT rg.primary_type, rg.secondary_types, COUNT(rg.id) AS count
FROM release_group rg
GROUP BY rg.primary_type, rg.secondary_types;

getCountOfEachAlbumTypesByEntity:
SELECT rg.primary_type, rg.secondary_types, COUNT(rg.id) AS count
FROM release_group rg
INNER JOIN release_groups_by_entity ON rg.id = release_groups_by_entity.release_group_id
WHERE release_groups_by_entity.entity_id = :entityId
GROUP BY rg.primary_type, rg.secondary_types;

getCountOfEachAlbumTypesByCollection:
SELECT rg.primary_type, rg.secondary_types, COUNT(rg.id) AS count
FROM release_group rg
INNER JOIN collection_entity ON rg.id = collection_entity.entity_id
INNER JOIN collection ON collection.id = collection_entity.id
WHERE collection.id = :collectionId
GROUP BY rg.primary_type, rg.secondary_types;

getCountOfReleaseGroupsByEntity:
SELECT IFNULL(
  COUNT(DISTINCT release_group.id),
  0
) AS count
FROM release_group
INNER JOIN release_groups_by_entity ON release_group.id = release_groups_by_entity.release_group_id
INNER JOIN artist_credit_entity acr ON acr.entity_id = release_group.id
INNER JOIN artist_credit ac ON ac.id = acr.artist_credit_id
LEFT JOIN release_group_alias ON release_group.id = release_group_alias.release_group_id AND release_group_alias.is_primary
WHERE release_groups_by_entity.entity_id = :entityId
AND (
  release_group.name LIKE :query OR
  release_group.disambiguation LIKE :query OR
  release_group.first_release_date LIKE :query OR
  release_group.primary_type LIKE :query OR
  release_group.secondary_types LIKE :query OR
  ac.name LIKE :query OR
  release_group_alias.name LIKE :query
);

getReleaseGroupsByEntity:
SELECT
  release_group.id,
  release_group.name,
  release_group.disambiguation,
  release_group.first_release_date,
  release_group.primary_type,
  release_group.secondary_types,
  ac.name AS artist_credits,
  images.thumbnail_url,
  images.id AS image_id,
  EXISTS (
    SELECT 1 FROM details_metadata WHERE details_metadata.entity_id = release_group.id
  ) AS visited,
  EXISTS (
    SELECT 1 FROM collection_entity WHERE collection_entity.entity_id = release_group.id
  ) AS collected,
  aliases.alias_names,
  aliases.alias_locales
FROM release_group
INNER JOIN release_groups_by_entity ON release_group.id = release_groups_by_entity.release_group_id
INNER JOIN artist_credit_entity acr ON acr.entity_id = release_group.id
INNER JOIN artist_credit ac ON ac.id = acr.artist_credit_id
LEFT JOIN mbid_image images ON images.mbid = release_group.id
LEFT JOIN (
  SELECT
    release_group_alias.release_group_id,
    GROUP_CONCAT(release_group_alias.name, CHAR(9)) AS alias_names,
    GROUP_CONCAT(release_group_alias.locale, CHAR(9)) AS alias_locales
  FROM release_group_alias
  WHERE release_group_alias.is_primary AND release_group_alias.release_group_id IN (
    SELECT DISTINCT release_group.id
    FROM release_group
    INNER JOIN release_groups_by_entity ON release_group.id = release_groups_by_entity.release_group_id
    WHERE release_groups_by_entity.entity_id = :entityId
  )
  GROUP BY release_group_alias.release_group_id
) AS aliases ON aliases.release_group_id = release_group.id
WHERE release_groups_by_entity.entity_id = :entityId
AND (
  release_group.name LIKE :query OR
  release_group.disambiguation LIKE :query OR
  release_group.first_release_date LIKE :query OR
  release_group.primary_type LIKE :query OR
  release_group.secondary_types LIKE :query OR
  artist_credits LIKE :query OR
  aliases.alias_names LIKE :query
)
GROUP BY release_group.id
ORDER BY
  CASE WHEN :sorted THEN release_group.primary_type ELSE release_groups_by_entity.rowid END,
  CASE WHEN :sorted THEN release_group.secondary_types END,
  CASE WHEN :sorted THEN release_group.first_release_date END
LIMIT :limit OFFSET :offset;

-- release groups by collection

getCountOfReleaseGroupsByCollection:
SELECT IFNULL(
  COUNT(DISTINCT release_group.id),
  0
) AS count
FROM release_group
INNER JOIN collection_entity ce ON release_group.id = ce.entity_id
INNER JOIN collection c ON c.id = ce.id
INNER JOIN artist_credit_entity acr ON acr.entity_id = release_group.id
INNER JOIN artist_credit ac ON ac.id = acr.artist_credit_id
LEFT JOIN release_group_alias ON release_group.id = release_group_alias.release_group_id AND release_group_alias.is_primary
WHERE c.id = :collectionId
AND ce.deleted = 0
AND (
  release_group.name LIKE :query OR
  release_group.disambiguation LIKE :query OR
  release_group.first_release_date LIKE :query OR
  release_group.primary_type LIKE :query OR
  release_group.secondary_types LIKE :query OR
  ac.name LIKE :query OR
  release_group_alias.name LIKE :query
);

getReleaseGroupsByCollection:
SELECT
  release_group.id,
  release_group.name,
  release_group.disambiguation,
  release_group.first_release_date,
  release_group.primary_type,
  release_group.secondary_types,
  ac.name AS artist_credits,
  images.thumbnail_url,
  images.id AS image_id,
  EXISTS (
    SELECT 1 FROM details_metadata WHERE details_metadata.entity_id = release_group.id
  ) AS visited,
  EXISTS (
    SELECT 1 FROM collection_entity WHERE collection_entity.entity_id = release_group.id
  ) AS collected,
  aliases.alias_names,
  aliases.alias_locales
FROM release_group
INNER JOIN collection_entity ON release_group.id = collection_entity.entity_id
INNER JOIN collection ON collection.id = collection_entity.id
INNER JOIN artist_credit_entity acr ON acr.entity_id = release_group.id
INNER JOIN artist_credit ac ON ac.id = acr.artist_credit_id
LEFT JOIN mbid_image images ON images.mbid = release_group.id
LEFT JOIN (
  SELECT
    release_group_alias.release_group_id,
    GROUP_CONCAT(release_group_alias.name, CHAR(9)) AS alias_names,
    GROUP_CONCAT(release_group_alias.locale, CHAR(9)) AS alias_locales
  FROM release_group_alias
  WHERE release_group_alias.is_primary AND release_group_alias.release_group_id IN (
    SELECT DISTINCT release_group.id
    FROM release_group
    INNER JOIN collection_entity ON release_group.id = collection_entity.entity_id
    WHERE collection_entity.id = :collectionId
  )
  GROUP BY release_group_alias.release_group_id
) AS aliases ON aliases.release_group_id = release_group.id
WHERE collection.id = :collectionId
AND collection_entity.deleted = 0
AND (
  release_group.name LIKE :query OR
  release_group.disambiguation LIKE :query OR
  release_group.first_release_date LIKE :query OR
  release_group.primary_type LIKE :query OR
  release_group.secondary_types LIKE :query OR
  artist_credits LIKE :query OR
  aliases.alias_names LIKE :query
)
GROUP BY release_group.id
ORDER BY
  CASE WHEN :sorted THEN release_group.primary_type ELSE collection_entity.rowid END,
  CASE WHEN :sorted THEN release_group.secondary_types END,
  CASE WHEN :sorted THEN release_group.first_release_date END
LIMIT :limit OFFSET :offset;

-- all release groups

getCountOfAllReleaseGroups:
SELECT IFNULL(
  (
    SELECT COUNT(DISTINCT release_group.id)
    FROM release_group release_group
    INNER JOIN artist_credit_entity acr ON acr.entity_id = release_group.id
    INNER JOIN artist_credit ac ON ac.id = acr.artist_credit_id
    LEFT JOIN release_group_alias ON release_group.id = release_group_alias.release_group_id AND release_group_alias.is_primary
    WHERE (
      release_group.name LIKE :query OR
      release_group.disambiguation LIKE :query OR
      release_group.first_release_date LIKE :query OR
      release_group.primary_type LIKE :query OR
      release_group.secondary_types LIKE :query OR
      ac.name LIKE :query OR
      release_group_alias.name LIKE :query
    )
  ),
  0
) AS count;

getAllReleaseGroups:
SELECT
  release_group_base.id,
  release_group_base.name,
  release_group_base.disambiguation,
  release_group_base.first_release_date,
  release_group_base.primary_type,
  release_group_base.secondary_types,
  release_group_base.artist_credits,
  release_group_base.thumbnail_url,
  release_group_base.image_id,
  release_group_base.visited,
  release_group_base.collected,
  release_group_base.alias_names,
  release_group_base.alias_locales
FROM release_group_base
WHERE (
  release_group_base.name LIKE :query OR
  release_group_base.disambiguation LIKE :query OR
  release_group_base.first_release_date LIKE :query OR
  release_group_base.primary_type LIKE :query OR
  release_group_base.secondary_types LIKE :query OR
  release_group_base.artist_credits LIKE :query OR
  release_group_base.alias_names LIKE :query
)
ORDER BY
  CASE WHEN :sorted THEN release_group_base.primary_type END,
  CASE WHEN :sorted THEN release_group_base.secondary_types END,
  CASE WHEN :sorted THEN release_group_base.first_release_date END
LIMIT :limit OFFSET :offset;
