import kotlin.String;
import kotlin.collections.List;

CREATE TABLE IF NOT EXISTS release_group (
  `id` TEXT PRIMARY KEY NOT NULL,
  `name` TEXT NOT NULL,
  `first_release_date` TEXT NOT NULL,
  `disambiguation` TEXT NOT NULL,
  `primary_type` TEXT,
  `primary_type_id` TEXT,
  `secondary_types` TEXT AS List<String>,
  `secondary_type_ids` TEXT AS List<String>
);

insertReleaseGroup:
INSERT OR IGNORE INTO release_group
VALUES ?;

getReleaseGroupForDetails:
SELECT
  rg.id,
  rg.name,
  rg.first_release_date,
  rg.disambiguation,
  rg.primary_type,
  rg.secondary_types,
  details_metadata.last_updated
FROM release_group rg
LEFT JOIN details_metadata ON details_metadata.entity_id = rg.id
WHERE rg.id = :releaseGroupId;

getReleaseGroupForRelease:
SELECT rg.*
FROM release_group rg
INNER JOIN release_release_group rrg ON rg.id = rrg.release_group_id
INNER JOIN release r ON rrg.release_id = r.id
WHERE r.id = :releaseId
LIMIT 1;

deleteReleaseGroup:
DELETE FROM release_group
WHERE id = :id;

-- release groups by entity

CREATE TABLE IF NOT EXISTS release_groups_by_entity (
  entity_id TEXT NOT NULL,
  release_group_id TEXT NOT NULL,

  PRIMARY KEY(entity_id, release_group_id)
);

insertOrIgnoreReleaseGroupByEntity:
INSERT OR IGNORE INTO release_groups_by_entity
VALUES ?;

deleteReleaseGroupLinksByEntity {
DELETE FROM release_groups_by_entity WHERE entity_id = :entityId;
}

getNumberOfReleaseGroupsByEntity:
SELECT IFNULL(
  (
    SELECT COUNT(DISTINCT release_group.id)
    FROM release_group
    INNER JOIN release_groups_by_entity arg ON release_group.id = arg.release_group_id
    INNER JOIN artist a ON a.id = arg.entity_id
    INNER JOIN artist_credit_entity acr ON acr.entity_id = release_group.id
    INNER JOIN artist_credit ac ON ac.id = acr.artist_credit_id
    LEFT JOIN alias ON release_group.id = alias.mbid
    WHERE a.id = :artistId
    AND (
      release_group.name LIKE :query OR
      release_group.disambiguation LIKE :query OR
      release_group.first_release_date LIKE :query OR
      release_group.primary_type LIKE :query OR
      release_group.secondary_types LIKE :query OR
      ac.name LIKE :query OR
      alias.name LIKE :query
    )
  ),
  0
) AS count;

getCountOfEachAlbumType:
SELECT rg.primary_type, rg.secondary_types, COUNT(rg.id) AS count
FROM release_group rg
INNER JOIN release_groups_by_entity arg ON rg.id = arg.release_group_id
INNER JOIN artist a ON a.id = arg.entity_id
WHERE a.id = :artistId
GROUP BY rg.primary_type, rg.secondary_types;

getCountOfEachAlbumTypeByCollection:
SELECT rg.primary_type, rg.secondary_types, COUNT(rg.id) AS count
FROM release_group rg
INNER JOIN collection_entity ON rg.id = collection_entity.entity_id
INNER JOIN collection ON collection.id = collection_entity.id
WHERE collection.id = :collectionId
GROUP BY rg.primary_type, rg.secondary_types;

getReleaseGroupsByEntity:
SELECT
  release_group.id,
  release_group.name,
  release_group.first_release_date,
  release_group.disambiguation,
  release_group.primary_type,
  release_group.secondary_types,
  ac.name AS artist_credits,
  mi.thumbnail_url,
  mi.id AS imageId,
  details_metadata.entity_id IS NOT NULL AS visited,
  EXISTS (
    SELECT 1 FROM collection_entity WHERE collection_entity.entity_id = release_group.id
  ) AS collected
FROM release_group
INNER JOIN release_groups_by_entity arg ON release_group.id = arg.release_group_id
INNER JOIN artist a ON a.id = arg.entity_id
INNER JOIN artist_credit_entity acr ON acr.entity_id = release_group.id
INNER JOIN artist_credit ac ON ac.id = acr.artist_credit_id
LEFT JOIN alias ON release_group.id = alias.mbid
LEFT JOIN mbid_image mi ON mi.mbid = release_group.id
LEFT JOIN details_metadata ON details_metadata.entity_id = release_group.id
WHERE a.id = :artistId
AND (
  release_group.name LIKE :query OR
  release_group.disambiguation LIKE :query OR
  release_group.first_release_date LIKE :query OR
  release_group.primary_type LIKE :query OR
  release_group.secondary_types LIKE :query OR
  ac.name LIKE :query OR
  alias.name LIKE :query
)
GROUP BY release_group.id
ORDER BY
  CASE WHEN :sorted THEN release_group.primary_type ELSE arg.rowid END,
  CASE WHEN :sorted THEN release_group.secondary_types END,
  CASE WHEN :sorted THEN release_group.first_release_date END
LIMIT :limit OFFSET :offset;

-- release groups by collection

getNumberOfReleaseGroupsByCollection:
SELECT IFNULL(
  (
    SELECT COUNT(DISTINCT release_group.id)
    FROM release_group
    INNER JOIN collection_entity ce ON release_group.id = ce.entity_id
    INNER JOIN collection c ON c.id = ce.id
    INNER JOIN artist_credit_entity acr ON acr.entity_id = release_group.id
    INNER JOIN artist_credit ac ON ac.id = acr.artist_credit_id
    LEFT JOIN alias ON release_group.id = alias.mbid
    WHERE c.id = :collectionId
    AND ce.deleted = 0
    AND (
      release_group.name LIKE :query OR
      release_group.disambiguation LIKE :query OR
      release_group.first_release_date LIKE :query OR
      release_group.primary_type LIKE :query OR
      release_group.secondary_types LIKE :query OR
      ac.name LIKE :query OR
      alias.name LIKE :query
    )
  ),
  0
) AS count;

getReleaseGroupsByCollection:
SELECT
  release_group.id,
  release_group.name,
  release_group.first_release_date,
  release_group.disambiguation,
  release_group.primary_type,
  release_group.secondary_types,
  ac.name AS artist_credits,
  mi.thumbnail_url,
  mi.id AS imageId,
  details_metadata.entity_id IS NOT NULL AS visited,
  ce.id IS NOT NULL AS collected
FROM release_group
INNER JOIN collection_entity ce ON release_group.id = ce.entity_id
INNER JOIN collection c ON c.id = ce.id
INNER JOIN artist_credit_entity acr ON acr.entity_id = release_group.id
INNER JOIN artist_credit ac ON ac.id = acr.artist_credit_id
LEFT JOIN alias ON release_group.id = alias.mbid
LEFT JOIN mbid_image mi ON mi.mbid = release_group.id
LEFT JOIN details_metadata ON details_metadata.entity_id = release_group.id
WHERE c.id = :collectionId
AND ce.deleted = 0
AND (
  release_group.name LIKE :query OR
  release_group.disambiguation LIKE :query OR
  release_group.first_release_date LIKE :query OR
  release_group.primary_type LIKE :query OR
  release_group.secondary_types LIKE :query OR
  ac.name LIKE :query OR
  alias.name LIKE :query
)
GROUP BY release_group.id
ORDER BY
  CASE WHEN :sorted THEN release_group.primary_type ELSE ce.rowid END,
  CASE WHEN :sorted THEN release_group.secondary_types END,
  CASE WHEN :sorted THEN release_group.first_release_date END
LIMIT :limit OFFSET :offset;

-- all release groups

getCountOfAllReleaseGroups:
SELECT IFNULL(
  (
    SELECT COUNT(DISTINCT release_group.id)
    FROM release_group release_group
    INNER JOIN artist_credit_entity acr ON acr.entity_id = release_group.id
    INNER JOIN artist_credit ac ON ac.id = acr.artist_credit_id
    LEFT JOIN alias ON release_group.id = alias.mbid
    WHERE (
      release_group.name LIKE :query OR
      release_group.disambiguation LIKE :query OR
      release_group.first_release_date LIKE :query OR
      release_group.primary_type LIKE :query OR
      release_group.secondary_types LIKE :query OR
      ac.name LIKE :query OR
      alias.name LIKE :query
    )
  ),
  0
) AS count;

getAllReleaseGroups:
SELECT
  release_group.id,
  release_group.name,
  release_group.first_release_date,
  release_group.disambiguation,
  release_group.primary_type,
  release_group.secondary_types,
  ac.name AS artist_credits,
  mi.thumbnail_url,
  mi.id AS imageId,
  details_metadata.entity_id IS NOT NULL AS visited,
  EXISTS (
      SELECT 1 FROM collection_entity WHERE collection_entity.entity_id = release_group.id
  ) AS collected
FROM release_group
INNER JOIN artist_credit_entity acr ON acr.entity_id = release_group.id
INNER JOIN artist_credit ac ON ac.id = acr.artist_credit_id
LEFT JOIN alias ON release_group.id = alias.mbid
LEFT JOIN mbid_image mi ON mi.mbid = release_group.id
LEFT JOIN details_metadata ON details_metadata.entity_id = release_group.id
WHERE (
  release_group.name LIKE :query OR
  release_group.disambiguation LIKE :query OR
  release_group.first_release_date LIKE :query OR
  release_group.primary_type LIKE :query OR
  release_group.secondary_types LIKE :query OR
  ac.name LIKE :query OR
  alias.name LIKE :query
)
GROUP BY release_group.id
ORDER BY
  CASE WHEN :sorted THEN release_group.primary_type ELSE release_group.rowid END,
  CASE WHEN :sorted THEN release_group.secondary_types END,
  CASE WHEN :sorted THEN release_group.first_release_date END
LIMIT :limit OFFSET :offset;
