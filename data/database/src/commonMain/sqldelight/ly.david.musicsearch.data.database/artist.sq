import kotlin.Boolean;
import kotlin.String;
import kotlin.collections.List;

CREATE TABLE IF NOT EXISTS artist (
  id TEXT PRIMARY KEY NOT NULL,
  name TEXT NOT NULL,
  sort_name TEXT NOT NULL,
  disambiguation TEXT,
  type TEXT,
  type_id TEXT,
  gender TEXT,
  ipis TEXT AS List<String>,
  isnis TEXT AS List<String>,
  country_code TEXT,
  begin TEXT,
  end TEXT,
  ended INTEGER AS Boolean,
  area_id TEXT
);

insertReplace:
INSERT OR REPLACE INTO artist
VALUES ?;

getArtistForDetails:
SELECT
  artist.id,
  artist.name,
  artist.sort_name,
  artist.disambiguation,
  artist.type,
  artist.gender,
  artist.ipis,
  artist.isnis,
  artist.begin,
  artist.end,
  artist.ended,
  area.id,
  area.name,
  cc.code,
  visited.entity_id IS NOT NULL AS visited
FROM artist
LEFT JOIN area ON artist.area_id = area.id
LEFT JOIN country_code cc ON area.id = cc.area_id
LEFT JOIN visited ON visited.entity_id = area.id
WHERE artist.id = :artistId
GROUP BY artist.id;

delete:
DELETE FROM artist
WHERE id = :artistId;

-- artists by entity

CREATE TABLE IF NOT EXISTS artists_by_entity (
  entity_id TEXT NOT NULL,
  artist_id TEXT NOT NULL,

  PRIMARY KEY (entity_id, artist_id)
);

insert:
INSERT OR IGNORE INTO artists_by_entity
VALUES ?;

deleteArtistsByEntity:
DELETE FROM artist WHERE id IN (
  SELECT a.id
  FROM artists_by_entity ae
  INNER JOIN artist a ON a.id = ae.artist_id
  WHERE ae.entity_id = :entityId
);

getNumberOfArtistsByEntity:
SELECT IFNULL(
  (
    SELECT COUNT(*)
    FROM artists_by_entity ae
    INNER JOIN artist a ON a.id = ae.artist_id
    WHERE ae.entity_id = :entityId
    AND (
      a.name LIKE :query OR
      a.disambiguation LIKE :query OR
      a.sort_name LIKE :query OR
      a.type LIKE :query OR
      a.gender LIKE :query OR
      a.country_code LIKE :query
    )
  ),
  0
) AS count;

getArtistsByEntity:
SELECT
  a.id,
  a.name,
  a.sort_name,
  a.disambiguation,
  a.type,
  a.gender,
  a.country_code,
  a.begin,
  a.end,
  a.ended,
  mi.thumbnail_url,
  mi.id AS placeholderKey,
  visited.entity_id IS NOT NULL AS visited
FROM artists_by_entity ae
INNER JOIN artist a ON a.id = ae.artist_id
LEFT JOIN mbid_image mi ON mi.mbid = a.id
LEFT JOIN visited ON visited.entity_id = a.id
WHERE ae.entity_id = :entityId
AND (
  a.name LIKE :query OR
  a.disambiguation LIKE :query OR
  a.sort_name LIKE :query OR
  a.type LIKE :query OR
  a.gender LIKE :query OR
  a.country_code LIKE :query
)
GROUP BY a.id
LIMIT :limit OFFSET :offset;

-- artists by collection

getNumberOfArtistsByCollection:
SELECT IFNULL(
  (
    SELECT COUNT(*)
    FROM artist a
    INNER JOIN collection_entity ce ON a.id = ce.entity_id
    INNER JOIN collection c ON c.id = ce.id
    WHERE c.id = :collectionId
    AND (
      a.name LIKE :query OR
      a.disambiguation LIKE :query OR
      a.sort_name LIKE :query OR
      a.type LIKE :query OR
      a.gender LIKE :query OR
      a.country_code LIKE :query
    )
  ),
  0
) AS count;

getArtistsByCollection:
SELECT
  a.id,
  a.name,
  a.sort_name,
  a.disambiguation,
  a.type,
  a.gender,
  a.country_code,
  a.begin,
  a.end,
  a.ended,
  mi.thumbnail_url,
  mi.id AS placeholderKey,
  visited.entity_id IS NOT NULL AS visited
FROM artist a
INNER JOIN collection_entity ce ON a.id = ce.entity_id
INNER JOIN collection c ON c.id = ce.id
LEFT JOIN mbid_image mi ON mi.mbid = a.id
LEFT JOIN visited ON visited.entity_id = a.id
WHERE c.id = :collectionId
AND (
  a.name LIKE :query OR
  a.disambiguation LIKE :query OR
  a.sort_name LIKE :query OR
  a.type LIKE :query OR
  a.gender LIKE :query OR
  a.country_code LIKE :query
)
GROUP BY a.id
ORDER BY a.begin, a.end, a.name
LIMIT :limit OFFSET :offset;

-- all artists

getCountOfAllArtists:
SELECT IFNULL(
  (
    SELECT COUNT(*)
    FROM artist a
    WHERE (
      a.name LIKE :query OR
      a.disambiguation LIKE :query OR
      a.sort_name LIKE :query OR
      a.type LIKE :query OR
      a.gender LIKE :query OR
      a.country_code LIKE :query
    )
  ),
  0
) AS count;

getAllArtists:
SELECT
  a.id,
  a.name,
  a.sort_name,
  a.disambiguation,
  a.type,
  a.gender,
  a.country_code,
  a.begin,
  a.end,
  a.ended,
  mi.thumbnail_url,
  mi.id AS placeholderKey,
  visited.entity_id IS NOT NULL AS visited
FROM artist a
LEFT JOIN mbid_image mi ON mi.mbid = a.id
LEFT JOIN visited ON visited.entity_id = a.id
WHERE (
  a.name LIKE :query OR
  a.disambiguation LIKE :query OR
  a.sort_name LIKE :query OR
  a.type LIKE :query OR
  a.gender LIKE :query OR
  a.country_code LIKE :query
)
GROUP BY a.id
ORDER BY a.begin, a.end, a.name
LIMIT :limit OFFSET :offset;
