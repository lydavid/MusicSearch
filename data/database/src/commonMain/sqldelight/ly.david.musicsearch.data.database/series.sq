CREATE TABLE IF NOT EXISTS series (
  `id` TEXT PRIMARY KEY NOT NULL,
  `name` TEXT NOT NULL,
  `disambiguation` TEXT,
  `type` TEXT,
  `type_id` TEXT
);

insert:
INSERT OR IGNORE INTO series
VALUES ?;

getSeriesForDetails:
SELECT
  id,
  name,
  disambiguation,
  type,
  details_metadata.last_updated
FROM series
LEFT JOIN details_metadata ON details_metadata.entity_id = id
WHERE id = :seriesId;

delete:
DELETE FROM series
WHERE id = :id;

-- series by collection

getNumberOfSeriesByCollection:
SELECT IFNULL(
  (
    SELECT COUNT(DISTINCT series.id)
    FROM series
    INNER JOIN collection_entity ce ON series.id = ce.entity_id
    INNER JOIN collection c ON c.id = ce.id
    LEFT JOIN alias ON series.id = alias.mbid
    WHERE c.id = :collectionId
    AND ce.deleted = 0
    AND (
      series.name LIKE :query OR
      series.disambiguation LIKE :query OR
      series.type LIKE :query OR
      alias.name LIKE :query
    )
  ),
  0
) AS count;

getSeriesByCollection:
SELECT
  series.id,
  series.name,
  series.disambiguation,
  series.type,
  details_metadata.entity_id IS NOT NULL AS visited,
  ce.id IS NOT NULL AS collected
FROM series
INNER JOIN collection_entity ce ON series.id = ce.entity_id
INNER JOIN collection c ON c.id = ce.id
LEFT JOIN alias ON series.id = alias.mbid
LEFT JOIN details_metadata ON details_metadata.entity_id = series.id
WHERE c.id = :collectionId
AND ce.deleted = 0
AND (
  series.name LIKE :query OR
  series.disambiguation LIKE :query OR
  series.type LIKE :query OR
  alias.name LIKE :query
)
GROUP BY series.id
LIMIT :limit OFFSET :offset;

-- all series

getCountOfAllSeries:
SELECT IFNULL(
  (
    SELECT COUNT(DISTINCT series.id)
    FROM series
    LEFT JOIN alias ON series.id = alias.mbid
    WHERE (
      series.name LIKE :query OR
      series.disambiguation LIKE :query OR
      series.type LIKE :query OR
      alias.name LIKE :query
    )
  ),
  0
) AS count;

getAllSeries:
SELECT
  series.id,
  series.name,
  series.disambiguation,
  series.type,
  details_metadata.entity_id IS NOT NULL AS visited,
  EXISTS (
    SELECT 1 FROM collection_entity WHERE collection_entity.entity_id = series.id
  ) AS collected
FROM series
LEFT JOIN alias ON series.id = alias.mbid
LEFT JOIN details_metadata ON details_metadata.entity_id = series.id
WHERE (
  series.name LIKE :query OR
  series.disambiguation LIKE :query OR
  series.type LIKE :query OR
  alias.name LIKE :query
)
GROUP BY series.id
LIMIT :limit OFFSET :offset;
