CREATE TABLE series (
  id TEXT PRIMARY KEY NOT NULL,
  name TEXT NOT NULL,
  disambiguation TEXT NOT NULL,
  type TEXT NOT NULL,
  type_id TEXT NOT NULL
);

upsert {
UPDATE series
SET
  name = :name,
  disambiguation = :disambiguation,
  type = :type,
  type_id = :type_id
WHERE id = :id;

INSERT OR IGNORE INTO series
VALUES (
  :id,
  :name,
  :disambiguation,
  :type,
  :type_id
);
}

getSeriesForDetails:
SELECT
  id,
  name,
  disambiguation,
  type,
  details_metadata.last_updated
FROM series
LEFT JOIN details_metadata ON details_metadata.entity_id = id
WHERE id = :seriesId;

delete:
DELETE FROM series
WHERE id = :id;

-- series by collection

getNumberOfSeriesByCollection:
SELECT IFNULL(
  (
    SELECT COUNT(DISTINCT series.id)
    FROM series
    INNER JOIN collection_entity ce ON series.id = ce.entity_id
    INNER JOIN collection c ON c.id = ce.id
    LEFT JOIN series_alias ON series.id = series_alias.series_id AND series_alias.is_primary
    WHERE c.id = :collectionId
    AND ce.deleted = 0
    AND (
      series.name LIKE :query OR
      series.disambiguation LIKE :query OR
      series.type LIKE :query OR
      series_alias.name LIKE :query
    )
  ),
  0
) AS count;

getSeriesByCollection:
SELECT
  series.id,
  series.name,
  series.disambiguation,
  series.type,
  details_metadata.entity_id IS NOT NULL AS visited,
  ce.id IS NOT NULL AS collected,
  GROUP_CONCAT(series_alias.name, CHAR(9)) AS alias_names,
  GROUP_CONCAT(series_alias.locale, CHAR(9)) AS alias_locales
FROM series
INNER JOIN collection_entity ce ON series.id = ce.entity_id
INNER JOIN collection c ON c.id = ce.id
LEFT JOIN series_alias ON series.id = series_alias.series_id AND series_alias.is_primary
LEFT JOIN details_metadata ON details_metadata.entity_id = series.id
WHERE c.id = :collectionId
AND ce.deleted = 0
AND (
  series.name LIKE :query OR
  series.disambiguation LIKE :query OR
  series.type LIKE :query OR
  series_alias.name LIKE :query
)
GROUP BY series.id
LIMIT :limit OFFSET :offset;

-- all series

getCountOfAllSeries:
SELECT IFNULL(
  (
    SELECT COUNT(DISTINCT series.id)
    FROM series
    LEFT JOIN series_alias ON series.id = series_alias.series_id AND series_alias.is_primary
    WHERE (
      series.name LIKE :query OR
      series.disambiguation LIKE :query OR
      series.type LIKE :query OR
      series_alias.name LIKE :query
    )
  ),
  0
) AS count;

getAllSeries:
SELECT
  series.id,
  series.name,
  series.disambiguation,
  series.type,
  details_metadata.entity_id IS NOT NULL AS visited,
  EXISTS (
    SELECT 1 FROM collection_entity WHERE collection_entity.entity_id = series.id
  ) AS collected,
  GROUP_CONCAT(series_alias.name, CHAR(9)) AS alias_names,
  GROUP_CONCAT(series_alias.locale, CHAR(9)) AS alias_locales
FROM series
LEFT JOIN series_alias ON series.id = series_alias.series_id AND series_alias.is_primary
LEFT JOIN details_metadata ON details_metadata.entity_id = series.id
WHERE (
  series.name LIKE :query OR
  series.disambiguation LIKE :query OR
  series.type LIKE :query OR
  series_alias.name LIKE :query
)
GROUP BY series.id
LIMIT :limit OFFSET :offset;
