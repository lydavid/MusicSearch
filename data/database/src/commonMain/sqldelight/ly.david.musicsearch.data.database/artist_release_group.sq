CREATE TABLE artist_release_group (
  `artist_id` TEXT NOT NULL,
  `release_group_id` TEXT NOT NULL,

  PRIMARY KEY(`artist_id`, `release_group_id`)
);

insert:
INSERT OR IGNORE INTO artist_release_group
VALUES ?;


deleteReleaseGroupsByArtist:
DELETE FROM release_group WHERE id IN (
  SELECT rg.id
  FROM release_group rg
  INNER JOIN artist_release_group arg ON rg.id = arg.release_group_id
  INNER JOIN artist a ON a.id = arg.artist_id
  WHERE a.id = :artistId
);

getNumberOfReleaseGroupsByArtist:
SELECT IFNULL(
  (
    SELECT COUNT(*)
    FROM release_group rg
    INNER JOIN artist_release_group arg ON rg.id = arg.release_group_id
    INNER JOIN artist a ON a.id = arg.artist_id
    INNER JOIN artist_credit_entity acr ON acr.entity_id = rg.id
    INNER JOIN artist_credit ac ON ac.id = acr.artist_credit_id
    WHERE a.id = :artistId
    AND (
      rg.name LIKE :query
      OR rg.disambiguation LIKE :query
      OR rg.first_release_date LIKE :query
      OR rg.primary_type LIKE :query OR rg.secondary_types LIKE :query
      OR ac.name LIKE :query
    )
  ),
  0
) AS count;

getReleaseGroupsByArtist:
SELECT rg.*, ac.name AS artist_credits, mi.thumbnail_url
FROM release_group rg
INNER JOIN artist_release_group arg ON rg.id = arg.release_group_id
INNER JOIN artist a ON a.id = arg.artist_id
INNER JOIN artist_credit_entity acr ON acr.entity_id = rg.id
INNER JOIN artist_credit ac ON ac.id = acr.artist_credit_id
LEFT JOIN mbid_image mi ON mi.mbid = rg.id
WHERE a.id = :artistId
AND (
  rg.name LIKE :query
  OR rg.disambiguation LIKE :query
  OR rg.first_release_date LIKE :query
  OR rg.primary_type LIKE :query OR rg.secondary_types LIKE :query
  OR ac.name LIKE :query
)
ORDER BY
  CASE WHEN :sorted THEN rg.primary_type ELSE arg.rowid END,
  CASE WHEN :sorted THEN rg.secondary_types END,
  CASE WHEN :sorted THEN rg.first_release_date END
LIMIT :limit OFFSET :offset;
