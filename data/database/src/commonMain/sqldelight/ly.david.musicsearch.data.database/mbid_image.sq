import kotlin.String;
import kotlinx.collections.immutable.ImmutableList;

-- If an entity with mbid has no image urls, we will add one entry
-- with empty values, to mark that we've tried fetching its image urls.
CREATE TABLE IF NOT EXISTS mbid_image (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT,
  `mbid` TEXT NOT NULL,
  `thumbnail_url` TEXT NOT NULL,
  `large_url` TEXT NOT NULL,
  `types` TEXT AS ImmutableList<String>,
  `comment` TEXT
);

CREATE INDEX IF NOT EXISTS idx_mbid_image_mbid ON mbid_image(`mbid`);

insert:
INSERT OR IGNORE INTO mbid_image (
  `mbid`,
  `thumbnail_url`,
  `large_url`,
  `types`,
  `comment`
)
VALUES (
  :mbid,
  :thumbnailUrl,
  :largeUrl,
  :types,
  :comment
);

getFrontCoverUrl:
SELECT *
FROM mbid_image
WHERE mbid = :mbid
LIMIT 1;

-- TODO: if types or comment is null, this will not show them at all
getAllUrlsById:
SELECT *
FROM mbid_image
WHERE mbid = :mbid
AND (
  types LIKE :query
  OR comment LIKE :query
);

getAllUrls:
SELECT
  mbid_image.*,
  coalesce(artist.name, `release`.name, release_group.name) AS name,
  CASE
    WHEN artist.name IS NOT NULL THEN 'artist'
    WHEN `release`.name IS NOT NULL THEN 'release'
    WHEN release_group.name IS NOT NULL THEN 'release_group'
  END AS entity
FROM mbid_image
LEFT JOIN artist ON artist.id = mbid_image.mbid
LEFT JOIN `release` ON `release`.id = mbid_image.mbid
LEFT JOIN release_group ON release_group.id = mbid_image.mbid
WHERE thumbnail_url != ''
AND (artist.name LIKE '%%'
OR `release`.name LIKE '%%'
OR release_group.name LIKE '%%');

deleteAllUrlsById:
DELETE FROM mbid_image
WHERE mbid = :mbid;

-- Do not include the filler empty url
getNumberOfImagesById:
SELECT COUNT(*)
FROM mbid_image
WHERE mbid = :mbid
AND (
  thumbnail_url != ''
  OR large_url != ''
);
