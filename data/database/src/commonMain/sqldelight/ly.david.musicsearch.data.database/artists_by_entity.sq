CREATE TABLE IF NOT EXISTS artists_by_entity (
  entity_id TEXT NOT NULL,
  artist_id TEXT NOT NULL,

  PRIMARY KEY (entity_id, artist_id)
);

insert:
INSERT OR IGNORE INTO artists_by_entity
VALUES ?;

deleteArtistsByEntity:
DELETE FROM artist WHERE id IN (
  SELECT a.id
  FROM artists_by_entity ae
  INNER JOIN artist a ON a.id = ae.artist_id
  WHERE ae.entity_id = :entityId
);

getNumberOfArtistsByEntity:
SELECT IFNULL(
  (
    SELECT COUNT(*)
    FROM artists_by_entity ae
    INNER JOIN artist a ON a.id = ae.artist_id
    WHERE ae.entity_id = :entityId
    AND (
      a.name LIKE :query OR
      a.disambiguation LIKE :query OR
      a.sort_name LIKE :query OR
      a.type LIKE :query OR
      a.gender LIKE :query OR
      a.country_code LIKE :query
    )
  ),
  0
) AS count;

getArtistsByEntity:
SELECT
  a.id,
  a.name,
  a.sort_name,
  a.disambiguation,
  a.type,
  a.gender,
  a.country_code,
  a.begin,
  a.end,
  a.ended,
  mi.thumbnail_url,
  mi.id AS placeholderKey,
  visited.entity_id IS NOT NULL AS visited
FROM artists_by_entity ae
INNER JOIN artist a ON a.id = ae.artist_id
LEFT JOIN mbid_image mi ON mi.mbid = a.id
LEFT JOIN visited ON visited.entity_id = a.id
WHERE ae.entity_id = :entityId
AND (
  a.name LIKE :query OR
  a.disambiguation LIKE :query OR
  a.sort_name LIKE :query OR
  a.type LIKE :query OR
  a.gender LIKE :query OR
  a.country_code LIKE :query
)
GROUP BY a.id
LIMIT :limit OFFSET :offset;
