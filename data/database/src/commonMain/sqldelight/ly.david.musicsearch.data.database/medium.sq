import kotlin.Int;

CREATE TABLE IF NOT EXISTS medium (
  `id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
  `release_id` TEXT NOT NULL,
  `position` INTEGER AS Int,
  `name` TEXT,
  `track_count` INTEGER AS Int NOT NULL,
  `format` TEXT,
  `format_id` TEXT

--   FOREIGN KEY(`release_id`) REFERENCES `release`(`id`)
--   ON UPDATE CASCADE
--   ON DELETE CASCADE
);

insert:
INSERT OR IGNORE INTO medium (
  `id`,
  `release_id`,
  `position`,
  `name`,
  `track_count`,
  `format`,
  `format_id`
)
VALUES (
  nullif(:id, 0),
  :releaseId,
  :position,
  :name,
  :trackCount,
  :format,
  :formatId
);

lastInsertRowId:
SELECT last_insert_rowid();

deleteMediaByRelease {
DELETE FROM artist_credit_entity
WHERE entity_id IN
  (
    SELECT t.id
    FROM track t
    INNER JOIN medium m ON t.medium_id = m.id
    INNER JOIN `release` r ON m.release_id = r.id
    WHERE r.id = :releaseId
  );

DELETE FROM medium
WHERE release_id = :releaseId;
}

getMediumForTrack:
SELECT m.*
FROM medium m
INNER JOIN track t ON t.medium_id = m.id
WHERE t.id = :trackId;

getMediaCountForRelease:
SELECT m.*
FROM medium m
INNER JOIN track t ON t.medium_id = m.id
WHERE t.id = :trackId;
