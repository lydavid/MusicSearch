import kotlin.Int;
import ly.david.musicsearch.data.core.network.MusicBrainzEntity;

CREATE TABLE IF NOT EXISTS relation (
  `entity_id` TEXT NOT NULL,
  `linked_entity_id` TEXT NOT NULL,
  `linked_entity` TEXT AS MusicBrainzEntity NOT NULL,
  `order` INTEGER AS Int NOT NULL,
  `label` TEXT NOT NULL,
  `name` TEXT NOT NULL,
  `disambiguation` TEXT,
  `attributes` TEXT,
  `additional_info` TEXT,

  PRIMARY KEY (entity_id, linked_entity_id, `order`)
);

insert:
INSERT OR IGNORE INTO relation (
  `entity_id`,
  `linked_entity_id`,
  `linked_entity`,
  `order`,
  `label`,
  `name`,
  `disambiguation`,
  `attributes`,
  `additional_info`
)
VALUES (
  :`entity_id`,
  :`linked_entity_id`,
  :`linked_entity`,
  :`order`,
  :`label`,
  :`name`,
  :`disambiguation`,
  :`attributes`,
  :`additional_info`
);

insertEntity:
INSERT OR IGNORE INTO relation
VALUES ?;

countEntityRelationshipsExcludingUrls:
SELECT count(*) FROM relation
WHERE entity_id = :entityId AND linked_entity != "url" AND
(name LIKE :query OR disambiguation LIKE :query OR label LIKE :query OR
attributes LIKE :query OR additional_info LIKE :query);

getEntityRelationshipsExcludingUrls:
SELECT * FROM relation
WHERE entity_id = :entityId AND linked_entity != "url" AND
(name LIKE :query OR disambiguation LIKE :query OR label LIKE :query OR
attributes LIKE :query OR additional_info LIKE :query)
ORDER BY linked_entity, label, `order`
LIMIT :limit OFFSET :offset;

getEntityUrlRelationships:
SELECT * FROM relation
WHERE entity_id = :entityId AND linked_entity = "url" AND
(name LIKE :query OR disambiguation LIKE :query OR label LIKE :query OR
attributes LIKE :query OR additional_info LIKE :query)
ORDER BY linked_entity, label, `order`;

deleteRelationshipsExcludingUrlsByEntity:
DELETE FROM relation
WHERE entity_id = :entityId AND linked_entity != "url";

countOfEachRelationshipType:
SELECT linked_entity, count(entity_id) AS entity_count
FROM relation
WHERE entity_id = :entityId
GROUP BY linked_entity;
