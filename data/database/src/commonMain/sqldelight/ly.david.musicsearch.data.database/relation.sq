import kotlin.Int;
import kotlin.Boolean;
import ly.david.musicsearch.shared.domain.network.MusicBrainzEntity;

-- ended must be true if end is not null: https://github.com/metabrainz/musicbrainz-server/blob/master/admin/sql/CreateTables.sql#L2669
CREATE TABLE IF NOT EXISTS relation (
  entity_id TEXT NOT NULL,
  linked_entity_id TEXT NOT NULL,
  linked_entity TEXT AS MusicBrainzEntity NOT NULL,
  `order` INTEGER AS Int NOT NULL,
  label TEXT NOT NULL,
  name TEXT NOT NULL,
  disambiguation TEXT,
  attributes TEXT,
  is_forward_direction INTEGER AS Boolean,
  begin TEXT,
  end TEXT,
  ended INTEGER AS Boolean,

  -- an entity can be linked to another entity multiple times, possibly with the same label
  PRIMARY KEY (entity_id, linked_entity_id, `order`)
);

CREATE INDEX IF NOT EXISTS idx_relation_linked_entity_id ON relation(linked_entity_id);

insert:
INSERT OR IGNORE INTO relation (
  `entity_id`,
  `linked_entity_id`,
  `linked_entity`,
  `order`,
  `label`,
  `name`,
  `disambiguation`,
  `attributes`,
  `is_forward_direction`,
  `begin`,
  `end`,
  `ended`
)
VALUES (
  :`entity_id`,
  :`linked_entity_id`,
  :`linked_entity`,
  :`order`,
  :`label`,
  :`name`,
  :`disambiguation`,
  :`attributes`,
  :`is_forward_direction`,
  :`begin`,
  :`end`,
  :`ended`
);

insertEntity:
INSERT OR IGNORE INTO relation
VALUES ?;

countEntityRelationships:
SELECT COUNT(DISTINCT linked_entity_id)
FROM relation
LEFT JOIN all_primary_alias ON all_primary_alias.mbid = linked_entity_id
WHERE entity_id = :entityId
AND linked_entity IN :relatedEntities
AND (
  relation.name LIKE :query OR
  disambiguation LIKE :query OR
  label LIKE :query OR
  attributes LIKE :query OR
  all_primary_alias.name LIKE :query
);

getEntityRelationships:
SELECT
  `linked_entity_id`,
  `linked_entity`,
  `order`,
  GROUP_CONCAT(`label`, ', '),
  relation.`name`,
  `disambiguation`,
  `attributes`,
  details_metadata.entity_id IS NOT NULL AS visited,
  `is_forward_direction`,
  `begin`,
  `end`,
  `ended`,
  mi.thumbnail_url,
  mi.id AS imageId,
  GROUP_CONCAT(all_primary_alias.name, CHAR(9)) AS alias_names,
  GROUP_CONCAT(all_primary_alias.locale, CHAR(9)) AS alias_locales,
  relations_metadata.last_updated
FROM relation
LEFT JOIN details_metadata ON details_metadata.entity_id = linked_entity_id
LEFT JOIN mbid_image mi ON mi.mbid = linked_entity_id
LEFT JOIN relations_metadata ON relations_metadata.entity_id = relation.entity_id
LEFT JOIN all_primary_alias ON all_primary_alias.mbid = linked_entity_id
WHERE relation.entity_id = :entityId
AND linked_entity IN :relatedEntities
AND (
  relation.name LIKE :query OR
  disambiguation LIKE :query OR
  label LIKE :query OR
  attributes LIKE :query OR
  all_primary_alias.name LIKE :query
)
GROUP BY linked_entity_id
ORDER BY linked_entity, label, `order`
LIMIT :limit OFFSET :offset;

deleteRelationships:
DELETE FROM relation
WHERE entity_id = :entityId
AND linked_entity IN :relatedEntities;

getRelationshipsByType:
SELECT
  `linked_entity_id`,
  `linked_entity`,
  `order`,
  `label`,
  relation.name,
  `disambiguation`,
  `attributes`,
  details_metadata.entity_id IS NOT NULL AS visited,
  `is_forward_direction`,
  `begin`,
  `end`,
  `ended`,
  mi.thumbnail_url,
  mi.id AS imageId
FROM relation
LEFT JOIN details_metadata ON details_metadata.entity_id = linked_entity_id
LEFT JOIN mbid_image mi ON mi.mbid = linked_entity_id
WHERE relation.entity_id = :entityId
AND linked_entity = :entityType
AND (
  relation.name LIKE :query OR
  disambiguation LIKE :query OR
  label LIKE :query OR
  attributes LIKE :query
)
ORDER BY linked_entity, label, `order`;

deleteRelationshipsByType:
DELETE FROM relation
WHERE entity_id = :entityId AND linked_entity = :entityType;

-- This counts the total number of relationships
-- which will not match up if we had grouped any with the same linked_entity_id
countOfEachRelationshipType:
SELECT linked_entity, count(entity_id) AS entity_count
FROM relation
WHERE entity_id = :entityId
GROUP BY linked_entity;
