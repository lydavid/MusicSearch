import kotlin.Int;
import kotlin.Boolean;
import ly.david.musicsearch.shared.domain.network.MusicBrainzEntity;

CREATE TABLE IF NOT EXISTS relation (
  `entity_id` TEXT NOT NULL,
  `linked_entity_id` TEXT NOT NULL,
  `linked_entity` TEXT AS MusicBrainzEntity NOT NULL,
  `order` INTEGER AS Int NOT NULL,
  `label` TEXT NOT NULL,
  `name` TEXT NOT NULL,
  `disambiguation` TEXT,
  `attributes` TEXT,
  `additional_info` TEXT,
  `is_forward_direction` INTEGER AS Boolean,
  `begin` TEXT,
  `end` TEXT,
  `ended` INTEGER AS Boolean,

  -- an entity can be linked to another entity multiple times, possibly with the same label
  PRIMARY KEY (entity_id, linked_entity_id, `order`)
);

insert:
INSERT OR IGNORE INTO relation (
  `entity_id`,
  `linked_entity_id`,
  `linked_entity`,
  `order`,
  `label`,
  `name`,
  `disambiguation`,
  `attributes`,
  `additional_info`,
  `is_forward_direction`,
  `begin`,
  `end`,
  `ended`
)
VALUES (
  :`entity_id`,
  :`linked_entity_id`,
  :`linked_entity`,
  :`order`,
  :`label`,
  :`name`,
  :`disambiguation`,
  :`attributes`,
  :`additional_info`,
  :`is_forward_direction`,
  :`begin`,
  :`end`,
  :`ended`
);

insertEntity:
INSERT OR IGNORE INTO relation
VALUES ?;

countEntityRelationshipsExcludingUrls:
SELECT count(*)
FROM relation
WHERE entity_id = :entityId
AND linked_entity != "url"
AND (
  name LIKE :query
  OR disambiguation LIKE :query
  OR label LIKE :query
  OR attributes LIKE :query
  OR additional_info LIKE :query
);

getEntityRelationships:
SELECT
  `linked_entity_id`,
  `linked_entity`,
  `order`,
  `label`,
  `name`,
  `disambiguation`,
  `attributes`,
  `additional_info`,
  visited.entity_id IS NOT NULL AS visited,
  `is_forward_direction`,
  `begin`,
  `end`,
  `ended`,
  mi.thumbnail_url
FROM relation
LEFT JOIN visited ON visited.entity_id = linked_entity_id
LEFT JOIN mbid_image mi ON mi.mbid = linked_entity_id
WHERE relation.entity_id = :entityId
AND linked_entity IN :relatedEntities
AND (
  name LIKE :query
  OR disambiguation LIKE :query
  OR label LIKE :query
  OR attributes LIKE :query
  OR additional_info LIKE :query
)
ORDER BY linked_entity, label, `order`
LIMIT :limit OFFSET :offset;

deleteRelationships:
DELETE FROM relation
WHERE entity_id = :entityId
AND linked_entity IN :relatedEntities;

getRelationshipsByType:
SELECT
  `linked_entity_id`,
  `linked_entity`,
  `order`,
  `label`,
  `name`,
  `disambiguation`,
  `attributes`,
  `additional_info`,
  visited.entity_id IS NOT NULL AS visited,
  `is_forward_direction`,
  `begin`,
  `end`,
  `ended`,
  mi.thumbnail_url
FROM relation
LEFT JOIN visited ON visited.entity_id = linked_entity_id
LEFT JOIN mbid_image mi ON mi.mbid = linked_entity_id
WHERE relation.entity_id = :entityId
AND linked_entity = :entityType
AND (
  name LIKE :query
  OR disambiguation LIKE :query
  OR label LIKE :query
  OR attributes LIKE :query
  OR additional_info LIKE :query
)
ORDER BY linked_entity, label, `order`;

deleteRelationshipsByType:
DELETE FROM relation
WHERE entity_id = :entityId AND linked_entity = :entityType;

countOfEachRelationshipType:
SELECT linked_entity, count(entity_id) AS entity_count
FROM relation
WHERE entity_id = :entityId
GROUP BY linked_entity;
