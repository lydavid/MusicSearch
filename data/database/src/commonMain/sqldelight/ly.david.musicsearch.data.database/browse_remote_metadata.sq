import kotlin.Int;
import kotlin.time.Instant;
import ly.david.musicsearch.shared.domain.network.MusicBrainzEntityType;

-- Tracks how many [browse_entity] there are in MusicBrainz with [remote_count]
-- that are linked to the entity with [entity_id].
--
-- entity_id: The entity's id we're tracking the progress of browsing a paginated browse_entity.
--  eg. An Area we want to browse all of its Releases.
-- browse_entity: The entity we're browsing.
--  eg. Releases in an Area.
-- remote_count: How many browse_entity exists in MusicBrainz's database.
CREATE TABLE IF NOT EXISTS browse_remote_metadata (
  entity_id TEXT NOT NULL,
  browse_entity TEXT AS MusicBrainzEntityType NOT NULL,
  remote_count INTEGER AS Int NOT NULL,
  last_updated INTEGER AS Instant NOT NULL,

  PRIMARY KEY (entity_id, browse_entity)
);

upsert {
  UPDATE browse_remote_metadata
  SET
    remote_count = :remoteCount,
    last_updated = :lastUpdated
  WHERE entity_id = :entityId AND browse_entity = :browseEntity;

  INSERT OR IGNORE INTO browse_remote_metadata
  VALUES (
    :entityId,
    :browseEntity,
    :remoteCount,
    :lastUpdated
  );
}

getBrowseRemoteMetadata:
SELECT
  remote_count,
  last_updated
FROM browse_remote_metadata
WHERE entity_id = :entityId AND browse_entity = :browseEntity;

deleteBrowseRemoteCountByEntity:
DELETE FROM browse_remote_metadata
WHERE entity_id = :entityId AND browse_entity = :browseEntity;

deleteAllBrowseRemoteCountByRemoteCollections:
DELETE FROM browse_remote_metadata
WHERE entity_id IN (
  SELECT id FROM collection WHERE is_remote
);
