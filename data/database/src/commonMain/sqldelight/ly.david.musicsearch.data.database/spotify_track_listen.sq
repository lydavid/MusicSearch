import kotlin.Boolean;
import kotlinx.datetime.Instant;

CREATE TABLE IF NOT EXISTS spotify_track_listen (
  `track_id` TEXT NOT NULL,
  `listened` INTEGER AS Instant NOT NULL,
  `deleted` INTEGER AS Boolean NOT NULL,

  PRIMARY KEY(`track_id`, `listened`),

  FOREIGN KEY(`track_id`) REFERENCES `spotify_track`(`track_id`)
  ON UPDATE CASCADE
  ON DELETE CASCADE
);

insert:
INSERT OR IGNORE INTO spotify_track_listen
VALUES ?;

getAllSpotifyHistoryCount:
SELECT COUNT(*)
FROM spotify_track st
LEFT JOIN spotify_track_listen stl ON st.track_id = stl.track_id
WHERE
  stl.deleted = 0
  AND (
    `artist_name` LIKE :query
    OR `album_name` LIKE :query
    OR `track_name` LIKE :query
  );

getAllSpotifyHistory:
SELECT st.*, stl.listened
FROM spotify_track st
LEFT JOIN spotify_track_listen stl ON st.track_id = stl.track_id
WHERE
  stl.deleted = 0
  AND (
    `artist_name` LIKE :query
    OR `album_name` LIKE :query
    OR `track_name` LIKE :query
  )
ORDER BY stl.listened DESC
LIMIT :limit OFFSET :offset;

markAsDeleted:
UPDATE spotify_track_listen
SET `deleted` = :deleted
WHERE `track_id` = :trackId AND `listened` = :listened;

delete:
DELETE FROM spotify_track_listen
WHERE `track_id` = :trackId AND `listened` = :listened;
