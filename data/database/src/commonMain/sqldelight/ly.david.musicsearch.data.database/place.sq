import kotlin.Boolean;

CREATE TABLE IF NOT EXISTS place (
  id TEXT PRIMARY KEY NOT NULL,
  name TEXT NOT NULL,
  disambiguation TEXT,
  address TEXT NOT NULL,
  type TEXT,
  type_id TEXT,
  longitude REAL,
  latitude REAL,
  begin TEXT,
  end TEXT,
  ended INTEGER AS Boolean
);

insertPlace:
INSERT OR IGNORE INTO place
VALUES ?;

getPlaceForDetails:
SELECT
  id,
  name,
  disambiguation,
  address,
  type,
  longitude,
  latitude,
  begin,
  end,
  ended
FROM place WHERE id = ?;

deletePlace:
DELETE FROM place
WHERE id = :id;

-- places by area

-- Reuse this if we need a places_by_entity
CREATE TABLE IF NOT EXISTS area_place (
  area_id TEXT NOT NULL,
  place_id TEXT NOT NULL,

  PRIMARY KEY (area_id, place_id)
);

insertOrIgnoreAreaPlace:
INSERT OR IGNORE INTO area_place
VALUES ?;

deletePlacesByArea {
DELETE FROM area_place WHERE area_id = :areaId;
}

getNumberOfPlacesByArea:
SELECT IFNULL(
  (
    SELECT COUNT(*)
    FROM place p
    INNER JOIN area_place ap ON p.id = ap.place_id
    WHERE ap.area_id = :areaId
    AND (p.name LIKE :query OR p.disambiguation LIKE :query OR p.type LIKE :query)
  ),
  0
) AS count;

getPlacesByArea:
SELECT
  p.id,
  p.name,
  p.disambiguation,
  p.address,
  p.type,
  p.longitude,
  p.latitude,
  p.`begin`,
  p.`end`,
  p.`ended`,
  details_metadata.entity_id IS NOT NULL AS visited
FROM place p
INNER JOIN area_place ap ON p.id = ap.place_id
LEFT JOIN details_metadata ON details_metadata.entity_id = p.id
WHERE ap.area_id = :areaId
AND (p.name LIKE :query OR p.disambiguation LIKE :query OR p.type LIKE :query)
ORDER BY p.name, p.address
LIMIT :limit OFFSET :offset;

-- places by collection

getNumberOfPlacesByCollection:
SELECT IFNULL(
  (
    SELECT COUNT(*)
    FROM place p
    INNER JOIN collection_entity ce ON p.id = ce.entity_id
    INNER JOIN collection c ON c.id = ce.id
    WHERE c.id = :collectionId
    AND ce.deleted = 0
    AND (
      p.name LIKE :query OR
      p.disambiguation LIKE :query OR
      p.address LIKE :query OR
      p.type LIKE :query
    )
  ),
  0
) AS count;

getPlacesByCollection:
SELECT
  p.id,
  p.name,
  p.disambiguation,
  p.address,
  p.type,
  p.longitude,
  p.latitude,
  p.`begin`,
  p.`end`,
  p.`ended`,
  details_metadata.entity_id IS NOT NULL AS visited
FROM place p
INNER JOIN collection_entity ce ON p.id = ce.entity_id
INNER JOIN collection c ON c.id = ce.id
LEFT JOIN details_metadata ON details_metadata.entity_id = p.id
WHERE c.id = :collectionId
AND ce.deleted = 0
AND (
  p.name LIKE :query OR
  p.disambiguation LIKE :query OR
  p.address LIKE :query OR
  p.type LIKE :query
)
ORDER BY p.name, p.address
LIMIT :limit OFFSET :offset;

-- all places

getCountOfAllPlaces:
SELECT IFNULL(
  (
    SELECT COUNT(*)
    FROM place p
    WHERE (
      p.name LIKE :query OR
      p.disambiguation LIKE :query OR
      p.address LIKE :query OR
      p.type LIKE :query
    )
  ),
  0
) AS count;

getAllPlaces:
SELECT
  p.id,
  p.name,
  p.disambiguation,
  p.address,
  p.type,
  p.longitude,
  p.latitude,
  p.`begin`,
  p.`end`,
  p.`ended`,
  details_metadata.entity_id IS NOT NULL AS visited
FROM place p
LEFT JOIN details_metadata ON details_metadata.entity_id = p.id
WHERE (
  p.name LIKE :query OR
  p.disambiguation LIKE :query OR
  p.address LIKE :query OR
  p.type LIKE :query
)
ORDER BY p.name, p.address
LIMIT :limit OFFSET :offset;
