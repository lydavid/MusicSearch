CREATE TABLE IF NOT EXISTS labels_by_entity (
  entity_id TEXT NOT NULL,
  label_id TEXT NOT NULL,

  PRIMARY KEY (entity_id, label_id)
);

insertOrFailLabelByEntity:
INSERT OR FAIL INTO labels_by_entity
VALUES ?;

deleteLabelsByEntity {
DELETE FROM label WHERE id IN (
  SELECT l.id
  FROM labels_by_entity le
  INNER JOIN label l ON l.id = le.label_id
  WHERE le.entity_id = :entityId
);

DELETE FROM labels_by_entity WHERE  entity_id = :entityId;
}

getNumberOfLabelsByEntity:
SELECT IFNULL(
  (
    SELECT COUNT(*)
    FROM labels_by_entity le
    INNER JOIN label l ON l.id = le.label_id
    WHERE le.entity_id = :entityId
    AND (
      l.name LIKE :query OR
      l.disambiguation LIKE :query OR
      l.type LIKE :query OR
      l.label_code LIKE :query
    )
  ),
  0
) AS count;

getLabelsByEntity:
SELECT
  l.id,
  l.name,
  l.disambiguation,
  l.type,
  l.label_code,
  visited.entity_id IS NOT NULL AS visited
FROM labels_by_entity le
INNER JOIN label l ON l.id = le.label_id
LEFT JOIN visited ON visited.entity_id = l.id
WHERE le.entity_id = :entityId
AND (
  l.name LIKE :query OR
  l.disambiguation LIKE :query OR
  l.type LIKE :query OR
  l.label_code LIKE :query
)
LIMIT :limit OFFSET :offset;
