CREATE TABLE IF NOT EXISTS area_place (
  area_id TEXT NOT NULL,
  place_id TEXT NOT NULL,

  PRIMARY KEY (area_id, place_id)
);

insert:
INSERT OR IGNORE INTO area_place
VALUES ?;

-- area by place

getAreaByPlace:
SELECT
  a.id,
  a.name,
  a.sort_name,
  a.disambiguation,
  a.type,
  a.begin,
  a.end,
  a.ended,
  visited.entity_id IS NOT NULL AS visited
FROM area a
INNER JOIN area_place ap ON a.id = ap.area_id
LEFT JOIN visited ON visited.entity_id = a.id
WHERE ap.place_id = :placeId
LIMIT 1;

deleteAreaPlaceLink:
DELETE FROM area_place
WHERE place_id = :placeId;

-- places by area

deletePlacesByArea:
DELETE FROM place WHERE id IN (
  SELECT p.id
  FROM place p
  INNER JOIN area_place ap ON p.id = ap.place_id
  INNER JOIN area a ON a.id = ap.area_id
  WHERE a.id = :areaId
);

getNumberOfPlacesByArea:
SELECT IFNULL(
  (
    SELECT COUNT(*)
    FROM place p
    INNER JOIN area_place ap ON p.id = ap.place_id
    INNER JOIN area a ON a.id = ap.area_id
    WHERE a.id = :areaId
    AND (p.name LIKE :query OR p.disambiguation LIKE :query OR p.type LIKE :query)
  ),
  0
) AS count;

getPlacesByArea:
SELECT
  p.id,
  p.name,
  p.disambiguation,
  p.address,
  p.type,
  p.longitude,
  p.latitude,
  p.begin,
  p.end,
  p.ended,
  visited.entity_id IS NOT NULL AS visited
FROM place p
INNER JOIN area_place ap ON p.id = ap.place_id
INNER JOIN area a ON a.id = ap.area_id
LEFT JOIN visited ON visited.entity_id = p.id
WHERE a.id = :areaId
AND (p.name LIKE :query OR p.disambiguation LIKE :query OR p.type LIKE :query)
ORDER BY p.name, p.address
LIMIT :limit OFFSET :offset;
