import kotlin.Boolean;
import kotlin.Int;
import kotlinx.datetime.Instant;
import ly.david.musicsearch.shared.domain.network.MusicBrainzEntity;

CREATE TABLE IF NOT EXISTS lookup_history (
  `mbid` TEXT PRIMARY KEY NOT NULL,
  `title` TEXT NOT NULL,
  `entity` TEXT AS MusicBrainzEntity NOT NULL,
  `number_of_visits` INTEGER AS Int NOT NULL,
  `last_accessed` INTEGER AS Instant NOT NULL,
  `search_hint` TEXT NOT NULL,
  `deleted` INTEGER AS Boolean NOT NULL
);

upsert {
  UPDATE lookup_history
  SET title = :title,
      number_of_visits = number_of_visits + 1,
      last_accessed = :lastAccessed,
      search_hint = :searchHint
  WHERE mbid = :mbid;

  INSERT OR IGNORE INTO lookup_history
  VALUES (
    :mbid,
    :title,
    :entity,
    :numberOfVisits,
    :lastAccessed,
    :searchHint,
    :deleted
  );
}

getAllLookupHistoryCount:
SELECT COUNT(DISTINCT lookup_history.mbid)
FROM lookup_history
LEFT JOIN alias ON lookup_history.mbid = alias.mbid
WHERE
  `deleted` = 0
  AND (
    `title` LIKE :query OR
    `entity` LIKE :query OR
    `search_hint` LIKE :query OR
    alias.name LIKE :query
  );

getAllLookupHistory:
SELECT
  lookup_history.mbid,
  lookup_history.title,
  lookup_history.entity,
  lookup_history.number_of_visits,
  lookup_history.last_accessed,
  mi.thumbnail_url,
  mi.id AS imageId
FROM lookup_history
LEFT JOIN alias ON lookup_history.mbid = alias.mbid
LEFT JOIN mbid_image mi ON mi.mbid = lookup_history.mbid
WHERE
  `deleted` = 0
  AND (
    `title` LIKE :query OR
    `entity` LIKE :query OR
    `search_hint` LIKE :query OR
    alias.name LIKE :query
  )
GROUP BY lookup_history.mbid
ORDER BY
  CASE WHEN :alphabetically THEN `title` END ASC,
  CASE WHEN :alphabeticallyReverse THEN `title` END DESC,
  CASE WHEN :recentlyVisited THEN `last_accessed` END DESC,
  CASE WHEN :leastRecentlyVisited THEN `last_accessed` END ASC,
  CASE WHEN :mostVisited THEN `number_of_visits` END DESC,
  CASE WHEN :leastVisited THEN `number_of_visits` END ASC
LIMIT :limit OFFSET :offset;

markAsDeleted:
UPDATE lookup_history
SET deleted = :deleted
WHERE mbid = :mbid;

markAllAsDeleted:
UPDATE lookup_history
SET deleted = :deleted;

delete:
DELETE FROM lookup_history
WHERE mbid = :mbid;

deleteAll:
DELETE FROM lookup_history;
