import kotlin.Boolean;

CREATE TABLE IF NOT EXISTS event (
  id TEXT PRIMARY KEY NOT NULL,
  name TEXT NOT NULL,
  disambiguation TEXT,
  type TEXT,
  type_id TEXT,
  time TEXT,
  cancelled INTEGER AS Boolean,
  begin TEXT,
  end TEXT,
  ended INTEGER AS Boolean
);

insertEvent:
INSERT OR IGNORE INTO event
VALUES ?;

deleteEvent:
DELETE FROM event
WHERE id = :id;

getEventForDetails:
SELECT
  id,
  name,
  disambiguation,
  type,
  time,
  cancelled,
  begin,
  end,
  ended,
  details_metadata.last_updated
FROM event
LEFT JOIN details_metadata ON details_metadata.entity_id = id
WHERE id = :eventId;


-- events by entity

CREATE TABLE IF NOT EXISTS events_by_entity (
  entity_id TEXT NOT NULL,
  event_id TEXT NOT NULL,

  PRIMARY KEY (entity_id, event_id)
);

insertOrIgnoreEventByEntity:
INSERT OR IGNORE INTO events_by_entity
VALUES ?;

deleteEventLinksByEntity {
DELETE FROM events_by_entity WHERE entity_id = :entityId;
}

getNumberOfEventsByEntity:
SELECT IFNULL(
  (
    SELECT COUNT(DISTINCT event.id)
    FROM events_by_entity ee
    INNER JOIN event ON event.id = ee.event_id
    LEFT JOIN alias ON event.id = alias.mbid
    WHERE ee.entity_id = :entityId
    AND (
      event.name LIKE :query OR
      event.disambiguation LIKE :query OR
      event.type LIKE :query OR
      event.time LIKE :query OR
      event.begin LIKE :query OR
      event.end LIKE :query OR
      alias.name LIKE :query
    )
  ),
  0
) AS count;

getEventsByEntity:
SELECT
  event.id,
  event.name,
  event.disambiguation,
  event.type,
  event.time,
  event.cancelled,
  event.begin,
  event.end,
  event.ended,
  mi.thumbnail_url,
  mi.id AS imageId,
  details_metadata.entity_id IS NOT NULL AS visited
FROM events_by_entity ee
INNER JOIN event ON event.id = ee.event_id
LEFT JOIN alias ON event.id = alias.mbid
LEFT JOIN mbid_image mi ON mi.mbid = event.id
LEFT JOIN details_metadata ON details_metadata.entity_id = event.id
WHERE ee.entity_id = :entityId
AND (
  event.name LIKE :query OR
  event.disambiguation LIKE :query OR
  event.type LIKE :query OR
  event.time LIKE :query OR
  event.begin LIKE :query OR
  event.end LIKE :query OR
  alias.name LIKE :query
)
GROUP BY event.id
ORDER BY event.begin, event.end, event.name
LIMIT :limit OFFSET :offset;

-- events by collection

getNumberOfEventsByCollection:
SELECT IFNULL(
  (
    SELECT COUNT(DISTINCT event.id)
    FROM event
    INNER JOIN collection_entity ce ON event.id = ce.entity_id
    INNER JOIN collection c ON c.id = ce.id
    LEFT JOIN alias ON event.id = alias.mbid
    WHERE c.id = :collectionId
    AND ce.deleted = 0
    AND (
      event.name LIKE :query OR
      event.disambiguation LIKE :query OR
      event.type LIKE :query OR
      alias.name LIKE :query
    )
  ),
  0
) AS count;

getEventsByCollection:
SELECT
  event.id,
  event.name,
  event.disambiguation,
  event.type,
  event.time,
  event.cancelled,
  event.begin,
  event.end,
  event.ended,
  mi.thumbnail_url,
  mi.id AS imageId,
  details_metadata.entity_id IS NOT NULL AS visited
FROM event
INNER JOIN collection_entity ce ON event.id = ce.entity_id
INNER JOIN collection c ON c.id = ce.id
LEFT JOIN alias ON event.id = alias.mbid
LEFT JOIN mbid_image mi ON mi.mbid = event.id
LEFT JOIN details_metadata ON details_metadata.entity_id = event.id
WHERE c.id = :collectionId
AND ce.deleted = 0
AND (
  event.name LIKE :query OR
  event.disambiguation LIKE :query OR
  event.type LIKE :query OR
  event.time LIKE :query OR
  event.begin LIKE :query OR
  event.end LIKE :query OR
  alias.name LIKE :query
)
GROUP BY event.id
ORDER BY event.begin, event.end, event.name
LIMIT :limit OFFSET :offset;

-- all events

getCountOfAllEvents:
SELECT IFNULL(
  (
    SELECT COUNT(e.id)
    FROM event e
    LEFT JOIN alias ON e.id = alias.mbid
    WHERE (
      e.name LIKE :query OR
      e.disambiguation LIKE :query OR
      e.type LIKE :query OR
      alias.name LIKE :query
    )
  ),
  0
) AS count;

getAllEvents:
SELECT
  e.id,
  e.name,
  e.disambiguation,
  e.type,
  e.time,
  e.cancelled,
  e.begin,
  e.end,
  e.ended,
  mi.thumbnail_url,
  mi.id AS imageId,
  details_metadata.entity_id IS NOT NULL AS visited
FROM event e
LEFT JOIN alias ON e.id = alias.mbid
LEFT JOIN mbid_image mi ON mi.mbid = e.id
LEFT JOIN details_metadata ON details_metadata.entity_id = e.id
WHERE (
  e.name LIKE :query OR
  e.disambiguation LIKE :query OR
  e.type LIKE :query OR
  e.time LIKE :query OR
  e.begin LIKE :query OR
  e.end LIKE :query OR
  alias.name LIKE :query
)
GROUP BY e.id
ORDER BY e.begin, e.end, e.name
LIMIT :limit OFFSET :offset;
