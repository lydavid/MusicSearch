stable class Success {
  stable val requestJsonString: String
  <runtime stability> = Stable
}
stable class Error {
  stable val exceptionString: String
  <runtime stability> = Stable
}
stable class Result {
  <runtime stability> = Stable
}
unstable class MusicBrainzLoginActivityResultContract {
  <runtime stability> = Unstable
}
stable class All {
  <runtime stability> = Stable
}
stable class ByEntity {
  stable val entityId: String
  stable val entity: MusicBrainzEntityType
  <runtime stability> = Stable
}
stable class BrowseMethod {
  <runtime stability> = Stable
}
stable class LifeSpanUiModel {
  stable val begin: String?
  stable val end: String?
  stable val ended: Boolean?
  <runtime stability> = Stable
}
stable class ListFilters {
  stable val query: String
  stable val isRemote: Boolean
  stable val sorted: Boolean
  <runtime stability> = Stable
}
stable class BasicAlias {
  stable val name: String
  stable val locale: String
  stable val isPrimary: Boolean
  stable val type: AliasType?
  stable val begin: String
  stable val end: String
  stable val ended: Boolean
  <runtime stability> = Stable
}
stable class AreaType {
  stable val COUNTRY: String
  <runtime stability> = Stable
}
stable class ReleaseEvent {
  stable val id: String
  stable val name: String
  stable val date: String?
  stable val countryCode: String?
  stable val visited: Boolean
  <runtime stability> = Stable
}
stable class ArtistCreditUiModel {
  stable val artistId: String
  stable val name: String
  stable val joinPhrase: String?
  <runtime stability> = Stable
}
stable class CollaboratingArtistAndEntity {
  stable val artistId: String
  stable val artistName: String
  stable val entityId: String
  stable val entityName: String
  stable val entity: MusicBrainzEntityType
  <runtime stability> = Stable
}
stable class BrowseRemoteMetadata {
  stable val remoteCount: Int
  stable val lastUpdated: Instant
  <runtime stability> = Stable
}
stable class NewCollection {
  stable val id: String?
  stable val name: String
  stable val entity: MusicBrainzEntityType
  <runtime stability> = Stable
}
stable class Dismissed {
  <runtime stability> = Stable
}
runtime class CreateCollection {
  runtime val collectionRepository: CollectionRepository
  <runtime stability> = Uncertain(CollectionRepository)
}
unstable class GetAllCollections {
  runtime val collectionRepository: CollectionRepository
  runtime val musicBrainzAuthStore: MusicBrainzAuthStore
  unstable val coroutineScope: CoroutineScope
  <runtime stability> = Unstable
}
stable class GetCollection {
  runtime val collectionRepository: CollectionRepository
  runtime val detailsMetadataDao: DetailsMetadataDao
  <runtime stability> = 
}
unstable class CoroutineDispatchers {
  unstable val default: CoroutineContext
  unstable val io: CoroutineContext
  <runtime stability> = Unstable
}
unstable class AreaDetailsModel {
  stable val id: String
  stable val name: String
  stable val sortName: String
  stable val disambiguation: String?
  stable val type: String?
  stable val lifeSpan: LifeSpanUiModel
  stable val countryCode: String
  stable val lastUpdated: Instant
  unstable val artistCredits: List<ArtistCreditUiModel>
  stable val imageMetadata: ImageMetadata
  stable val wikipediaExtract: WikipediaExtract
  stable val urls: ImmutableList<RelationListItemModel>
  stable val aliases: ImmutableList<BasicAlias>
  <runtime stability> = Unstable
}
unstable class ArtistDetailsModel {
  stable val id: String
  stable val name: String
  stable val sortName: String
  stable val disambiguation: String?
  stable val type: String?
  stable val gender: String?
  unstable val ipis: List<String>?
  unstable val isnis: List<String>?
  stable val lifeSpan: LifeSpanUiModel
  stable val areaListItemModel: AreaListItemModel?
  stable val lastUpdated: Instant
  unstable val artistCredits: List<ArtistCreditUiModel>
  stable val imageMetadata: ImageMetadata
  stable val urls: ImmutableList<RelationListItemModel>
  stable val wikipediaExtract: WikipediaExtract
  stable val aliases: ImmutableList<BasicAlias>
  <runtime stability> = Unstable
}
unstable class EventDetailsModel {
  stable val id: String
  stable val name: String
  stable val disambiguation: String?
  stable val type: String?
  stable val time: String?
  stable val cancelled: Boolean?
  stable val lifeSpan: LifeSpanUiModel
  stable val lastUpdated: Instant
  unstable val artistCredits: List<ArtistCreditUiModel>
  stable val imageMetadata: ImageMetadata
  stable val wikipediaExtract: WikipediaExtract
  stable val urls: ImmutableList<RelationListItemModel>
  stable val aliases: ImmutableList<BasicAlias>
  <runtime stability> = Unstable
}
unstable class InstrumentDetailsModel {
  stable val id: String
  stable val name: String
  stable val disambiguation: String?
  stable val description: String?
  stable val type: String?
  stable val lastUpdated: Instant
  unstable val artistCredits: List<ArtistCreditUiModel>
  stable val imageMetadata: ImageMetadata
  stable val wikipediaExtract: WikipediaExtract
  stable val urls: ImmutableList<RelationListItemModel>
  stable val aliases: ImmutableList<BasicAlias>
  <runtime stability> = Unstable
}
unstable class LabelDetailsModel {
  stable val id: String
  stable val name: String
  stable val disambiguation: String?
  stable val type: String?
  stable val labelCode: Int?
  unstable val ipis: List<String>?
  unstable val isnis: List<String>?
  stable val lifeSpan: LifeSpanUiModel
  stable val lastUpdated: Instant
  unstable val artistCredits: List<ArtistCreditUiModel>
  stable val imageMetadata: ImageMetadata
  stable val wikipediaExtract: WikipediaExtract
  stable val urls: ImmutableList<RelationListItemModel>
  stable val aliases: ImmutableList<BasicAlias>
  <runtime stability> = Unstable
}
unstable class PlaceDetailsModel {
  stable val id: String
  stable val name: String
  stable val disambiguation: String?
  stable val address: String
  stable val type: String?
  stable val coordinates: CoordinatesUiModel
  stable val lifeSpan: LifeSpanUiModel
  stable val area: AreaListItemModel?
  stable val lastUpdated: Instant
  unstable val artistCredits: List<ArtistCreditUiModel>
  stable val imageMetadata: ImageMetadata
  stable val wikipediaExtract: WikipediaExtract
  stable val urls: ImmutableList<RelationListItemModel>
  stable val aliases: ImmutableList<BasicAlias>
  <runtime stability> = Unstable
}
unstable class RecordingDetailsModel {
  stable val id: String
  stable val name: String
  stable val firstReleaseDate: String?
  stable val disambiguation: String
  stable val length: Int?
  stable val video: Boolean
  unstable val isrcs: List<String>?
  stable val lastUpdated: Instant
  unstable val artistCredits: List<ArtistCreditUiModel>
  stable val imageMetadata: ImageMetadata
  stable val wikipediaExtract: WikipediaExtract
  stable val urls: ImmutableList<RelationListItemModel>
  stable val aliases: ImmutableList<BasicAlias>
  <runtime stability> = Unstable
}
unstable class ReleaseDetailsModel {
  stable val id: String
  stable val name: String
  stable val disambiguation: String
  stable val date: String
  stable val barcode: String?
  stable val status: String?
  stable val statusId: String?
  stable val countryCode: String?
  stable val packaging: String?
  stable val packagingId: String?
  stable val asin: String?
  stable val quality: String?
  stable val lastUpdated: Instant
  stable val imageMetadata: ImageMetadata
  unstable val artistCredits: List<ArtistCreditUiModel>
  stable val wikipediaExtract: WikipediaExtract
  stable val urls: ImmutableList<RelationListItemModel>
  stable val aliases: ImmutableList<BasicAlias>
  stable val coverArtArchive: CoverArtArchiveUiModel
  stable val textRepresentation: TextRepresentationUiModel
  stable val formattedFormats: String
  stable val formattedTracks: String
  unstable val releaseGroup: ReleaseGroupForRelease?
  unstable val areas: List<AreaListItemModel>
  unstable val labels: List<LabelListItemModel>
  stable val releaseLength: Int?
  stable val hasNullLength: Boolean
  <runtime stability> = Unstable
}
unstable class ReleaseGroupDetailsModel {
  stable val id: String
  stable val name: String
  stable val disambiguation: String
  stable val firstReleaseDate: String
  stable val primaryType: String
  unstable val secondaryTypes: List<String>
  stable val lastUpdated: Instant
  unstable val artistCredits: List<ArtistCreditUiModel>
  stable val imageMetadata: ImageMetadata
  stable val wikipediaExtract: WikipediaExtract
  stable val urls: ImmutableList<RelationListItemModel>
  stable val aliases: ImmutableList<BasicAlias>
  <runtime stability> = Unstable
}
unstable class SeriesDetailsModel {
  stable val id: String
  stable val name: String
  stable val disambiguation: String?
  stable val type: String?
  stable val lastUpdated: Instant
  unstable val artistCredits: List<ArtistCreditUiModel>
  stable val imageMetadata: ImageMetadata
  stable val wikipediaExtract: WikipediaExtract
  stable val urls: ImmutableList<RelationListItemModel>
  stable val aliases: ImmutableList<BasicAlias>
  <runtime stability> = Unstable
}
unstable class WorkDetailsModel {
  stable val id: String
  stable val name: String
  stable val disambiguation: String?
  stable val type: String?
  unstable val languages: List<String>
  unstable val iswcs: List<String>
  stable val lastUpdated: Instant
  unstable val attributes: List<WorkAttributeUiModel>
  unstable val artistCredits: List<ArtistCreditUiModel>
  stable val imageMetadata: ImageMetadata
  stable val wikipediaExtract: WikipediaExtract
  stable val urls: ImmutableList<RelationListItemModel>
  stable val aliases: ImmutableList<BasicAlias>
  <runtime stability> = Unstable
}
stable class ActionableResult {
  stable val message: String
  stable val errorResolution: ErrorResolution
  stable val action: Action?
  stable val time: Instant
  <runtime stability> = Stable
}
unstable class HandledException {
  stable val userMessage: String
  stable val errorResolution: ErrorResolution
  <runtime stability> = Unstable
}
stable class LookupHistory {
  stable val mbid: String
  stable val title: String
  stable val entity: MusicBrainzEntityType
  stable val numberOfVisits: Int
  stable val lastAccessed: Instant
  stable val searchHint: String
  stable val deleted: Boolean
  <runtime stability> = Stable
}
stable class NowPlayingHistory {
  stable val raw: String
  stable val lastPlayed: Instant
  <runtime stability> = Stable
}
stable class SearchHistory {
  stable val query: String
  stable val entity: MusicBrainzEntityType
  stable val lastAccessed: Instant
  <runtime stability> = Stable
}
stable class SpotifyHistory {
  stable val trackId: String
  stable val artistName: String?
  stable val albumName: String?
  stable val trackName: String?
  stable val trackLengthMilliseconds: Int?
  stable val lastListened: Instant
  <runtime stability> = Stable
}
runtime class DeleteLookupHistoryImpl {
  runtime val lookupHistoryRepository: LookupHistoryRepository
  <runtime stability> = Uncertain(LookupHistoryRepository)
}
unstable class GetPagedHistoryImpl {
  runtime val lookupHistoryRepository: LookupHistoryRepository
  unstable val coroutineScope: CoroutineScope
  <runtime stability> = Unstable
}
runtime class IncrementLookupHistoryImpl {
  runtime val lookupHistoryRepository: LookupHistoryRepository
  <runtime stability> = Uncertain(LookupHistoryRepository)
}
runtime class MarkLookupHistoryForDeletionImpl {
  runtime val lookupHistoryRepository: LookupHistoryRepository
  <runtime stability> = Uncertain(LookupHistoryRepository)
}
runtime class UnMarkLookupHistoryForDeletionImpl {
  runtime val lookupHistoryRepository: LookupHistoryRepository
  <runtime stability> = Uncertain(LookupHistoryRepository)
}
stable class ImageMetadata {
  stable val imageId: ImageId
  stable val thumbnailUrl: String
  stable val largeUrl: String
  stable val types: ImmutableList<String>
  stable val comment: String
  stable val mbid: String?
  stable val name: String?
  stable val disambiguation: String?
  stable val entity: MusicBrainzEntityType?
  <runtime stability> = 
}
stable class ImageMetadataRepositoryImpl {
  runtime val artistImageRepository: ArtistImageRepository
  runtime val musicBrainzImageMetadataRepository: MusicBrainzImageMetadataRepository
  <runtime stability> = 
}
stable class ImageMetadataWithCount {
  stable val imageMetadata: ImageMetadata
  stable val count: Int
  <runtime stability> = 
}
unstable class GetEntitiesImpl {
  runtime val entitiesListRepository: EntitiesListRepository
  runtime val browseRemoteMetadataRepository: BrowseRemoteMetadataRepository
  unstable val coroutineScope: CoroutineScope
  <runtime stability> = Unstable
}
stable class AreaListItemModel {
  stable val id: String
  stable val name: String
  stable val sortName: String
  stable val disambiguation: String?
  stable val type: String?
  stable val lifeSpan: LifeSpanUiModel?
  stable val countryCodes: ImmutableList<String>
  stable val date: String?
  stable val visited: Boolean
  stable val collected: Boolean
  stable val aliases: ImmutableList<BasicAlias>
  <runtime stability> = 
}
stable class ArtistListItemModel {
  stable val id: String
  stable val name: String
  stable val sortName: String
  stable val disambiguation: String?
  stable val type: String?
  stable val gender: String?
  stable val countryCode: String?
  stable val lifeSpan: LifeSpanUiModel
  stable val imageUrl: String?
  stable val imageId: ImageId?
  stable val visited: Boolean
  stable val collected: Boolean
  stable val aliases: ImmutableList<BasicAlias>
  <runtime stability> = 
}
stable class CollectionListItemModel {
  stable val id: String
  stable val isRemote: Boolean
  stable val name: String
  stable val description: String
  stable val entity: MusicBrainzEntityType
  stable val cachedEntityCount: Int
  stable val visited: Boolean
  stable val containsEntity: Boolean
  <runtime stability> = Stable
}
stable class EventListItemModel {
  stable val id: String
  stable val name: String
  stable val disambiguation: String?
  stable val type: String?
  stable val time: String?
  stable val cancelled: Boolean?
  stable val lifeSpan: LifeSpanUiModel
  stable val imageUrl: String?
  stable val imageId: ImageId?
  stable val visited: Boolean
  stable val collected: Boolean
  stable val aliases: ImmutableList<BasicAlias>
  <runtime stability> = 
}
stable class Footer {
  stable val id: String
  stable val text: String
  <runtime stability> = Stable
}
stable class GenreListItemModel {
  stable val id: String
  stable val name: String
  stable val disambiguation: String?
  stable val visited: Boolean
  stable val collected: Boolean
  <runtime stability> = Stable
}
stable class Header {
  stable val id: String
  <runtime stability> = Stable
}
stable class InstrumentListItemModel {
  stable val id: String
  stable val name: String
  stable val disambiguation: String?
  stable val description: String?
  stable val type: String?
  stable val visited: Boolean
  stable val collected: Boolean
  stable val aliases: ImmutableList<BasicAlias>
  <runtime stability> = 
}
stable class LabelListItemModel {
  stable val id: String
  stable val name: String
  stable val disambiguation: String?
  stable val type: String?
  stable val labelCode: Int?
  stable val catalogNumbers: String?
  stable val visited: Boolean
  stable val collected: Boolean
  stable val aliases: ImmutableList<BasicAlias>
  <runtime stability> = 
}
stable class LastUpdatedFooter {
  stable val id: String
  stable val lastUpdated: Instant
  <runtime stability> = Stable
}
stable class ListSeparator {
  stable val id: String
  stable val text: String
  <runtime stability> = Stable
}
stable class LookupHistoryListItemModel {
  stable val id: String
  stable val title: String
  stable val entity: MusicBrainzEntityType
  stable val numberOfVisits: Int
  stable val lastAccessed: Instant
  stable val imageUrl: String?
  stable val imageId: ImageId?
  <runtime stability> = Stable
}
stable class NowPlayingHistoryListItemModel {
  stable val id: String
  stable val title: String
  stable val artist: String
  stable val lastPlayed: Instant
  <runtime stability> = Stable
}
stable class PlaceListItemModel {
  stable val id: String
  stable val name: String
  stable val disambiguation: String?
  stable val address: String
  stable val type: String?
  stable val coordinates: CoordinatesUiModel?
  stable val lifeSpan: LifeSpanUiModel?
  stable val visited: Boolean
  stable val collected: Boolean
  stable val aliases: ImmutableList<BasicAlias>
  <runtime stability> = 
}
stable class RecordingListItemModel {
  stable val id: String
  stable val name: String
  stable val firstReleaseDate: String?
  stable val disambiguation: String
  stable val length: Int?
  stable val video: Boolean
  stable val formattedArtistCredits: String?
  stable val visited: Boolean
  stable val collected: Boolean
  stable val aliases: ImmutableList<BasicAlias>
  <runtime stability> = 
}
stable class RelationListItemModel {
  stable val id: String
  stable val linkedEntityId: String
  stable val label: String
  stable val name: String
  stable val disambiguation: String?
  stable val attributes: String?
  stable val linkedEntity: MusicBrainzEntityType
  stable val visited: Boolean
  stable val isForwardDirection: Boolean?
  stable val aliases: ImmutableList<BasicAlias>
  stable val lifeSpan: LifeSpanUiModel
  stable val imageUrl: String?
  stable val imageId: ImageId?
  stable val lastUpdated: Instant?
  <runtime stability> = 
}
stable class ReleaseGroupListItemModel {
  stable val id: String
  stable val name: String
  stable val disambiguation: String
  stable val firstReleaseDate: String
  stable val primaryType: String
  stable val secondaryTypes: ImmutableList<String>
  stable val formattedArtistCredits: String?
  stable val imageUrl: String?
  stable val imageId: ImageId?
  stable val visited: Boolean
  stable val collected: Boolean
  stable val aliases: ImmutableList<BasicAlias>
  <runtime stability> = 
}
stable class ReleaseListItemModel {
  stable val id: String
  stable val name: String
  stable val disambiguation: String
  stable val date: String
  stable val barcode: String?
  stable val status: String?
  stable val statusId: String?
  stable val countryCode: String?
  stable val packaging: String?
  stable val packagingId: String?
  stable val asin: String?
  stable val quality: String?
  stable val catalogNumbers: String?
  stable val coverArtArchive: CoverArtArchiveUiModel
  stable val textRepresentation: TextRepresentationUiModel?
  stable val imageUrl: String?
  stable val imageId: ImageId?
  stable val formattedFormats: String?
  stable val formattedTracks: String?
  stable val formattedArtistCredits: String?
  stable val releaseCountryCount: Int
  stable val visited: Boolean
  stable val collected: Boolean
  stable val aliases: ImmutableList<BasicAlias>
  <runtime stability> = 
}
stable class SearchHeader {
  stable val id: String
  stable val remoteCount: Int
  <runtime stability> = Stable
}
stable class SearchHistoryListItemModel {
  stable val id: String
  stable val query: String
  stable val entity: MusicBrainzEntityType
  <runtime stability> = Stable
}
stable class SeriesListItemModel {
  stable val id: String
  stable val name: String
  stable val disambiguation: String?
  stable val type: String?
  stable val visited: Boolean
  stable val collected: Boolean
  stable val aliases: ImmutableList<BasicAlias>
  <runtime stability> = 
}
stable class SpotifyHistoryListItemModel {
  stable val id: String
  stable val trackId: String
  stable val artistName: String?
  stable val albumName: String?
  stable val trackName: String?
  stable val trackLengthMilliseconds: Int?
  stable val lastListened: Instant
  <runtime stability> = Stable
}
stable class TrackListItemModel {
  stable val id: String
  stable val position: Int
  stable val number: String
  stable val name: String
  stable val length: Int?
  stable val mediumId: Long
  stable val recordingId: String
  stable val formattedArtistCredits: String?
  stable val visited: Boolean
  stable val mediumPosition: Int
  stable val mediumName: String?
  stable val trackCount: Int
  stable val format: String?
  stable val aliases: ImmutableList<BasicAlias>
  stable val disambiguation: String?
  <runtime stability> = 
}
stable class WorkListItemModel {
  stable val id: String
  stable val name: String
  stable val disambiguation: String?
  stable val type: String?
  stable val languages: ImmutableList<String>
  stable val iswcs: ImmutableList<String>
  stable val attributes: ImmutableList<WorkAttributeUiModel>
  stable val visited: Boolean
  stable val collected: Boolean
  stable val aliases: ImmutableList<BasicAlias>
  <runtime stability> = 
}
runtime class GetMusicBrainzCoverArtUrl {
  runtime val getMusicBrainzUrl: GetMusicBrainzUrl
  <runtime stability> = Uncertain(GetMusicBrainzUrl)
}
runtime class GetMusicBrainzUrlImpl {
  runtime val musicbrainzRepository: MusicbrainzRepository
  <runtime stability> = Uncertain(MusicbrainzRepository)
}
runtime class DeleteNowPlayingHistory {
  runtime val nowPlayingHistoryRepository: NowPlayingHistoryRepository
  <runtime stability> = Uncertain(NowPlayingHistoryRepository)
}
unstable class GetNowPlayingHistory {
  runtime val nowPlayingHistoryRepository: NowPlayingHistoryRepository
  unstable val coroutineScope: CoroutineScope
  <runtime stability> = Unstable
}
stable class CoordinatesUiModel {
  stable val longitude: Double?
  stable val latitude: Double?
  <runtime stability> = Stable
}
stable class RelationStats {
  stable val relationTypeCounts: ImmutableList<RelationTypeCount>
  stable val lastUpdated: Instant?
  <runtime stability> = 
}
stable class RelationTypeCount {
  stable val linkedEntity: MusicBrainzEntityType
  stable val count: Int
  <runtime stability> = Stable
}
stable class RelationWithOrder {
  stable val id: String
  stable val linkedEntityId: String
  stable val label: String
  stable val name: String
  stable val disambiguation: String?
  stable val attributes: String?
  stable val linkedEntity: MusicBrainzEntityType
  stable val isForwardDirection: Boolean?
  stable val order: Int
  stable val lifeSpan: LifeSpanUiModel
  <runtime stability> = Stable
}
unstable class GetEntityRelationshipsImpl {
  runtime val relationRepository: RelationRepository
  unstable val coroutineScope: CoroutineScope
  <runtime stability> = Unstable
}
runtime class ObserveRelationStatsUseCaseImpl {
  runtime val relationRepository: RelationRepository
  <runtime stability> = Uncertain(RelationRepository)
}
stable class CoverArtArchiveUiModel {
  stable val count: Int
  <runtime stability> = Stable
}
stable class FormatTrackCount {
  stable val format: String?
  stable val trackCount: Int
  <runtime stability> = Stable
}
stable class TextRepresentationUiModel {
  stable val script: String?
  stable val language: String?
  <runtime stability> = Stable
}
unstable class GetTracksByReleaseImpl {
  runtime val releaseRepository: ReleaseRepository
  unstable val coroutineScope: CoroutineScope
  <runtime stability> = Unstable
}
unstable class ReleaseGroupForRelease {
  stable val id: String
  stable val name: String
  stable val disambiguation: String
  stable val firstReleaseDate: String
  stable val primaryType: String
  unstable val secondaryTypes: List<String>
  <runtime stability> = Unstable
}
unstable class ReleaseGroupTypeCount {
  stable val primaryType: String?
  unstable val secondaryTypes: List<String>?
  stable val count: Int
  <runtime stability> = Unstable
}
runtime class DeleteSearchHistory {
  runtime val searchHistoryRepository: SearchHistoryRepository
  <runtime stability> = Uncertain(SearchHistoryRepository)
}
unstable class GetSearchHistory {
  runtime val searchHistoryRepository: SearchHistoryRepository
  unstable val coroutineScope: CoroutineScope
  <runtime stability> = Unstable
}
runtime class RecordSearchHistory {
  runtime val searchHistoryRepository: SearchHistoryRepository
  <runtime stability> = Uncertain(SearchHistoryRepository)
}
stable class SearchResultMetadata {
  stable val entity: MusicBrainzEntityType
  stable val query: String
  stable val localCount: Int
  stable val remoteCount: Int
  <runtime stability> = Stable
}
unstable class GetSearchResults {
  runtime val searchResultsRepository: SearchResultsRepository
  unstable val coroutineScope: CoroutineScope
  unstable val _searchQueries: MutableStateFlow<Pair<MusicBrainzEntityType, String>>
  <runtime stability> = Unstable
}
stable class WikipediaExtract {
  stable val extract: String
  stable val wikipediaUrl: String
  <runtime stability> = Stable
}
stable class WorkAttributeUiModel {
  stable val type: String
  stable val typeId: String
  stable val value: String
  <runtime stability> = Stable
}
