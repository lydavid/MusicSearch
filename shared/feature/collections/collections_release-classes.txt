stable class AddToCollectionPresenter {
  stable val screen: AddToCollectionScreen
  stable val navigator: Navigator
  runtime val getAllCollections: GetAllCollections
  runtime val createCollection: CreateCollection
  unstable val collectionRepository: CollectionRepository
  <runtime stability> = Stable
}
stable class CreateCollection {
  stable val newCollection: NewCollection
  <runtime stability> = Stable
}
stable class AddToCollection {
  stable val id: String
  <runtime stability> = Stable
}
stable class AddToCollectionUiState {
  runtime val lazyPagingItems: LazyPagingItems<CollectionListItemModel>
  stable val eventSink: Function1<AddToCollectionUiEvent, Unit>
}
stable class CollectionListPresenter {
  stable val navigator: Navigator
  unstable val appPreferences: AppPreferences
  runtime val getAllCollections: GetAllCollections
  runtime val createCollection: CreateCollection
  <runtime stability> = Stable
}
stable class UpdateQuery {
  stable val query: String
  <runtime stability> = Stable
}
stable class UpdateShowLocal {
  stable val show: Boolean
  <runtime stability> = Stable
}
stable class UpdateShowRemote {
  stable val show: Boolean
  <runtime stability> = Stable
}
stable class CreateCollection {
  stable val newCollection: NewCollection
  <runtime stability> = Stable
}
stable class GoToCollection {
  stable val id: String
  <runtime stability> = Stable
}
stable class CollectionListUiState {
  stable val query: String
  stable val showLocal: Boolean
  stable val showRemote: Boolean
  runtime val lazyPagingItems: LazyPagingItems<CollectionListItemModel>
  stable val eventSink: Function1<CollectionListUiEvent, Unit>
}
stable class NewCollection {
  stable val name: String?
  stable val entity: MusicBrainzEntity?
  <runtime stability> = Stable
}
stable class CollectionPresenter {
  stable val screen: CollectionScreen
  stable val navigator: Navigator
  runtime val getCollectionUseCase: GetCollection
  runtime val incrementLookupHistory: IncrementLookupHistory
  runtime val getAreasByEntity: GetAreasByEntity
  stable val artistsByEntityPresenter: ArtistsByEntityPresenter
  runtime val getInstrumentsByEntity: GetInstrumentsByEntity
  stable val labelsByEntityPresenter: LabelsByEntityPresenter
  runtime val getPlacesByEntity: GetPlacesByEntity
  runtime val getRecordingsByEntity: GetRecordingsByEntity
  stable val eventsByEntityPresenter: EventsByEntityPresenter
  stable val releasesByEntityPresenter: ReleasesByEntityPresenter
  stable val releaseGroupsByEntityPresenter: ReleaseGroupsByEntityPresenter
  stable val worksByEntityPresenter: WorksByEntityPresenter
  runtime val getSeriesByEntity: GetSeriesByEntity
  runtime val deleteFromCollection: DeleteFromCollection
  <runtime stability> = Stable
}
stable class CollectionUiState {
  unstable val collection: CollectionListItemModel?
  unstable val actionableResult: ActionableResult?
  stable val query: String
  runtime val lazyPagingItems: LazyPagingItems<ListItemModel>
  stable val artistsByEntityUiState: ArtistsByEntityUiState
  stable val eventsByEntityUiState: EventsByEntityUiState
  stable val labelsByEntityUiState: LabelsByEntityUiState
  stable val releasesByEntityUiState: ReleasesByEntityUiState
  stable val releaseGroupsByEntityUiState: ReleaseGroupsByEntityUiState
  stable val worksByEntityUiState: WorksByEntityUiState
  stable val eventSink: Function1<CollectionUiEvent, Unit>
}
stable class NavigateUp {
  <runtime stability> = Stable
}
stable class UpdateQuery {
  stable val query: String
  <runtime stability> = Stable
}
stable class MarkItemForDeletion {
  stable val collectableId: String
  stable val name: String
  <runtime stability> = Stable
}
stable class UnMarkItemForDeletion {
  stable val collectableId: String
  <runtime stability> = Stable
}
stable class DeleteItem {
  stable val collectableId: String
  stable val name: String
  <runtime stability> = Stable
}
stable class ClickItem {
  stable val entity: MusicBrainzEntity
  stable val id: String
  stable val title: String?
  <runtime stability> = Stable
}
