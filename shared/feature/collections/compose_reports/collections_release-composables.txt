restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.shared.feature.collections.components.PreviewCollectionBottomSheet()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.shared.feature.collections.components.PreviewCollectionListItem(
  stable isRemote: Boolean = @static true
  stable visited: Boolean = @static true
  stable collected: Boolean = @static true
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.shared.feature.collections.components.PreviewCollectionListItemDisabled()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.shared.feature.collections.components.PreviewCollectionListItemHighlighted()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.shared.feature.collections.components.PreviewCreateNewCollectionDialogContent()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.shared.feature.collections.components.PreviewCreateNewCollectionDialogContentDefaultEntity()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.shared.feature.collections.list.PreviewCollectionListUi()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.shared.feature.collections.list.PreviewCollectionListUiSelection()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.shared.feature.collections.list.PreviewCollectionListUiSelectedAll()
open fun ly.david.musicsearch.shared.feature.collections.add.AddToCollectionPresenter.present(
  stable <this>: AddToCollectionPresenter
): AddToCollectionUiState
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.shared.feature.collections.add.AddToCollectionUi(
  stable state: AddToCollectionUiState
  stable modifier: Modifier? = @static <expression>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.shared.feature.collections.components.CollectionBottomSheetContent(
  collections: LazyPagingItems<CollectionListItemModel>
  stable modifier: Modifier? = @static <expression>
  stable onCreateCollectionClick: Function0<Unit>? = @static <expression>
  stable onAddToCollection: Function1<@[ParameterName(name = 'collectionId')] String, Unit>? = @static <expression>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.shared.feature.collections.components.CollectionListItem(
  collection: CollectionListItemModel
  stable modifier: Modifier? = @static <expression>
  stable query: String? = @static ""
  stable onClick: Function1<String, Unit>? = @static <expression>
  stable enabled: Boolean = @static true
  stable isSelected: Boolean = @static false
  stable onSelect: Function1<String, Unit>? = @static <expression>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.shared.feature.collections.create.CreateNewCollectionDialogContent(
  stable modifier: Modifier? = @static <expression>
  stable defaultEntity: MusicBrainzEntityType? = @static <expression>
  stable onDismiss: Function0<Unit>? = @static <expression>
  stable onSubmit: Function2<@[ParameterName(name = 'name')] String, @[ParameterName(name = 'entity')] MusicBrainzEntityType, Unit>? = @static <expression>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.shared.feature.collections.list.CollectionSortBottomSheet(
  stable sortOption: CollectionSortOption
  stable onSortOptionClick: Function1<CollectionSortOption, Unit>? = @static <expression>
  stable bottomSheetState: SheetState? = @dynamic <expression>
  stable onDismiss: Function0<Unit>? = @static <expression>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.shared.feature.collections.list.CollectionSortBottomSheetContent(
  stable sortOption: CollectionSortOption? = @static <expression>
  stable onSortOptionClick: Function1<CollectionSortOption, Unit>? = @static <expression>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.shared.feature.collections.list.CollectionsFilterChipsBar(
  stable sortOption: CollectionSortOption
  stable modifier: Modifier? = @static <expression>
  stable showLocal: Boolean = @static true
  stable onShowLocalToggle: Function1<Boolean, Unit>? = @static <expression>
  stable showRemote: Boolean = @static true
  stable onShowRemoteToggle: Function1<Boolean, Unit>? = @static <expression>
  stable onSortClick: Function0<Unit>? = @static <expression>
)
open fun ly.david.musicsearch.shared.feature.collections.list.CollectionListPresenter.present(
  stable <this>: CollectionListPresenter
): CollectionsListUiState
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.shared.feature.collections.list.CollectionListUi(
  stable state: CollectionsListUiState
  stable modifier: Modifier? = @static <expression>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.shared.feature.collections.list.CollectionListUi(
  stable state: CollectionsListUiState
  stable modifier: Modifier? = @static <expression>
  stable onSortClick: Function0<Unit>? = @static <expression>
  stable onCreateCollectionClick: Function0<Unit>? = @static <expression>
)
open scheme("[presenter]") fun ly.david.musicsearch.shared.feature.collections.single.CollectionPresenter.present(
  stable <this>: CollectionPresenter
): CollectionUiState
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.shared.feature.collections.single.CollectionUi(
  stable state: CollectionUiState
  stable modifier: Modifier? = @static <expression>
  stable now: Instant? = @dynamic <expression>
)
