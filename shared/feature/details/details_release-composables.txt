restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewAreaDetails()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewAreaDetailsError()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewAreaRelationships()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewAreaArtists()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewAreaEvents()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewAreaLabels()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewAreaReleases()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewAreaPlaces()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewAreaStats()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewArtistDetailsUi()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewArtistDetailsUiWithWikipediaUrlButNoExtract()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewEventDetailsUi()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewGenreUi()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewInstrumentDetailsUi()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewLabelDetailsUi()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewPlaceDetailsUi()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewRecordingDetailsUi()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewReleaseDetailsUi()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewTracksInReleaseScreen()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewReleaseGroupDetailsUi()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewSeriesDetailsUi()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewWorkDetailsUi()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun AreaDetailsUi(
  area: AreaDetailsModel
  stable modifier: Modifier? = @static Companion
  stable filterText: String? = @static ""
  stable lazyListState: LazyListState? = @dynamic rememberLazyListState(0, 0, $composer, 0, 0b0011)
)
scheme("[presenter]") fun present(
  stable <this>: AreaPresenter
): AreaUiState
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun AreaUi(
  stable state: AreaUiState
  stable entityId: String
  stable modifier: Modifier? = @static Companion
)
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable]]") fun AreaUiInternal(
  stable state: AreaUiState
  stable entityId: String
  stable modifier: Modifier? = @static Companion
  stable snackbarHostState: SnackbarHostState? = @static $composer.startReplaceGroup(1849434622)
sourceInformation($composer, "CC(remember):AreaUi.kt#9igjgp")
val tmp0_group = $composer.cache(false) {
  SnackbarHostState  (  )
}

$composer.endReplaceGroup()
tmp0_group@ly.david.musicsearch.shared.feature.details.area.AreaUiInternal
  stable overflowDropdownMenuItems: @[ExtensionFunctionType] Function3<OverflowMenuScope, Composer, Int, Unit>? = @static null
  unstable scope: CoroutineScope? = @dynamic rememberCoroutineScope(null, $composer, 0, 0b0001)
  unstable strings: AppStrings? = @dynamic LocalStrings.<get-current>($composer, 0)
  unstable now: Instant? = @dynamic System.now()
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ArtistDetailsUi(
  artist: ArtistDetailsModel
  stable modifier: Modifier? = @static Companion
  stable filterText: String? = @static ""
  stable lazyListState: LazyListState? = @dynamic rememberLazyListState(0, 0, $composer, 0, 0b0011)
  stable onItemClick: Function3<@[ParameterName(name = 'entity')] MusicBrainzEntity, @[ParameterName(name = 'id')] String, @[ParameterName(name = 'title')] String?, Unit>? = @static $composer.startReplaceGroup(1849434622)
sourceInformation($composer, "CC(remember):ArtistDetailsUi.kt#9igjgp")
val tmp0_group = $composer.cache(false) {
  {     <unused var>  :   MusicBrainzEntity  ,   <unused var>  :   String  ,   <unused var>  :   String?   ->

  }

}

$composer.endReplaceGroup()
tmp0_group@ly.david.musicsearch.shared.feature.details.artist.ArtistDetailsUi
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ArtistInformationSection(
  <this>: ArtistDetailsModel
  stable filterText: String? = @static ""
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun AreaSection(
  areaListItemModel: AreaListItemModel?
  stable filterText: String? = @static ""
  stable onItemClick: Function3<@[ParameterName(name = 'entity')] MusicBrainzEntity, @[ParameterName(name = 'id')] String, @[ParameterName(name = 'title')] String?, Unit>? = @static $composer.startReplaceGroup(1849434622)
sourceInformation($composer, "CC(remember):ArtistDetailsUi.kt#9igjgp")
val tmp0_group = $composer.cache(false) {
  {     <unused var>  :   MusicBrainzEntity  ,   <unused var>  :   String  ,   <unused var>  :   String?   ->

  }

}

$composer.endReplaceGroup()
tmp0_group@ly.david.musicsearch.shared.feature.details.artist.AreaSection
)
scheme("[presenter]") fun present(
  stable <this>: ArtistPresenter
): ArtistUiState
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ArtistUi(
  stable state: ArtistUiState
  stable entityId: String
  stable modifier: Modifier? = @static Companion
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun EventDetailsUi(
  event: EventDetailsModel
  stable modifier: Modifier? = @static Companion
  stable filterText: String? = @static ""
  stable lazyListState: LazyListState? = @dynamic rememberLazyListState(0, 0, $composer, 0, 0b0011)
)
scheme("[presenter]") fun present(
  stable <this>: EventPresenter
): EventUiState
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun EventUi(
  stable state: EventUiState
  stable entityId: String
  stable modifier: Modifier? = @static Companion
)
fun present(
  stable <this>: GenrePresenter
): GenreUiState
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun GenreUi(
  stable state: GenreUiState
  stable modifier: Modifier? = @static Companion
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun GenreUi(
  stable title: String
  genre: GenreListItemModel?
  stable url: String
  stable modifier: Modifier? = @static Companion
  stable isError: Boolean = @static false
  stable onBack: Function0<Unit>? = @static $composer.startReplaceGroup(1849434622)
sourceInformation($composer, "CC(remember):GenreUi.kt#9igjgp")
val tmp0_group = $composer.cache(false) {
  {

  }

}

$composer.endReplaceGroup()
tmp0_group@ly.david.musicsearch.shared.feature.details.genre.GenreUi
  stable onRetryClick: Function0<Unit>? = @static $composer.startReplaceGroup(1849434622)
sourceInformation($composer, "CC(remember):GenreUi.kt#9igjgp")
val tmp1_group = $composer.cache(false) {
  {

  }

}

$composer.endReplaceGroup()
tmp1_group@ly.david.musicsearch.shared.feature.details.genre.GenreUi
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun InstrumentDetailsUi(
  instrument: InstrumentDetailsModel
  stable modifier: Modifier? = @static Companion
  stable filterText: String? = @static ""
  stable lazyListState: LazyListState? = @dynamic rememberLazyListState(0, 0, $composer, 0, 0b0011)
)
scheme("[presenter]") fun present(
  stable <this>: InstrumentPresenter
): InstrumentUiState
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun InstrumentUi(
  stable state: InstrumentUiState
  stable entityId: String
  stable modifier: Modifier? = @static Companion
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun LabelDetailsUi(
  label: LabelDetailsModel
  stable modifier: Modifier? = @static Companion
  stable filterText: String? = @static ""
  stable lazyListState: LazyListState? = @dynamic rememberLazyListState(0, 0, $composer, 0, 0b0011)
)
scheme("[presenter]") fun present(
  stable <this>: LabelPresenter
): LabelUiState
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun LabelUi(
  stable state: LabelUiState
  stable entityId: String
  stable modifier: Modifier? = @static Companion
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PlaceDetailsUi(
  place: PlaceDetailsModel
  stable modifier: Modifier? = @static Companion
  stable filterText: String? = @static ""
  stable lazyListState: LazyListState? = @dynamic rememberLazyListState(0, 0, $composer, 0, 0b0011)
  stable onItemClick: Function3<@[ParameterName(name = 'entity')] MusicBrainzEntity, @[ParameterName(name = 'id')] String, @[ParameterName(name = 'title')] String?, Unit>? = @static $composer.startReplaceGroup(1849434622)
sourceInformation($composer, "CC(remember):PlaceDetailsUi.kt#9igjgp")
val tmp0_group = $composer.cache(false) {
  {     <unused var>  :   MusicBrainzEntity  ,   <unused var>  :   String  ,   <unused var>  :   String?   ->

  }

}

$composer.endReplaceGroup()
tmp0_group@ly.david.musicsearch.shared.feature.details.place.PlaceDetailsUi
)
scheme("[presenter]") fun present(
  stable <this>: PlacePresenter
): PlaceUiState
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PlaceUi(
  stable state: PlaceUiState
  stable entityId: String
  stable modifier: Modifier? = @static Companion
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun RecordingDetailsUi(
  recording: RecordingDetailsModel
  stable modifier: Modifier? = @static Companion
  stable filterText: String? = @static ""
  stable lazyListState: LazyListState? = @dynamic rememberLazyListState(0, 0, $composer, 0, 0b0011)
)
scheme("[presenter]") fun present(
  stable <this>: RecordingPresenter
): RecordingUiState
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun RecordingUi(
  stable state: RecordingUiState
  stable entityId: String
  stable modifier: Modifier? = @static Companion
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ReleaseDetailsUi(
  release: ReleaseDetailsModel
  stable releaseDetailsUiState: ReleaseDetailsUiState
  stable modifier: Modifier? = @static Companion
  stable filterText: String? = @static ""
  stable onImageClick: Function0<Unit>? = @static $composer.startReplaceGroup(1849434622)
sourceInformation($composer, "CC(remember):ReleaseDetailsUi.kt#9igjgp")
val tmp0_group = $composer.cache(false) {
  {

  }

}

$composer.endReplaceGroup()
tmp0_group@ly.david.musicsearch.shared.feature.details.release.ReleaseDetailsUi
  stable onCollapseExpand: Function0<Unit>? = @static $composer.startReplaceGroup(1849434622)
sourceInformation($composer, "CC(remember):ReleaseDetailsUi.kt#9igjgp")
val tmp1_group = $composer.cache(false) {
  {

  }

}

$composer.endReplaceGroup()
tmp1_group@ly.david.musicsearch.shared.feature.details.release.ReleaseDetailsUi
  stable onItemClick: Function3<@[ParameterName(name = 'entity')] MusicBrainzEntity, @[ParameterName(name = 'id')] String, @[ParameterName(name = 'title')] String?, Unit>? = @static $composer.startReplaceGroup(1849434622)
sourceInformation($composer, "CC(remember):ReleaseDetailsUi.kt#9igjgp")
val tmp2_group = $composer.cache(false) {
  {     <unused var>  :   MusicBrainzEntity  ,   <unused var>  :   String  ,   <unused var>  :   String?   ->

  }

}

$composer.endReplaceGroup()
tmp2_group@ly.david.musicsearch.shared.feature.details.release.ReleaseDetailsUi
)
scheme("[presenter]") fun present(
  stable <this>: ReleasePresenter
): ReleaseUiState
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ReleaseUi(
  stable state: ReleaseUiState
  stable entityId: String
  stable modifier: Modifier? = @static Companion
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun TracksByReleaseUi(
  stable uiState: TracksByReleaseUiState
  stable modifier: Modifier? = @static Companion
  stable onRecordingClick: Function2<@[ParameterName(name = 'id')] String, @[ParameterName(name = 'title')] String, Unit>? = @static $composer.startReplaceGroup(1849434622)
sourceInformation($composer, "CC(remember):TracksByReleaseUi.kt#9igjgp")
val tmp0_group = $composer.cache(false) {
  {     <unused var>  :   String  ,   <unused var>  :   String   ->

  }

}

$composer.endReplaceGroup()
tmp0_group@ly.david.musicsearch.shared.feature.details.release.TracksByReleaseUi
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun TracksByReleaseUi(
  lazyPagingItems: LazyPagingItems<ListItemModel>
  stable modifier: Modifier? = @static Companion
  stable lazyListState: LazyListState? = @dynamic rememberLazyListState(0, 0, $composer, 0, 0b0011)
  unstable collapsedMediumIds: Set<Long>? = @static setOf()
  stable onRecordingClick: Function2<@[ParameterName(name = 'id')] String, @[ParameterName(name = 'title')] String, Unit>? = @static $composer.startReplaceGroup(1849434622)
sourceInformation($composer, "CC(remember):TracksByReleaseUi.kt#9igjgp")
val tmp0_group = $composer.cache(false) {
  {     <unused var>  :   String  ,   <unused var>  :   String   ->

  }

}

$composer.endReplaceGroup()
tmp0_group@ly.david.musicsearch.shared.feature.details.release.TracksByReleaseUi
  stable onToggleMedium: Function1<@[ParameterName(name = 'id')] String, Unit>? = @static $composer.startReplaceGroup(1849434622)
sourceInformation($composer, "CC(remember):TracksByReleaseUi.kt#9igjgp")
val tmp1_group = $composer.cache(false) {
  {     it  :   String   ->

  }

}

$composer.endReplaceGroup()
tmp1_group@ly.david.musicsearch.shared.feature.details.release.TracksByReleaseUi
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ReleaseGroupDetailsUi(
  releaseGroup: ReleaseGroupDetailsModel
  stable modifier: Modifier? = @static Companion
  stable filterText: String? = @static ""
  stable lazyListState: LazyListState? = @dynamic rememberLazyListState(0, 0, $composer, 0, 0b0011)
)
scheme("[presenter]") fun present(
  stable <this>: ReleaseGroupPresenter
): ReleaseGroupUiState
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ReleaseGroupUi(
  stable state: ReleaseGroupUiState
  stable entityId: String
  stable modifier: Modifier? = @static Companion
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun SeriesDetailsUi(
  series: SeriesDetailsModel
  stable modifier: Modifier? = @static Companion
  stable filterText: String? = @static ""
  stable lazyListState: LazyListState? = @dynamic rememberLazyListState(0, 0, $composer, 0, 0b0011)
)
scheme("[presenter]") fun present(
  stable <this>: SeriesPresenter
): SeriesUiState
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun SeriesUi(
  stable state: SeriesUiState
  stable entityId: String
  stable modifier: Modifier? = @static Companion
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun WorkDetailsUi(
  work: WorkDetailsModel
  stable modifier: Modifier? = @static Companion
  stable filterText: String? = @static ""
  stable lazyListState: LazyListState? = @dynamic rememberLazyListState(0, 0, $composer, 0, 0b0011)
)
scheme("[presenter]") fun present(
  stable <this>: WorkPresenter
): WorkUiState
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun WorkUi(
  stable state: WorkUiState
  stable entityId: String
  stable modifier: Modifier? = @static Companion
)
