restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.shared.feature.spotify.history.PreviewSearchSpotifyBottomSheetContent()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.shared.feature.spotify.history.PreviewSpotifyHistoryCard()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.shared.feature.spotify.history.PreviewNowPlayingHistoryUi()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.shared.feature.spotify.history.SearchSpotifyBottomSheetContent(
  spotifyHistory: SpotifyHistoryListItemModel?
  stable searchMusicBrainz: Function2<@[ParameterName(name = 'query')] String, @[ParameterName(name = 'id')] MusicBrainzEntityType, Unit>? = @static <expression>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.shared.feature.spotify.history.SpotifyHistoryCard(
  spotifyHistory: SpotifyHistoryListItemModel
  stable modifier: Modifier? = @static <expression>
  stable onClick: @[ExtensionFunctionType] Function1<SpotifyHistoryListItemModel, Unit>? = @static <expression>
)
open fun ly.david.musicsearch.shared.feature.spotify.history.SpotifyHistoryPresenter.present(
  stable <this>: SpotifyHistoryPresenter
): SpotifyUiState
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.shared.feature.spotify.history.SpotifyHistoryUi(
  stable state: SpotifyUiState
  stable modifier: Modifier? = @static <expression>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.shared.feature.spotify.history.SpotifyHistoryUi(
  lazyPagingItems: LazyPagingItems<ListItemModel>
  stable modifier: Modifier? = @static <expression>
  stable topAppBarFilterState: TopAppBarFilterState? = @dynamic <expression>
  stable lazyListState: LazyListState? = @dynamic <expression>
  stable onBack: Function0<Unit>? = @static <expression>
  stable searchMusicBrainz: Function2<@[ParameterName(name = 'query')] String, @[ParameterName(name = 'entity')] MusicBrainzEntityType, Unit>? = @static <expression>
  stable onMarkForDeletion: Function1<SpotifyHistoryListItemModel, Unit>? = @static <expression>
  stable onUndoMarkForDeletion: Function1<SpotifyHistoryListItemModel, Unit>? = @static <expression>
  stable onDelete: Function1<SpotifyHistoryListItemModel, Unit>? = @static <expression>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.shared.feature.spotify.history.SpotifyHistoryContent(
  lazyPagingItems: LazyPagingItems<ListItemModel>
  stable modifier: Modifier? = @static <expression>
  stable lazyListState: LazyListState? = @dynamic <expression>
  stable searchMusicBrainz: Function2<@[ParameterName(name = 'query')] String, @[ParameterName(name = 'entity')] MusicBrainzEntityType, Unit>? = @static <expression>
  stable onDelete: Function1<SpotifyHistoryListItemModel, Unit>? = @static <expression>
)
