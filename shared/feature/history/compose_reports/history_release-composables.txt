restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.shared.feature.history.PreviewLookupHistoryReleaseGroup(
  stable imageUrl: String? = @static "www.example.com/image"
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.shared.feature.history.PreviewLookupHistoryRelease(
  stable imageUrl: String? = @static "www.example.com/image"
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.shared.feature.history.PreviewLookupHistoryArtist(
  stable imageUrl: String? = @static "www.example.com/image"
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.shared.feature.history.internal.HistoryListItem(
  lookupHistory: LookupHistoryListItemModel
  stable modifier: Modifier? = @static <expression>
  stable onItemClick: Function2<@[ParameterName(name = 'entity')] MusicBrainzEntityType, @[ParameterName(name = 'id')] String, Unit>? = @static <expression>
  stable onDeleteItem: Function1<LookupHistoryListItemModel, Unit>? = @static <expression>
)
open fun ly.david.musicsearch.shared.feature.history.internal.HistoryPresenter.present(
  stable <this>: HistoryPresenter
): HistoryUiState
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.shared.feature.history.internal.HistoryUi(
  stable state: HistoryUiState
  stable modifier: Modifier? = @static <expression>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.shared.feature.history.internal.HistoryUi(
  lazyPagingItems: LazyPagingItems<ListItemModel>
  stable modifier: Modifier? = @static <expression>
  stable lazyListState: LazyListState? = @dynamic <expression>
  stable onItemClick: Function2<@[ParameterName(name = 'entity')] MusicBrainzEntityType, @[ParameterName(name = 'id')] String, Unit>? = @static <expression>
  stable onDeleteItem: Function1<LookupHistoryListItemModel, Unit>? = @static <expression>
)
