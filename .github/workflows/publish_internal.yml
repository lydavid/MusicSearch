name: Publish internal build

# This runs every night,
# so we can expect a new internal release in Google Play if we made any commits during the day.
# However, we may not always get a new GitHub release. That is decided by semantic release.
# eg. If only chores were committed, then there would be no new GitHub release.
# Google Play allows us to reuse versionName, so it currently isn't a problem for
# our releases to be out of sync.
on:
  schedule:
    - cron: '0 7 * * *'
  workflow_dispatch:

jobs:
  # check:
  #   runs-on: ubuntu-latest
  #   outputs:
  #     status: ${{ steps.early_exit.outputs.status }}
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     # Cannot early exit jobs with GHA yet
  #     # Workaround: https://github.com/actions/runner/issues/662#issuecomment-1372855726
  #     - name: Determine whether to exit early based on previous commit
  #       id: early_exit
  #       run: |
  #         status='skip'
  #         if ! (git log --oneline -n 1 | grep -c 'chore\: bump version \[skip ci\]'); then status='deploy'; fi
  #         echo "status=$status" >> $GITHUB_OUTPUT
  #       shell: bash

  publish-internal:
    # needs: check
    # if: needs.check.outputs.status == 'deploy'
    timeout-minutes: 60
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write # This is required for requesting the JWT
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT }}

      - id: setup
        uses: ./.github/actions/setup

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup semantic-release
        run: npm install

      - name: Get next release version
        id: get-next-version
        run: npx semantic-release --dry-run
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}

      # -b preserves our line separator preference
      # - name: Bump version code
      #   run: |
      #     VC=$(grep 'versionCode' app/build.gradle.kts | sed 's/[^0-9]//g')
      #     sed -bi "s/versionCode = $VC/versionCode = $(($VC + 1))/" app/build.gradle.kts
      #   shell: bash

      # - name: Bump version name
      #   if: steps.get-next-version.outputs.new-release-published == 'true'
      #   run: |
      #     VN=$(grep 'versionName' app/build.gradle.kts | sed 's/[^0-9.]//g')
      #     newVN=${{ steps.get-next-version.outputs.new-release-version }}
      #     sed -bi "s/versionName = \"$VN\"/versionName = \"$newVN\"/" app/build.gradle.kts
      #   shell: bash

      # - name: Commit version code bump
      #   uses: stefanzweifel/git-auto-commit-action@v4.16.0
      #   with:
      #     commit_message: 'chore: bump version [skip ci]'
      #     file_pattern: 'app/build.gradle.kts'

      # After this step, the workspace contains credentials file.
      # Take care not to commit it or upload artifacts with it.
      - name: Write to keystore.properties
        run: |
          echo "storePassword=${{ secrets.RELEASE_STORE_PASSWORD }}" >> keystore.properties
          echo "keyPassword=${{ secrets.RELEASE_KEY_PASSWORD }}" >> keystore.properties
        shell: bash

      - name: Convert base64 to files
        run: |
          echo "${{ secrets.GOOGLE_SERVICES_JSON_BASE64 }}" | base64 -d >> app/google-services.json
          echo "${{ secrets.RELEASE_KEYSTORE_JKS_BASE64 }}" | base64 -d >> release-keystore.jks
        shell: bash

      - name: Assemble apk, bundle aab
        run: ./gradlew assemble bundle

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v1.1.1
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.SERVICE_ACCOUNT }}

      # TODO: remove
      - run: fastlane run validate_play_store_json_key json_key:${{ steps.auth.outputs.credentials_file_path }}

      - name: Publish build to Google Play's internal track
        id: publish_play_store
        run: fastlane publish_internal json_key_path:${{ steps.auth.outputs.credentials_file_path }} aab_path:app/build/outputs/bundle/release/app-release.aab
        # uses: r0adkll/upload-google-play@v1.1.1
        # with:
        #   serviceAccountJson: ${{ steps.auth.outputs.credentials_file_path }}
        #   packageName: io.github.lydavid.musicsearch
        #   track: internal
        #   releaseFiles: app/build/outputs/bundle/release/app-release.aab
        #   mappingFile: app/build/outputs/mapping/release/mapping.txt

      - name: Publish to GitHub
        id: publish_github
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
