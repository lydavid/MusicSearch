restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewAreaListItem()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewAreaListItemDisambiguation()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewAreaListItemCountry()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewAreaListItemWorldwide()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewReleaseEvent()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewReleaseEventNoDate()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewArtistListItemSimple()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewArtistListItemCountryCode()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewArtistListItemAllInfoUnvisited()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewArtistListItemAllInfoVisited()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun Preview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewClickableItem()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewClickableItemWithSubtitle()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewClickableItemWithEndIcon()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewClickableItemWithStartIcon()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewClickableItemWithStartEndIcon()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun Preview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewSimpleAlertDialog()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun Preview(
  event: EventListItemModel
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun Preview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun Preview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewFullScreenText()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun Preview(
  instrument: InstrumentListItemModel
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun LabelListItemPreview(
  label: LabelListItemModel
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewCollapsibleListSeparatorHeaderCollapsed()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewCollapsibleListSeparatorHeaderExpanded()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun Preview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun Preview(
  lifeSpan: LifeSpanUiModel
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ListSeparatorHeaderPreview()
fun present(
  stable <this>: LoginPresenterAndroid
): LoginUiState
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun FooterLoadingIndicatorPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun Preview(
  place: PlaceListItemModel
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewCoordinateListItem()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun Preview(
  recording: RecordingListItemModel
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewArtistRelationListItem()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewRecordingRelationListItem()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewUrlRelationListItem()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewReleaseListItem()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewReleaseListItemDisambiguation()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewReleaseListItemDisambiguationCountry()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewReleaseListItemCountry()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewReleaseListItemDateCountryFormatsTracks()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewReleaseListItemCountryDate()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewReleaseListItemDateArtistCredits()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewReleaseListItemMultipleCountries()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewReleaseListItemShowLessInfo()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewReleaseListItemCatalog()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewReleaseListItemVisited()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun Preview(
  track: TrackListItemModel
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewReleaseGroupListItem()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewReleaseGroupListItemWithType()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun Preview(
  series: SeriesListItemModel
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewTextWithHeading()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewDotsFlashing()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewScrollableTopAppBar()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewScrollableTopAppBarWithIcon()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewScrollableTopAppBarWithTabs()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewScrollableTopAppBarLoading()
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable]]") fun TopAppBarWithFilter(
  stable modifier: Modifier? = @static Companion
  stable onBack: Function0<Unit>? = @static $composer.startReplaceableGroup(-1181755301)
val tmp0_group = $composer.cache(false) {
  {

  }

}

$composer.endReplaceableGroup()
tmp0_group@ly.david.musicsearch.ui.common.topappbar.TopAppBarWithFilter
  stable showBackButton: Boolean = @static true
  stable entity: MusicBrainzEntity? = @static null
  stable title: String? = @static ""
  stable subtitle: String? = @static ""
  stable scrollBehavior: TopAppBarScrollBehavior? = @static null
  stable overflowDropdownMenuItems: @[ExtensionFunctionType] Function3<OverflowMenuScope, Composer, Int, Unit>? = @static null
  stable subtitleDropdownMenuItems: @[ExtensionFunctionType] Function3<OverflowMenuScope, Composer, Int, Unit>? = @static null
  stable showFilterIcon: Boolean = @static true
  stable topAppBarFilterState: TopAppBarFilterState? = @dynamic TopAppBarFilterState()
  stable additionalActions: Function2<Composer, Int, Unit>? = @static ComposableSingletons$TopAppBarWithFilter_androidKt.lambda-1
  stable additionalBar: Function2<Composer, Int, Unit>? = @static ComposableSingletons$TopAppBarWithFilter_androidKt.lambda-2
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewTopAppBarWithFilter()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewTopAppBarWithFilterFilterMode()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewTopAppBarWithFilterFilterModeWithText()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewTopAppBarWithFilterNoFilter()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewTopAppBarWithFilterWithTabs()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewTopAppBarWithFilterWithTabsFilterMode()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewUrlsSection()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewWikipediaSection()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun Preview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun EntityIcon(
  stable entity: MusicBrainzEntity
  stable modifier: Modifier? = @static Companion
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ExposedDropdownMenuBox(
  unstable options: List<MusicBrainzEntity>
  stable selectedOption: MusicBrainzEntity
  stable modifier: Modifier? = @static Companion
  stable onSelectOption: Function1<MusicBrainzEntity, Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun AreaListItem(
  area: AreaListItemModel
  stable modifier: Modifier? = @static Companion
  stable showType: Boolean = @static true
  stable onAreaClick: @[ExtensionFunctionType] Function1<AreaListItemModel, Unit>? = @static $composer.startReplaceableGroup(-843590148)
val tmp0_group = $composer.cache(false) {
  {

  }

}

$composer.endReplaceableGroup()
tmp0_group@ly.david.musicsearch.ui.common.area.AreaListItem
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ArtistListItem(
  artist: ArtistListItemModel
  stable modifier: Modifier? = @static Companion
  stable onArtistClick: @[ExtensionFunctionType] Function1<ArtistListItemModel, Unit>? = @static $composer.startReplaceableGroup(1938671548)
val tmp0_group = $composer.cache(false) {
  {

  }

}

$composer.endReplaceableGroup()
tmp0_group@ly.david.musicsearch.ui.common.artist.ArtistListItem
)
fun present(
  stable <this>: ArtistsByEntityPresenter
): ArtistsByEntityUiState
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ArtistsListScreen(
  stable lazyListState: LazyListState
  lazyPagingItems: LazyPagingItems<ArtistListItemModel>
  stable modifier: Modifier? = @static Companion
  stable onItemClick: Function3<@[ParameterName(name = 'entity')] MusicBrainzEntity, String, String, Unit>? = @static $composer.startReplaceableGroup(-1619892990)
val tmp0_group = $composer.cache(false) {
  {     <unused var>  :   MusicBrainzEntity  ,   <unused var>  :   String  ,   <unused var>  :   String   ->

  }

}

$composer.endReplaceableGroup()
tmp0_group@ly.david.musicsearch.ui.common.artist.ArtistsListScreen
  stable onDeleteFromCollection: Function2<@[ParameterName(name = 'entityId')] String, @[ParameterName(name = 'name')] String, Unit>? = @static null
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun RetryButton(
  stable modifier: Modifier? = @static Companion
  stable onClick: Function0<Unit>? = @static $composer.startReplaceableGroup(1527852165)
val tmp0_group = $composer.cache(false) {
  {

  }

}

$composer.endReplaceableGroup()
tmp0_group@ly.david.musicsearch.ui.common.button.RetryButton
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ClickableItem(
  stable title: String
  stable modifier: Modifier? = @static Companion
  stable subtitle: String? = @static null
  stable startIcon: ImageVector? = @static null
  stable endIcon: ImageVector? = @static null
  stable onClick: Function0<Unit>? = @static $composer.startReplaceableGroup(-132850271)
val tmp0_group = $composer.cache(false) {
  {

  }

}

$composer.endReplaceableGroup()
tmp0_group@ly.david.musicsearch.ui.common.component.ClickableItem
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun MultipleChoiceDialog(
  stable title: String
  unstable choices: List<String>
  stable selectedChoiceIndex: Int
  stable modifier: Modifier? = @static Companion
  stable onSelectChoiceIndex: Function1<Int, Unit>? = @static $composer.startReplaceableGroup(776367708)
val tmp0_group = $composer.cache(false) {
  {     it  :   Int   ->

  }

}

$composer.endReplaceableGroup()
tmp0_group@ly.david.musicsearch.ui.common.dialog.MultipleChoiceDialog
  stable onDismiss: Function0<Unit>? = @static $composer.startReplaceableGroup(776368732)
val tmp1_group = $composer.cache(false) {
  {

  }

}

$composer.endReplaceableGroup()
tmp1_group@ly.david.musicsearch.ui.common.dialog.MultipleChoiceDialog
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun SimpleAlertDialog(
  stable title: String
  stable confirmText: String
  stable dismissText: String
  stable onDismiss: Function0<Unit>? = @static $composer.startReplaceableGroup(1634998579)
val tmp0_group = $composer.cache(false) {
  {

  }

}

$composer.endReplaceableGroup()
tmp0_group@ly.david.musicsearch.ui.common.dialog.SimpleAlertDialog
  stable onConfirmClick: Function0<Unit>? = @static $composer.startReplaceableGroup(1634999763)
val tmp1_group = $composer.cache(false) {
  {

  }

}

$composer.endReplaceableGroup()
tmp1_group@ly.david.musicsearch.ui.common.dialog.SimpleAlertDialog
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun EventListItem(
  event: EventListItemModel
  stable modifier: Modifier? = @static Companion
  stable onEventClick: @[ExtensionFunctionType] Function1<EventListItemModel, Unit>? = @static $composer.startReplaceableGroup(-115951052)
val tmp0_group = $composer.cache(false) {
  {

  }

}

$composer.endReplaceableGroup()
tmp0_group@ly.david.musicsearch.ui.common.event.EventListItem
)
fun present(
  stable <this>: EventsByEntityPresenter
): EventsByEntityUiState
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun EventsListScreen(
  stable lazyListState: LazyListState
  lazyPagingItems: LazyPagingItems<EventListItemModel>
  stable modifier: Modifier? = @static Companion
  stable onEventClick: Function3<@[ParameterName(name = 'entity')] MusicBrainzEntity, String, String, Unit>? = @static $composer.startReplaceableGroup(1636575082)
val tmp0_group = $composer.cache(false) {
  {     <unused var>  :   MusicBrainzEntity  ,   <unused var>  :   String  ,   <unused var>  :   String   ->

  }

}

$composer.endReplaceableGroup()
tmp0_group@ly.david.musicsearch.ui.common.event.EventsListScreen
  stable onDeleteFromCollection: Function2<@[ParameterName(name = 'entityId')] String, @[ParameterName(name = 'name')] String, Unit>? = @static null
)
restartable skippable fun DetailsWithErrorHandling(
  detailsModel: T?
  stable onRefresh: Function0<Unit>
  stable modifier: Modifier? = @static Companion
  stable showLoading: Boolean = @static false
  stable showError: Boolean = @static false
  stable detailsScreen: Function3<T, Composer, Int, Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable]]") fun FullScreenContent(
  stable modifier: Modifier? = @static Companion
  stable content: @[ExtensionFunctionType] Function3<ColumnScope, Composer, Int, Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun FullScreenErrorWithRetry(
  stable modifier: Modifier? = @static Companion
  unstable throwable: Throwable? = @static null
  stable onClick: Function0<Unit>? = @static $composer.startReplaceableGroup(738794789)
val tmp0_group = $composer.cache(false) {
  {

  }

}

$composer.endReplaceableGroup()
tmp0_group@ly.david.musicsearch.ui.common.fullscreen.FullScreenErrorWithRetry
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun FullScreenLoadingIndicator(
  stable modifier: Modifier? = @static Companion
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun FullScreenText(
  stable text: String
  stable modifier: Modifier? = @static Companion
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun InstrumentListItem(
  instrument: InstrumentListItemModel
  stable modifier: Modifier? = @static Companion
  stable onInstrumentClick: @[ExtensionFunctionType] Function1<InstrumentListItemModel, Unit>? = @static $composer.startReplaceableGroup(-1558401604)
val tmp0_group = $composer.cache(false) {
  {

  }

}

$composer.endReplaceableGroup()
tmp0_group@ly.david.musicsearch.ui.common.instrument.InstrumentListItem
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun LabelListItem(
  label: LabelListItemModel
  stable modifier: Modifier? = @static Companion
  stable onLabelClick: @[ExtensionFunctionType] Function1<LabelListItemModel, Unit>? = @static $composer.startReplaceableGroup(-1351566328)
val tmp0_group = $composer.cache(false) {
  {

  }

}

$composer.endReplaceableGroup()
tmp0_group@ly.david.musicsearch.ui.common.label.LabelListItem
)
fun present(
  stable <this>: LabelsByEntityPresenter
): LabelsByEntityUiState
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun LabelsListScreen(
  lazyPagingItems: LazyPagingItems<LabelListItemModel>
  stable modifier: Modifier? = @static Companion
  stable lazyListState: LazyListState? = @dynamic rememberLazyListState(0, 0, $composer, 0, 0b0011)
  stable onLabelClick: Function3<@[ParameterName(name = 'entity')] MusicBrainzEntity, String, String, Unit>? = @static $composer.startReplaceableGroup(-751281738)
val tmp0_group = $composer.cache(false) {
  {     <unused var>  :   MusicBrainzEntity  ,   <unused var>  :   String  ,   <unused var>  :   String   ->

  }

}

$composer.endReplaceableGroup()
tmp0_group@ly.david.musicsearch.ui.common.label.LabelsListScreen
  stable onDeleteFromCollection: Function2<@[ParameterName(name = 'entityId')] String, @[ParameterName(name = 'name')] String, Unit>? = @static null
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun CollapsibleListSeparatorHeader(
  stable text: String
  stable collapsed: Boolean
  stable modifier: Modifier? = @static Companion
  stable onClick: Function0<Unit>? = @static $composer.startReplaceableGroup(-810958556)
val tmp0_group = $composer.cache(false) {
  {

  }

}

$composer.endReplaceableGroup()
tmp0_group@ly.david.musicsearch.ui.common.listitem.CollapsibleListSeparatorHeader
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DisambiguationText(
  stable disambiguation: String?
  stable modifier: Modifier? = @static Companion
  stable bold: Boolean = @static false
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun LifeSpanText(
  lifeSpan: LifeSpanUiModel?
  stable heading: String
  stable modifier: Modifier? = @static Companion
  stable beginHeading: String? = @static ""
  stable endHeading: String? = @static ""
  stable filterText: String? = @static ""
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ListSeparatorHeader(
  stable text: String
  stable modifier: Modifier? = @static Companion
)
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable]]") fun SwipeToDeleteListItem(
  stable modifier: Modifier? = @static Companion
  stable disable: Boolean = @static false
  stable onDelete: Function0<Unit>? = @static $composer.startReplaceableGroup(-789450085)
val tmp0_group = $composer.cache(false) {
  {

  }

}

$composer.endReplaceableGroup()
tmp0_group@ly.david.musicsearch.ui.common.listitem.SwipeToDeleteListItem
  stable content: @[ExtensionFunctionType] Function3<RowScope, Composer, Int, Unit>? = @static ComposableSingletons$SwipeToDeleteListItemKt.lambda-1
)
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable]]") fun SwipeToDeleteListItem(
  stable dismissContent: @[ExtensionFunctionType] Function3<RowScope, Composer, Int, Unit>
  stable modifier: Modifier? = @static Companion
  stable onDelete: Function0<Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun SwipeToDeleteBackground(
  stable alignment: Alignment
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun FooterLoadingIndicator()
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable]]") fun ScreenWithPagingLoadingAndError(
  lazyPagingItems: LazyPagingItems<T>
  stable modifier: Modifier? = @static Companion
  stable lazyListState: LazyListState? = @dynamic rememberLazyListState(0, 0, $composer, 0, 0b0011)
  stable customNoResultsText: String? = @static ""
  stable keyed: Boolean = @static true
  stable itemContent: @[ExtensionFunctionType] Function4<LazyItemScope, @[ParameterName(name = 'value')] T?, Composer, Int, Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun CoordinateListItem(
  coordinates: CoordinatesUiModel
  stable modifier: Modifier? = @static Companion
  stable label: String? = @static null
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PlaceListItem(
  place: PlaceListItemModel
  stable modifier: Modifier? = @static Companion
  stable onPlaceClick: @[ExtensionFunctionType] Function1<PlaceListItemModel, Unit>? = @static $composer.startReplaceableGroup(1445177550)
val tmp0_group = $composer.cache(false) {
  {

  }

}

$composer.endReplaceableGroup()
tmp0_group@ly.david.musicsearch.ui.common.place.PlaceListItem
)
fun present(
  stable <this>: PlacesByEntityPresenter
): PlacesByEntityUiState
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PlacesListScreen(
  stable lazyListState: LazyListState
  lazyPagingItems: LazyPagingItems<PlaceListItemModel>
  stable modifier: Modifier? = @static Companion
  stable onPlaceClick: Function3<@[ParameterName(name = 'entity')] MusicBrainzEntity, String, String, Unit>? = @static $composer.startReplaceableGroup(-982093328)
val tmp0_group = $composer.cache(false) {
  {     <unused var>  :   MusicBrainzEntity  ,   <unused var>  :   String  ,   <unused var>  :   String   ->

  }

}

$composer.endReplaceableGroup()
tmp0_group@ly.david.musicsearch.ui.common.place.PlacesListScreen
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun RecordingListItem(
  recording: RecordingListItemModel
  stable modifier: Modifier? = @static Companion
  stable onRecordingClick: @[ExtensionFunctionType] Function1<RecordingListItemModel, Unit>? = @static $composer.startReplaceableGroup(-2024562430)
val tmp0_group = $composer.cache(false) {
  {

  }

}

$composer.endReplaceableGroup()
tmp0_group@ly.david.musicsearch.ui.common.recording.RecordingListItem
)
fun present(
  stable <this>: RecordingsByEntityPresenter
): RecordingsByEntityUiState
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun RecordingsListScreen(
  lazyPagingItems: LazyPagingItems<RecordingListItemModel>
  stable modifier: Modifier? = @static Companion
  stable lazyListState: LazyListState? = @dynamic rememberLazyListState(0, 0, $composer, 0, 0b0011)
  stable onRecordingClick: Function3<@[ParameterName(name = 'entity')] MusicBrainzEntity, String, String, Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun RelationListItem(
  relation: RelationListItemModel
  stable modifier: Modifier? = @static Companion
  stable onItemClick: Function3<@[ParameterName(name = 'entity')] MusicBrainzEntity, @[ParameterName(name = 'id')] String, @[ParameterName(name = 'title')] String?, Unit>? = @static $composer.startReplaceableGroup(310180904)
val tmp0_group = $composer.cache(false) {
  {     <unused var>  :   MusicBrainzEntity  ,   <unused var>  :   String  ,   <unused var>  :   String?   ->

  }

}

$composer.endReplaceableGroup()
tmp0_group@ly.david.musicsearch.ui.common.relation.RelationListItem
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun RelationsListScreen(
  lazyPagingItems: LazyPagingItems<RelationListItemModel>
  stable modifier: Modifier? = @static Companion
  stable lazyListState: LazyListState? = @dynamic rememberLazyListState(0, 0, $composer, 0, 0b0011)
  stable onItemClick: Function3<@[ParameterName(name = 'entity')] MusicBrainzEntity, @[ParameterName(name = 'id')] String, @[ParameterName(name = 'title')] String?, Unit>? = @static $composer.startReplaceableGroup(179092770)
val tmp0_group = $composer.cache(false) {
  {     <unused var>  :   MusicBrainzEntity  ,   <unused var>  :   String  ,   <unused var>  :   String?   ->

  }

}

$composer.endReplaceableGroup()
tmp0_group@ly.david.musicsearch.ui.common.relation.RelationsListScreen
)
fun present(
  stable <this>: RelationsPresenter
): RelationsUiState
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ReleaseListItem(
  release: ReleaseListItemModel
  stable modifier: Modifier? = @static Companion
  stable showMoreInfo: Boolean = @static true
  unstable requestForMissingCoverArtUrl: SuspendFunction0<Unit>? = @dynamic $composer.startReplaceableGroup(-214179058)
val tmp0_group = $composer.cache(false) {
  {

  }

}

$composer.endReplaceableGroup()
tmp0_group@ly.david.musicsearch.ui.common.release.ReleaseListItem
  stable onClick: @[ExtensionFunctionType] Function1<ReleaseListItemModel, Unit>? = @static $composer.startReplaceableGroup(-214177426)
val tmp1_group = $composer.cache(false) {
  {

  }

}

$composer.endReplaceableGroup()
tmp1_group@ly.david.musicsearch.ui.common.release.ReleaseListItem
)
fun present(
  stable <this>: ReleasesByEntityPresenter
): ReleasesByEntityUiState
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ReleasesListScreen(
  lazyPagingItems: LazyPagingItems<ReleaseListItemModel>
  stable modifier: Modifier? = @static Companion
  stable lazyListState: LazyListState? = @dynamic rememberLazyListState(0, 0, $composer, 0, 0b0011)
  stable showMoreInfo: Boolean = @static true
  stable onReleaseClick: Function3<@[ParameterName(name = 'entity')] MusicBrainzEntity, String, String, Unit>? = @static $composer.startReplaceableGroup(-502859760)
val tmp0_group = $composer.cache(false) {
  {     <unused var>  :   MusicBrainzEntity  ,   <unused var>  :   String  ,   <unused var>  :   String   ->

  }

}

$composer.endReplaceableGroup()
tmp0_group@ly.david.musicsearch.ui.common.release.ReleasesListScreen
  stable onDeleteFromCollection: Function2<@[ParameterName(name = 'entityId')] String, @[ParameterName(name = 'name')] String, Unit>? = @static null
  unstable requestForMissingCoverArtUrl: SuspendFunction1<@[ParameterName(name = 'id')] String, Unit>? = @dynamic $composer.startReplaceableGroup(-502854620)
val tmp1_group = $composer.cache(false) {
  {     it  :   String   ->

  }

}

$composer.endReplaceableGroup()
tmp1_group@ly.david.musicsearch.ui.common.release.ReleasesListScreen
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ReleaseGroupListItem(
  releaseGroup: ReleaseGroupListItemModel
  stable showType: Boolean
  stable modifier: Modifier? = @static Companion
  unstable requestForMissingCoverArtUrl: SuspendFunction0<Unit>? = @dynamic $composer.startReplaceableGroup(1287277340)
val tmp0_group = $composer.cache(false) {
  {

  }

}

$composer.endReplaceableGroup()
tmp0_group@ly.david.musicsearch.ui.common.releasegroup.ReleaseGroupListItem
  stable onClick: @[ExtensionFunctionType] Function1<ReleaseGroupListItemModel, Unit>? = @static $composer.startReplaceableGroup(1287279132)
val tmp1_group = $composer.cache(false) {
  {

  }

}

$composer.endReplaceableGroup()
tmp1_group@ly.david.musicsearch.ui.common.releasegroup.ReleaseGroupListItem
)
fun present(
  stable <this>: ReleaseGroupsByEntityPresenter
): ReleaseGroupsByEntityUiState
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ReleaseGroupsListScreen(
  lazyPagingItems: LazyPagingItems<ListItemModel>
  stable modifier: Modifier? = @static Companion
  stable lazyListState: LazyListState? = @dynamic rememberLazyListState(0, 0, $composer, 0, 0b0011)
  stable onReleaseGroupClick: Function3<@[ParameterName(name = 'entity')] MusicBrainzEntity, String, String, Unit>? = @static $composer.startReplaceableGroup(1945146914)
val tmp0_group = $composer.cache(false) {
  {     <unused var>  :   MusicBrainzEntity  ,   <unused var>  :   String  ,   <unused var>  :   String   ->

  }

}

$composer.endReplaceableGroup()
tmp0_group@ly.david.musicsearch.ui.common.releasegroup.ReleaseGroupsListScreen
  stable onDeleteFromCollection: Function2<@[ParameterName(name = 'entityId')] String, @[ParameterName(name = 'name')] String, Unit>? = @static null
  unstable requestForMissingCoverArtUrl: SuspendFunction1<@[ParameterName(name = 'id')] String, Unit>? = @dynamic $composer.startReplaceableGroup(1945152054)
val tmp1_group = $composer.cache(false) {
  {     it  :   String   ->

  }

}

$composer.endReplaceableGroup()
tmp1_group@ly.david.musicsearch.ui.common.releasegroup.ReleaseGroupsListScreen
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun SeriesListItem(
  series: SeriesListItemModel
  stable modifier: Modifier? = @static Companion
  stable onSeriesClick: @[ExtensionFunctionType] Function1<SeriesListItemModel, Unit>? = @static $composer.startReplaceableGroup(1089498812)
val tmp0_group = $composer.cache(false) {
  {

  }

}

$composer.endReplaceableGroup()
tmp0_group@ly.david.musicsearch.ui.common.series.SeriesListItem
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun TextWithHeading(
  stable heading: String
  stable text: String
  stable modifier: Modifier? = @static Companion
  stable filterText: String? = @static ""
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun AddToCollectionMenuItem(
  <this>: OverflowMenuScope
  stable entity: MusicBrainzEntity
  stable entityId: String
  stable overlayHost: OverlayHost
  unstable coroutineScope: CoroutineScope
  stable snackbarHostState: SnackbarHostState
  stable modifier: Modifier? = @static Companion
  stable onLoginClick: Function0<Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun CopyToClipboardMenuItem(
  <this>: OverflowMenuScope
  stable entityId: String
  stable modifier: Modifier? = @static Companion
)
scheme("[androidx.compose.ui.UiComposable]") fun Dot(
  stable alpha: Float
)
fun animateAlphaWithDelay(
  stable delay: Int
): State<Float>
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DotsFlashing(
  stable modifier: Modifier? = @static Companion
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun OpenInBrowserMenuItem(
  <this>: OverflowMenuScope
  stable entity: MusicBrainzEntity
  stable entityId: String
  stable modifier: Modifier? = @static Companion
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun RefreshMenuItem(
  <this>: OverflowMenuScope
  stable modifier: Modifier? = @static Companion
  stable onClick: Function0<Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable]]") fun ScrollableTopAppBar(
  stable modifier: Modifier? = @static Companion
  stable onBack: Function0<Unit>? = @static $composer.startReplaceableGroup(-1560652714)
val tmp0_group = $composer.cache(false) {
  {

  }

}

$composer.endReplaceableGroup()
tmp0_group@ly.david.musicsearch.ui.common.topappbar.ScrollableTopAppBar
  stable showBackButton: Boolean = @static true
  stable entity: MusicBrainzEntity? = @static null
  stable title: String? = @static ""
  stable subtitle: String? = @static ""
  stable scrollBehavior: TopAppBarScrollBehavior? = @static null
  stable actions: Function2<Composer, Int, Unit>? = @static ComposableSingletons$ScrollableTopAppBarKt.lambda-1
  stable overflowDropdownMenuItems: @[ExtensionFunctionType] Function3<OverflowMenuScope, Composer, Int, Unit>? = @static null
  stable subtitleDropdownMenuItems: @[ExtensionFunctionType] Function3<OverflowMenuScope, Composer, Int, Unit>? = @static null
  stable additionalBar: Function2<Composer, Int, Unit>? = @static ComposableSingletons$ScrollableTopAppBarKt.lambda-2
)
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable]]") fun TitleAndSubtitle(
  stable title: String
  stable entity: MusicBrainzEntity? = @static null
  stable subtitle: String? = @static ""
  stable subtitleDropdownMenuItems: @[ExtensionFunctionType] Function3<OverflowMenuScope, Composer, Int, Unit>? = @static null
)
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable]]") fun SubtitleWithOverflow(
  stable subtitle: String? = @static ""
  stable subtitleDropdownMenuItems: @[ExtensionFunctionType] Function3<OverflowMenuScope, Composer, Int, Unit>? = @static null
)
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable]]") fun OverflowMenu(
  stable overflowDropdownMenuItems: @[ExtensionFunctionType] Function3<OverflowMenuScope, Composer, Int, Unit>? = @static null
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun TabsBar(
  stable modifier: Modifier? = @static Companion
  unstable tabsTitle: List<String>? = @static listOf()
  stable selectedTabIndex: Int = @static 0
  stable onSelectTabIndex: Function1<Int, Unit>? = @static $composer.startReplaceableGroup(773941771)
val tmp0_group = $composer.cache(false) {
  {     it  :   Int   ->

  }

}

$composer.endReplaceableGroup()
tmp0_group@ly.david.musicsearch.ui.common.topappbar.TabsBar
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ToggleMenuItem(
  <this>: OverflowMenuScope
  stable toggleOnText: String
  stable toggleOffText: String
  stable toggled: Boolean
  stable onToggle: Function1<Boolean, Unit>
  stable modifier: Modifier? = @static Companion
)
fun rememberTopAppBarFilterState(
  stable initialFilterText: String? = @static ""
  stable initialIsFilterMode: Boolean = @static false
): TopAppBarFilterState
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable]]") fun TopAppBarWithFilterInternal(
  stable modifier: Modifier? = @static Companion
  stable onBack: Function0<Unit>? = @static $composer.startReplaceableGroup(-1763708744)
val tmp0_group = $composer.cache(false) {
  {

  }

}

$composer.endReplaceableGroup()
tmp0_group@ly.david.musicsearch.ui.common.topappbar.TopAppBarWithFilterInternal
  stable showBackButton: Boolean = @static true
  stable entity: MusicBrainzEntity? = @static null
  stable title: String? = @static ""
  stable subtitle: String? = @static ""
  stable scrollBehavior: TopAppBarScrollBehavior? = @static null
  stable overflowDropdownMenuItems: @[ExtensionFunctionType] Function3<OverflowMenuScope, Composer, Int, Unit>? = @static null
  stable subtitleDropdownMenuItems: @[ExtensionFunctionType] Function3<OverflowMenuScope, Composer, Int, Unit>? = @static null
  stable showFilterIcon: Boolean = @static true
  stable topAppBarFilterState: TopAppBarFilterState? = @dynamic TopAppBarFilterState()
  stable additionalActions: Function2<Composer, Int, Unit>? = @static ComposableSingletons$TopAppBarWithFilterKt.lambda-1
  stable additionalBar: Function2<Composer, Int, Unit>? = @static ComposableSingletons$TopAppBarWithFilterKt.lambda-2
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun TrackListItem(
  track: TrackListItemModel
  stable modifier: Modifier? = @static Companion
  stable onRecordingClick: Function2<@[ParameterName(name = 'id')] String, @[ParameterName(name = 'title')] String, Unit>? = @static $composer.startReplaceableGroup(172639167)
val tmp0_group = $composer.cache(false) {
  {     <unused var>  :   String  ,   <unused var>  :   String   ->

  }

}

$composer.endReplaceableGroup()
tmp0_group@ly.david.musicsearch.ui.common.track.TrackListItem
)
fun present(
  stable <this>: TracksByReleasePresenter
): TracksByReleaseUiState
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun UrlsSection(
  unstable urls: List<RelationListItemModel>
  stable modifier: Modifier? = @static Companion
  stable filterText: String? = @static ""
  stable onItemClick: Function3<@[ParameterName(name = 'entity')] MusicBrainzEntity, @[ParameterName(name = 'id')] String, @[ParameterName(name = 'title')] String?, Unit>? = @static $composer.startReplaceableGroup(-623378901)
val tmp0_group = $composer.cache(false) {
  {     <unused var>  :   MusicBrainzEntity  ,   <unused var>  :   String  ,   <unused var>  :   String?   ->

  }

}

$composer.endReplaceableGroup()
tmp0_group@ly.david.musicsearch.ui.common.url.UrlsSection
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun WikipediaSection(
  extract: WikipediaExtract?
  stable modifier: Modifier? = @static Companion
  stable filterText: String? = @static ""
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun WorkListItem(
  work: WorkListItemModel
  stable modifier: Modifier? = @static Companion
  stable onWorkClick: @[ExtensionFunctionType] Function1<WorkListItemModel, Unit>? = @static $composer.startReplaceableGroup(-411832324)
val tmp0_group = $composer.cache(false) {
  {

  }

}

$composer.endReplaceableGroup()
tmp0_group@ly.david.musicsearch.ui.common.work.WorkListItem
)
fun present(
  stable <this>: WorksByEntityPresenter
): WorksByEntityUiState
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun WorksListScreen(
  lazyPagingItems: LazyPagingItems<WorkListItemModel>
  stable modifier: Modifier? = @static Companion
  stable lazyListState: LazyListState? = @dynamic rememberLazyListState(0, 0, $composer, 0, 0b0011)
  stable onWorkClick: Function3<@[ParameterName(name = 'entity')] MusicBrainzEntity, String, String, Unit>? = @static $composer.startReplaceableGroup(468744770)
val tmp0_group = $composer.cache(false) {
  {     <unused var>  :   MusicBrainzEntity  ,   <unused var>  :   String  ,   <unused var>  :   String   ->

  }

}

$composer.endReplaceableGroup()
tmp0_group@ly.david.musicsearch.ui.common.work.WorksListScreen
  stable onDeleteFromCollection: Function2<@[ParameterName(name = 'entityId')] String, @[ParameterName(name = 'name')] String, Unit>? = @static null
)
