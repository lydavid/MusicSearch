unstable class LifeSpanPreviewParameterProvider {
  unstable val values: Sequence<LifeSpanUiModel>
  <runtime stability> = Unstable
}
stable class LoginPresenterAndroid {
  unstable val musicBrainzLoginActivityResultContract: MusicBrainzLoginActivityResultContract
  unstable val login: LoginAndroid
  <runtime stability> = Stable
}
stable class AreasByEntityPresenter {
  runtime val getAreasByEntity: GetAreasByEntity
  <runtime stability> = Stable
}
stable class Get {
  stable val byEntityId: String
  stable val byEntity: MusicBrainzEntity
  stable val isRemote: Boolean
  <runtime stability> = Stable
}
stable class UpdateQuery {
  stable val query: String
  <runtime stability> = Stable
}
stable class AreasByEntityUiState {
  runtime val lazyPagingItems: LazyPagingItems<AreaListItemModel>
  stable val lazyListState: LazyListState
  stable val eventSink: Function1<AreasByEntityUiEvent, Unit>
}
stable class ArtistsByEntityPresenter {
  runtime val getArtistsByEntity: GetArtistsByEntity
  <runtime stability> = Stable
}
stable class Get {
  stable val byEntityId: String
  stable val byEntity: MusicBrainzEntity
  stable val isRemote: Boolean
  <runtime stability> = Stable
}
stable class UpdateQuery {
  stable val query: String
  <runtime stability> = Stable
}
stable class ArtistsByEntityUiState {
  runtime val lazyPagingItems: LazyPagingItems<ArtistListItemModel>
  stable val lazyListState: LazyListState
  stable val showMoreInfo: Boolean
  stable val eventSink: Function1<ArtistsByEntityUiEvent, Unit>
}
stable class EventsByEntityPresenter {
  runtime val getEventsByEntity: GetEventsByEntity
  <runtime stability> = Stable
}
stable class Get {
  stable val byEntityId: String
  stable val byEntity: MusicBrainzEntity
  stable val isRemote: Boolean
  <runtime stability> = Stable
}
stable class UpdateQuery {
  stable val query: String
  <runtime stability> = Stable
}
stable class EventsByEntityUiState {
  runtime val lazyPagingItems: LazyPagingItems<EventListItemModel>
  stable val lazyListState: LazyListState
  stable val eventSink: Function1<EventsByEntityUiEvent, Unit>
}
stable class InstrumentsByEntityPresenter {
  runtime val getInstrumentsByEntity: GetInstrumentsByEntity
  <runtime stability> = Stable
}
stable class Get {
  stable val byEntityId: String
  stable val byEntity: MusicBrainzEntity
  stable val isRemote: Boolean
  <runtime stability> = Stable
}
stable class UpdateQuery {
  stable val query: String
  <runtime stability> = Stable
}
stable class InstrumentsByEntityUiState {
  runtime val lazyPagingItems: LazyPagingItems<InstrumentListItemModel>
  stable val lazyListState: LazyListState
  stable val eventSink: Function1<InstrumentsByEntityUiEvent, Unit>
}
stable class LabelsByEntityPresenter {
  runtime val getLabelsByEntity: GetLabelsByEntity
  <runtime stability> = Stable
}
stable class Get {
  stable val byEntityId: String
  stable val byEntity: MusicBrainzEntity
  stable val isRemote: Boolean
  <runtime stability> = Stable
}
stable class UpdateQuery {
  stable val query: String
  <runtime stability> = Stable
}
stable class LabelsByEntityUiState {
  runtime val lazyPagingItems: LazyPagingItems<LabelListItemModel>
  stable val lazyListState: LazyListState
  stable val eventSink: Function1<LabelsByEntityUiEvent, Unit>
}
stable class StartLogin {
  <runtime stability> = Stable
}
stable class DismissDialog {
  <runtime stability> = Stable
}
stable class SubmitAuthCode {
  stable val authCode: String
  <runtime stability> = Stable
}
stable class LoginUiState {
  stable val showDialog: Boolean
  stable val eventSink: Function1<LoginUiEvent, Unit>
  <runtime stability> = Stable
}
stable class PlacesByEntityPresenter {
  runtime val getPlacesByEntity: GetPlacesByEntity
  <runtime stability> = Stable
}
stable class Get {
  stable val byEntityId: String
  stable val byEntity: MusicBrainzEntity
  stable val isRemote: Boolean
  <runtime stability> = Stable
}
stable class UpdateQuery {
  stable val query: String
  <runtime stability> = Stable
}
stable class PlacesByEntityUiState {
  runtime val lazyPagingItems: LazyPagingItems<PlaceListItemModel>
  stable val lazyListState: LazyListState
  stable val eventSink: Function1<PlacesByEntityUiEvent, Unit>
}
stable class RecordingsByEntityPresenter {
  runtime val getRecordingsByEntity: GetRecordingsByEntity
  <runtime stability> = Stable
}
stable class Get {
  stable val byEntityId: String
  stable val byEntity: MusicBrainzEntity
  stable val isRemote: Boolean
  <runtime stability> = Stable
}
stable class UpdateQuery {
  stable val query: String
  <runtime stability> = Stable
}
stable class RecordingsByEntityUiState {
  runtime val lazyPagingItems: LazyPagingItems<RecordingListItemModel>
  stable val lazyListState: LazyListState
  stable val eventSink: Function1<RecordingsByEntityUiEvent, Unit>
}
stable class RelationsPresenterImpl {
  runtime val getEntityRelationships: GetEntityRelationships
  <runtime stability> = Stable
}
stable class GetRelations {
  stable val byEntityId: String
  stable val byEntity: MusicBrainzEntity
  <runtime stability> = Stable
}
stable class UpdateQuery {
  stable val query: String
  <runtime stability> = Stable
}
stable class RelationsUiState {
  runtime val lazyPagingItems: LazyPagingItems<RelationListItemModel>
  stable val lazyListState: LazyListState
  stable val eventSink: Function1<RelationsUiEvent, Unit>
}
stable class ReleasesByEntityPresenter {
  runtime val getReleasesByEntity: GetReleasesByEntity
  unstable val appPreferences: AppPreferences
  unstable val releaseImageRepository: ReleaseImageRepository
  <runtime stability> = Stable
}
stable class Get {
  stable val byEntityId: String
  stable val byEntity: MusicBrainzEntity
  stable val isRemote: Boolean
  <runtime stability> = Stable
}
stable class UpdateQuery {
  stable val query: String
  <runtime stability> = Stable
}
stable class UpdateShowMoreInfoInReleaseListItem {
  stable val showMore: Boolean
  <runtime stability> = Stable
}
stable class RequestForMissingCoverArtUrl {
  stable val entityId: String
  <runtime stability> = Stable
}
stable class ReleasesByEntityUiState {
  runtime val lazyPagingItems: LazyPagingItems<ReleaseListItemModel>
  stable val lazyListState: LazyListState
  stable val showMoreInfo: Boolean
  stable val eventSink: Function1<ReleasesByEntityUiEvent, Unit>
}
stable class ReleaseGroupsByEntityPresenter {
  runtime val getReleaseGroupsByEntity: GetReleaseGroupsByEntity
  unstable val appPreferences: AppPreferences
  unstable val releaseGroupImageRepository: ReleaseGroupImageRepository
  <runtime stability> = Stable
}
stable class Get {
  stable val byEntityId: String
  stable val byEntity: MusicBrainzEntity
  stable val isRemote: Boolean
  <runtime stability> = Stable
}
stable class UpdateQuery {
  stable val query: String
  <runtime stability> = Stable
}
stable class UpdateSortReleaseGroupListItem {
  stable val sort: Boolean
  <runtime stability> = Stable
}
stable class RequestForMissingCoverArtUrl {
  stable val entityId: String
  <runtime stability> = Stable
}
stable class ReleaseGroupsByEntityUiState {
  runtime val lazyPagingItems: LazyPagingItems<ListItemModel>
  stable val lazyListState: LazyListState
  stable val sort: Boolean
  stable val eventSink: Function1<ReleaseGroupsByEntityUiEvent, Unit>
}
stable class SearchScreen {
  stable val query: String?
  stable val entity: MusicBrainzEntity?
  <runtime stability> = Stable
}
stable class ArtistCollaborationScreen {
  stable val id: String
  stable val name: String
  <runtime stability> = Stable
}
stable class HistoryScreen {
  <runtime stability> = Stable
}
stable class CollectionListScreen {
  stable val newCollectionId: String?
  stable val newCollectionName: String?
  stable val newCollectionEntity: MusicBrainzEntity?
  <runtime stability> = Stable
}
stable class CollectionScreen {
  stable val collectionId: String
  stable val collectableId: String?
  <runtime stability> = Stable
}
stable class AddToCollectionScreen {
  stable val entity: MusicBrainzEntity
  stable val id: String
  <runtime stability> = Stable
}
stable class SnackbarPopResult {
  stable val message: String
  stable val actionLabel: String?
  <runtime stability> = Stable
}
stable class DetailsScreen {
  stable val entity: MusicBrainzEntity
  stable val id: String
  stable val title: String?
  <runtime stability> = Stable
}
stable class CoverArtsGridScreen {
  stable val id: String
  <runtime stability> = Stable
}
stable class CoverArtsPagerScreen {
  stable val id: String
  stable val index: Int
  <runtime stability> = Stable
}
stable class StatsScreen {
  stable val entity: MusicBrainzEntity
  stable val id: String
  unstable val tabs: List<Tab>
  <runtime stability> = Stable
}
stable class SettingsScreen {
  <runtime stability> = Stable
}
stable class LicensesScreen {
  <runtime stability> = Stable
}
stable class NowPlayingHistoryScreen {
  <runtime stability> = Stable
}
stable class SpotifyHistoryScreen {
  <runtime stability> = Stable
}
stable class SeriesByEntityPresenter {
  runtime val getSeriesByEntity: GetSeriesByEntity
  <runtime stability> = Stable
}
stable class Get {
  stable val byEntityId: String
  stable val byEntity: MusicBrainzEntity
  stable val isRemote: Boolean
  <runtime stability> = Stable
}
stable class UpdateQuery {
  stable val query: String
  <runtime stability> = Stable
}
stable class SeriesByEntityUiState {
  runtime val lazyPagingItems: LazyPagingItems<SeriesListItemModel>
  stable val lazyListState: LazyListState
  stable val eventSink: Function1<SeriesByEntityUiEvent, Unit>
}
stable class TopAppBarEditState {
  stable val showEditIcon: Boolean
  stable var isEditMode$delegate: MutableState<Boolean>
}
stable class TopAppBarFilterState {
  stable var filterText$delegate: MutableState<String>
  stable var isFilterMode$delegate: MutableState<Boolean>
}
stable class TracksByReleasePresenter {
  runtime val getTracksByRelease: GetTracksByRelease
  <runtime stability> = Stable
}
stable class TracksByReleaseUiState {
  runtime val lazyPagingItems: LazyPagingItems<ListItemModel>
  stable val lazyListState: LazyListState
  unstable val collapsedMediumIds: Set<Long>
  stable val eventSink: Function1<TracksByEntityUiEvent, Unit>
}
stable class Get {
  stable val byEntityId: String
  <runtime stability> = Stable
}
stable class UpdateQuery {
  stable val query: String
  <runtime stability> = Stable
}
stable class ToggleMedium {
  stable val id: String
  <runtime stability> = Stable
}
stable class WorksByEntityPresenter {
  runtime val getWorksByEntity: GetWorksByEntity
  <runtime stability> = Stable
}
stable class Get {
  stable val byEntityId: String
  stable val byEntity: MusicBrainzEntity
  stable val isRemote: Boolean
  <runtime stability> = Stable
}
stable class UpdateQuery {
  stable val query: String
  <runtime stability> = Stable
}
stable class WorksByEntityUiState {
  runtime val lazyPagingItems: LazyPagingItems<WorkListItemModel>
  stable val lazyListState: LazyListState
  stable val eventSink: Function1<WorksByEntityUiEvent, Unit>
}
