stable class MusicBrainzLoginPresenterImpl {
  runtime val musicBrainzLoginActivityResultContract: MusicBrainzLoginActivityResultContract
  unstable val login: Login
  <runtime stability> = Stable
}
stable class AreasListPresenter {
  <runtime stability> = Stable
}
stable class ArtistsListPresenter {
  <runtime stability> = Stable
}
stable class EventsListPresenter {
  <runtime stability> = Stable
}
stable class GenresListPresenter {
  <runtime stability> = Stable
}
stable class CustomIcons {
  <runtime stability> = Stable
}
unstable class ForwardingDrawInfo {
  unstable val painter: Painter
  stable val alpha: Float
  stable val colorFilter: ColorFilter?
  <runtime stability> = Unstable
}
stable class InstrumentsListPresenter {
  <runtime stability> = Stable
}
stable class LabelsListPresenter {
  <runtime stability> = Stable
}
stable class AllEntitiesListPresenter {
  stable val areasListPresenter: AreasListPresenter
  stable val artistsListPresenter: ArtistsListPresenter
  stable val eventsListPresenter: EventsListPresenter
  stable val genresListPresenter: GenresListPresenter
  stable val instrumentsListPresenter: InstrumentsListPresenter
  stable val labelsListPresenter: LabelsListPresenter
  stable val placesListPresenter: PlacesListPresenter
  stable val recordingsListPresenter: RecordingsListPresenter
  stable val releasesListPresenter: ReleasesListPresenter
  stable val releaseGroupsListPresenter: ReleaseGroupsListPresenter
  stable val seriesListPresenter: SeriesListPresenter
  stable val worksListPresenter: WorksListPresenter
  stable val tracksByReleasePresenter: TracksByReleasePresenter
  stable val relationsPresenter: RelationsPresenter
  <runtime stability> = Stable
}
stable class Get {
  stable val tab: Tab?
  runtime val browseMethod: BrowseMethod
  stable val query: String
  stable val isRemote: Boolean
  <runtime stability> = Stable
}
stable class AllEntitiesListUiState {
  stable val areasListUiState: EntitiesListUiState
  stable val artistsListUiState: EntitiesListUiState
  stable val eventsListUiState: EntitiesListUiState
  stable val genresListUiState: EntitiesListUiState
  stable val instrumentsListUiState: EntitiesListUiState
  stable val labelsListUiState: EntitiesListUiState
  stable val placesListUiState: EntitiesListUiState
  stable val recordingsListUiState: EntitiesListUiState
  stable val releasesListUiState: EntitiesListUiState
  stable val releaseGroupsListUiState: EntitiesListUiState
  stable val seriesListUiState: EntitiesListUiState
  stable val worksListUiState: EntitiesListUiState
  stable val relationsUiState: RelationsUiState
  stable val tracksByReleaseUiState: TracksByReleaseUiState
  stable val eventSink: Function1<AllEntitiesListUiEvent, Unit>
}
stable class BaseListPresenter {
  unstable val getEntities: GetEntities
  unstable val observeLocalCount: ObserveLocalCount
  unstable val appPreferences: AppPreferences
  unstable val musicBrainzImageMetadataRepository: MusicBrainzImageMetadataRepository
  <runtime stability> = Stable
}
stable class Get {
  runtime val browseMethod: BrowseMethod
  stable val isRemote: Boolean
  <runtime stability> = Stable
}
stable class UpdateQuery {
  stable val query: String
  <runtime stability> = Stable
}
stable class RequestForMissingCoverArtUrl {
  stable val entityId: String
  <runtime stability> = Stable
}
stable class UpdateShowMoreInfoInReleaseListItem {
  stable val showMore: Boolean
  <runtime stability> = Stable
}
stable class UpdateSortReleaseGroupListItem {
  stable val sort: Boolean
  <runtime stability> = Stable
}
stable class EntitiesListUiState {
  unstable val pagingDataFlow: Flow<PagingData<ListItemModel>>
  stable val count: Int
  stable val lazyListState: LazyListState
  stable val showMoreInfo: Boolean
  stable val sort: Boolean
  stable val eventSink: Function1<EntitiesListUiEvent, Unit>
}
stable class ListItemSharedTransitionKey {
  stable val imageId: ImageId
  stable val type: ElementType
  <runtime stability> = Stable
}
stable class StartLogin {
  <runtime stability> = Stable
}
stable class DismissDialog {
  <runtime stability> = Stable
}
stable class DismissError {
  <runtime stability> = Stable
}
stable class SubmitAuthCode {
  stable val authCode: String
  <runtime stability> = Stable
}
stable class MusicBrainzLoginUiState {
  stable val showDialog: Boolean
  stable val errorMessage: String?
  stable val eventSink: Function1<MusicBrainzLoginUiEvent, Unit>
  <runtime stability> = Stable
}
runtime class EntitiesLazyPagingItems {
  runtime val areasLazyPagingItems: LazyPagingItems<ListItemModel>
  runtime val artistsLazyPagingItems: LazyPagingItems<ListItemModel>
  runtime val eventsLazyPagingItems: LazyPagingItems<ListItemModel>
  runtime val genresLazyPagingItems: LazyPagingItems<ListItemModel>
  runtime val instrumentsLazyPagingItems: LazyPagingItems<ListItemModel>
  runtime val labelsLazyPagingItems: LazyPagingItems<ListItemModel>
  runtime val placesLazyPagingItems: LazyPagingItems<ListItemModel>
  runtime val recordingsLazyPagingItems: LazyPagingItems<ListItemModel>
  runtime val releasesLazyPagingItems: LazyPagingItems<ListItemModel>
  runtime val releaseGroupsLazyPagingItems: LazyPagingItems<ListItemModel>
  runtime val seriesLazyPagingItems: LazyPagingItems<ListItemModel>
  runtime val worksLazyPagingItems: LazyPagingItems<ListItemModel>
  runtime val relationsLazyPagingItems: LazyPagingItems<ListItemModel>
  runtime val tracksLazyPagingItems: LazyPagingItems<ListItemModel>
  <runtime stability> = Runtime(LazyPagingItems),Runtime(LazyPagingItems),Runtime(LazyPagingItems),Runtime(LazyPagingItems),Runtime(LazyPagingItems),Runtime(LazyPagingItems),Runtime(LazyPagingItems),Runtime(LazyPagingItems),Runtime(LazyPagingItems),Runtime(LazyPagingItems),Runtime(LazyPagingItems),Runtime(LazyPagingItems),Runtime(LazyPagingItems),Runtime(LazyPagingItems)
}
runtime class EntitiesPagingListUiState {
  runtime val lazyPagingItems: LazyPagingItems<ListItemModel>
  stable val lazyListState: LazyListState
  stable val showMoreInfo: Boolean
  <runtime stability> = Runtime(LazyPagingItems)
}
stable class PlacesListPresenter {
  <runtime stability> = Stable
}
stable class RecordingsListPresenter {
  <runtime stability> = Stable
}
stable class RelationsPresenterImpl {
  unstable val getEntityRelationships: GetEntityRelationships
  <runtime stability> = Stable
}
stable class GetRelations {
  stable val byEntityId: String
  stable val byEntity: MusicBrainzEntityType
  unstable val relatedEntities: Set<MusicBrainzEntityType>
  <runtime stability> = Stable
}
stable class UpdateQuery {
  stable val query: String
  <runtime stability> = Stable
}
stable class RelationsUiState {
  unstable val pagingDataFlow: Flow<PagingData<ListItemModel>>
  stable val lazyListState: LazyListState
  stable val eventSink: Function1<RelationsUiEvent, Unit>
}
stable class ReleasesListPresenter {
  <runtime stability> = Stable
}
stable class ReleaseGroupsListPresenter {
  <runtime stability> = Stable
}
stable class SearchScreen {
  stable val query: String?
  stable val entity: MusicBrainzEntityType?
  runtime var CREATOR: Creator<SearchScreen>
  <runtime stability> = Stable
}
stable class ArtistCollaborationScreen {
  stable val id: String
  stable val name: String
  runtime var CREATOR: Creator<ArtistCollaborationScreen>
  <runtime stability> = Stable
}
stable class DatabaseScreen {
  runtime var CREATOR: Creator<DatabaseScreen>
  <runtime stability> = Stable
}
stable class AllEntitiesScreen {
  stable val entity: MusicBrainzEntityType
  runtime var CREATOR: Creator<AllEntitiesScreen>
  <runtime stability> = Stable
}
stable class HistoryScreen {
  runtime var CREATOR: Creator<HistoryScreen>
  <runtime stability> = Stable
}
stable class CollectionListScreen {
  stable val newCollectionId: String?
  stable val newCollectionName: String?
  stable val newCollectionEntity: MusicBrainzEntityType?
  runtime var CREATOR: Creator<CollectionListScreen>
  <runtime stability> = Stable
}
stable class CollectionScreen {
  stable val collectionId: String
  stable val collectableId: String?
  runtime var CREATOR: Creator<CollectionScreen>
  <runtime stability> = Stable
}
stable class AddToCollectionScreen {
  stable val entity: MusicBrainzEntityType
  unstable val collectableIds: Set<String>
  runtime var CREATOR: Creator<AddToCollectionScreen>
  <runtime stability> = Stable
}
stable class SnackbarPopResult {
  stable val message: String
  stable val actionLabel: String?
  runtime var CREATOR: Creator<SnackbarPopResult>
  <runtime stability> = Stable
}
stable class DetailsScreen {
  stable val entity: MusicBrainzEntityType
  stable val id: String
  runtime var CREATOR: Creator<DetailsScreen>
  <runtime stability> = Stable
}
stable class CoverArtsScreen {
  stable val id: String?
  stable val entity: MusicBrainzEntityType?
  runtime var CREATOR: Creator<CoverArtsScreen>
  <runtime stability> = Stable
}
stable class StatsScreen {
  runtime val browseMethod: BrowseMethod
  stable val tabs: ImmutableList<Tab>
  stable val isRemote: Boolean
  runtime var CREATOR: Creator<StatsScreen>
  <runtime stability> = Stable
}
stable class SettingsScreen {
  runtime var CREATOR: Creator<SettingsScreen>
  <runtime stability> = Stable
}
stable class AppearanceSettingsScreen {
  runtime var CREATOR: Creator<AppearanceSettingsScreen>
  <runtime stability> = Stable
}
stable class ImagesSettingsScreen {
  runtime var CREATOR: Creator<ImagesSettingsScreen>
  <runtime stability> = Stable
}
stable class LicensesScreen {
  runtime var CREATOR: Creator<LicensesScreen>
  <runtime stability> = Stable
}
stable class NowPlayingHistoryScreen {
  runtime var CREATOR: Creator<NowPlayingHistoryScreen>
  <runtime stability> = Stable
}
stable class SpotifyHistoryScreen {
  runtime var CREATOR: Creator<SpotifyHistoryScreen>
  <runtime stability> = Stable
}
stable class ListensScreen {
  runtime var CREATOR: Creator<ListensScreen>
  <runtime stability> = Stable
}
stable class SeriesListPresenter {
  <runtime stability> = Stable
}
stable class ExtendedColors {
  stable val artist: Color
  stable val area: Color
  stable val collection: Color
  stable val event: Color
  stable val genre: Color
  stable val instrument: Color
  stable val label: Color
  stable val place: Color
  stable val recording: Color
  stable val release: Color
  stable val releaseGroup: Color
  stable val series: Color
  stable val work: Color
  stable val url: Color
}
stable class TextStyles {
  <runtime stability> = Stable
}
stable class SelectionState {
  stable var totalCount$delegate: MutableIntState
  stable var loadedCount$delegate: MutableIntState
  stable var selectedIds$delegate: MutableState<PersistentSet<String>>
}
stable class TopAppBarFilterState {
  stable var filterText$delegate: MutableState<String>
  stable var isFilterMode$delegate: MutableState<Boolean>
  stable var show$delegate: MutableState<Boolean>
}
stable class TracksByReleasePresenter {
  unstable val getTracksByRelease: GetTracksByRelease
  <runtime stability> = Stable
}
stable class TracksByReleaseUiState {
  unstable val pagingDataFlow: Flow<PagingData<ListItemModel>>
  stable val lazyListState: LazyListState
  unstable val collapsedMediumIds: Set<Long>
  stable val eventSink: Function1<TracksByEntityUiEvent, Unit>
}
stable class Get {
  stable val byEntityId: String
  <runtime stability> = Stable
}
stable class UpdateQuery {
  stable val query: String
  <runtime stability> = Stable
}
stable class ToggleMedium {
  stable val id: String
  <runtime stability> = Stable
}
stable class WorksListPresenter {
  <runtime stability> = Stable
}
