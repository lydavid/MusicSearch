restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.PreviewExposedDropdownMenuBox()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.area.PreviewAreaListItem()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.area.PreviewAreaListItemDisambiguation()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.area.PreviewAreaListItemCountry()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.area.PreviewAreaListItemWorldwide()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.area.PreviewReleaseEvent()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.area.PreviewReleaseEventNoDate()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.area.PreviewAreaListItemVisited()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.area.PreviewReleaseEventVisited()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.artist.PreviewArtistListItemSimple()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.artist.PreviewArtistListItemCountryCode()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.artist.PreviewArtistListItemAllInfoUnvisited()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.artist.PreviewArtistListItemAllInfoVisited()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.artist.PreviewArtistListItemSelected()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.artist.PreviewArtistListItemWithCoverArt()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.button.PreviewRetryButton()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.component.PreviewClickableItem()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.component.PreviewClickableItemWithSubtitle()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.component.PreviewClickableItemWithEndIcon()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.component.PreviewClickableItemWithStartIcon()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.component.PreviewClickableItemWithStartEndIcon()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.component.PreviewMultipleChoiceBottomSheetContent()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.dialog.PreviewMultipleChoiceDialog()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.dialog.PreviewSimpleAlertDialog()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.event.PreviewEventListItem()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.event.PreviewEventListItemLong()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.event.PreviewEventListItemVisited()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.event.PreviewEventListItemMultiDay()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.event.PreviewEventListItemCancelled()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.event.PreviewEventListItemWithCoverArt()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.fullscreen.PreviewFullScreenErrorWithRetry()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.fullscreen.PreviewFullScreenLoadingIndicator()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.fullscreen.PreviewFullScreenText()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.genre.PreviewGenreListItem()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.instrument.PreviewInstrumentListItemModel()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.instrument.PreviewInstrumentListItemModelAllInfo()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.instrument.PreviewInstrumentListItemModelVisited()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.label.PreviewLabelListItem()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.label.PreviewLabelListItemAllInfo()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.label.PreviewLabelListItemVisited()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.listitem.PreviewCollapsibleListSeparatorHeaderCollapsed()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.listitem.PreviewCollapsibleListSeparatorHeaderExpanded()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.listitem.PreviewLastUpdatedFooterItem()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.listitem.PreviewLastUpdatedText()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.listitem.PreviewLifeSpanTextDifferentBeginAndEnd()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.listitem.PreviewLifeSpanTextSameBeginAndEnd()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.listitem.PreviewLifeSpanTextBeginOnly()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.listitem.PreviewLifeSpanTextEndOnly()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.listitem.PreviewListSeparatorHeader()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.listitem.PreviewListSeparatorHeaderWithUnknownNumberOfImages()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.listitem.PreviewListSeparatorHeaderWithZeroImages()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.listitem.PreviewListSeparatorHeaderWithOneImage()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.listitem.PreviewListSeparatorHeaderWithMultipleImages()
open fun ly.david.musicsearch.ui.common.musicbrainz.MusicBrainzLoginPresenterImpl.present(
  stable <this>: MusicBrainzLoginPresenterImpl
): MusicBrainzLoginUiState
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.paging.PreviewFooterLoadingIndicator()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.place.PreviewPlaceListItem()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.place.PreviewPlaceListItemAllInfo()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.place.PreviewPlaceListItemVisited()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.place.PreviewCoordinateListItem()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.recording.PreviewRecordingListItem()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.recording.PreviewRecordingListItemAllInfo()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.recording.PreviewRecordingListItemVisited()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.relation.PreviewArtistRelationListItem()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.relation.PreviewRecordingRelationListItem()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.relation.PreviewRecordingRelationListItemVisited()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.relation.PreviewUrlListItem()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.relation.PreviewUrlListItemWikipedia()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.relation.PreviewUrlListItemWikidata()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.release.PreviewReleaseListItem()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.release.PreviewReleaseListItemDisambiguation()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.release.PreviewReleaseListItemDisambiguationCountry()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.release.PreviewReleaseListItemCountry()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.release.PreviewReleaseListItemDateCountryFormatsTracks()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.release.PreviewReleaseListItemCountryDate()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.release.PreviewReleaseListItemDateArtistCredits()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.release.PreviewReleaseListItemMultipleCountries()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.release.PreviewReleaseListItemShowLessInfo()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.release.PreviewReleaseListItemCatalog()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.release.PreviewReleaseListItemVisited()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.release.PreviewReleaseListItemWithCoverArt()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.release.PreviewTrackListItem()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.release.PreviewTrackListItemAllInfo()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.release.PreviewTrackListItemVisited()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.releasegroup.PreviewReleaseGroupListItem()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.releasegroup.PreviewReleaseGroupListItemWithType()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.releasegroup.PreviewReleaseGroupListItemVisited()
fun ly.david.musicsearch.ui.common.screen.screenContainerSize()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.series.PreviewSeriesListItem()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.series.PreviewSeriesListItemAllInfo()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.series.PreviewSeriesListItemVisited()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.text.PreviewTextWithHeading()
fun ly.david.musicsearch.ui.common.theme.materialYouColorScheme(
  stable darkTheme: Boolean = @dynamic <expression>
): ColorScheme
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.topappbar.PreviewDotsFlashing()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.topappbar.PreviewScrollableTopAppBar()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.topappbar.PreviewScrollableTopAppBarWithIcon()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.topappbar.PreviewScrollableTopAppBarWithTabs()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.topappbar.PreviewScrollableTopAppBarLoading()
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable]]") fun ly.david.musicsearch.ui.common.topappbar.TopAppBarWithFilter(
  stable annotatedString: AnnotatedString
  stable modifier: Modifier? = @static <expression>
  stable onBack: Function0<Unit>? = @static <expression>
  stable showBackButton: Boolean = @static true
  stable onSelectAllToggle: Function0<Unit>? = @static <expression>
  stable entity: MusicBrainzEntityType? = @static null
  stable subtitle: String? = @static ""
  stable scrollBehavior: TopAppBarScrollBehavior? = @static null
  stable overflowDropdownMenuItems: @[ExtensionFunctionType] Function3<OverflowMenuScope, Composer, Int, Unit>? = @static null
  stable subtitleDropdownMenuItems: @[ExtensionFunctionType] Function3<OverflowMenuScope, Composer, Int, Unit>? = @static null
  stable topAppBarFilterState: TopAppBarFilterState? = @dynamic <expression>
  stable selectionState: SelectionState? = @dynamic <expression>
  stable additionalActions: Function2<Composer, Int, Unit>? = @static <expression>
  stable additionalBar: Function2<Composer, Int, Unit>? = @static <expression>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.topappbar.PreviewTopAppBarWithFilter()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.topappbar.PreviewTopAppBarWithFilterFilterMode()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.topappbar.PreviewTopAppBarWithFilterFilterModeWithText()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.topappbar.PreviewTopAppBarWithFilterNoFilter()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.topappbar.PreviewTopAppBarWithFilterWithTabs()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.topappbar.PreviewTopAppBarWithFilterWithTabsFilterMode()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.topappbar.PreviewTopAppBarWithFilterWithSelectedOne()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.topappbar.PreviewTopAppBarWithFilterWithSelectedAll()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.topappbar.PreviewTopAppBarWithFilterWithSelectedAllExceptOne()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.wikimedia.PreviewWikipediaSection()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.work.PreviewWorkListItemModel()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.work.PreviewWorkListItemModelAllInfo()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.work.PreviewWorkListItemModelVisited()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.EntityIcon(
  stable entity: MusicBrainzEntityType
  stable modifier: Modifier? = @static <expression>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.ResourceDropdownPicker(
  unstable options: List<MusicBrainzEntityType>
  stable selectedOption: MusicBrainzEntityType
  stable modifier: Modifier? = @static <expression>
  stable onSelectOption: Function1<MusicBrainzEntityType, Unit>? = @static <expression>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.area.AreaListItem(
  area: AreaListItemModel
  stable modifier: Modifier? = @static <expression>
  stable showType: Boolean = @static true
  stable showIcon: Boolean = @static true
  stable showEditCollection: Boolean = @static true
  stable onAreaClick: @[ExtensionFunctionType] Function1<AreaListItemModel, Unit>? = @static <expression>
  stable isSelected: Boolean = @static false
  stable onSelect: Function1<String, Unit>? = @static <expression>
  stable onEditCollectionClick: Function1<String, Unit>? = @static <expression>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.artist.ArtistListItem(
  artist: ArtistListItemModel
  stable modifier: Modifier? = @static <expression>
  stable onClick: @[ExtensionFunctionType] Function1<ArtistListItemModel, Unit>? = @static <expression>
  stable isSelected: Boolean = @static false
  stable onSelect: Function1<String, Unit>? = @static <expression>
  stable onEditCollectionClick: Function1<String, Unit>? = @static <expression>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.button.RetryButton(
  stable modifier: Modifier? = @static <expression>
  stable onClick: Function0<Unit>? = @static <expression>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.component.ClickableItem(
  stable title: String
  stable modifier: Modifier? = @static <expression>
  stable subtitle: String? = @static null
  stable startIcon: ImageVector? = @static null
  stable endIcon: ImageVector? = @static null
  stable fontWeight: FontWeight? = @static <expression>
  stable onClick: Function0<Unit>? = @static <expression>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.component.MultipleChoiceBottomSheet(
  unstable options: List<String>
  stable selectedOptionIndex: Int
  stable onSortOptionIndexClick: Function1<Int, Unit>? = @static <expression>
  stable bottomSheetState: SheetState? = @dynamic <expression>
  stable onDismiss: Function0<Unit>? = @static <expression>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.component.MultipleChoiceBottomSheetContent(
  unstable options: List<String>
  stable selectedOptionIndex: Int
  stable onSortOptionIndexClick: Function1<Int, Unit>? = @static <expression>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable]]") fun ly.david.musicsearch.ui.common.dialog.DialogWithCloseButton(
  stable modifier: Modifier? = @static <expression>
  stable onDismiss: Function0<Unit>? = @static <expression>
  stable content: Function2<Composer, Int, Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable]]") fun ly.david.musicsearch.ui.common.dialog.DialogContentWithCloseButton(
  stable modifier: Modifier? = @static <expression>
  stable onDismiss: Function0<Unit>? = @static <expression>
  stable content: Function2<Composer, Int, Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.dialog.MultipleChoiceDialog(
  stable title: String
  unstable choices: List<String>
  stable selectedChoiceIndex: Int
  stable modifier: Modifier? = @static <expression>
  stable onSelectChoiceIndex: Function1<Int, Unit>? = @static <expression>
  stable onDismiss: Function0<Unit>? = @static <expression>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.dialog.SimpleAlertDialog(
  stable title: String
  stable confirmText: String
  stable dismissText: String
  stable onDismiss: Function0<Unit>? = @static <expression>
  stable onConfirmClick: Function0<Unit>? = @static <expression>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.event.EventListItem(
  event: EventListItemModel
  stable modifier: Modifier? = @static <expression>
  stable onEventClick: @[ExtensionFunctionType] Function1<EventListItemModel, Unit>? = @static <expression>
  stable isSelected: Boolean = @static false
  stable onSelect: Function1<String, Unit>? = @static <expression>
  stable onEditCollectionClick: Function1<String, Unit>? = @static <expression>
)
restartable skippable fun ly.david.musicsearch.ui.common.fullscreen.DetailsWithErrorHandling(
  detailsModel: T?
  stable onRefresh: Function0<Unit>
  stable modifier: Modifier? = @static <expression>
  stable isLoading: Boolean = @static false
  handledException: HandledException? = @static null
  stable detailsScreen: Function3<T, Composer, Int, Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable]]") fun ly.david.musicsearch.ui.common.fullscreen.FullScreenContent(
  stable modifier: Modifier? = @static <expression>
  stable content: @[ExtensionFunctionType] Function3<ColumnScope, Composer, Int, Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.fullscreen.FullScreenErrorWithRetry(
  stable modifier: Modifier? = @static <expression>
  handledException: HandledException? = @static null
  stable onClick: Function0<Unit>? = @static <expression>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.fullscreen.FullScreenLoadingIndicator(
  stable modifier: Modifier? = @static <expression>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.fullscreen.FullScreenText(
  stable text: String
  stable modifier: Modifier? = @static <expression>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.genre.GenreListItem(
  genre: GenreListItemModel
  stable modifier: Modifier? = @static <expression>
  stable onGenreClick: @[ExtensionFunctionType] Function1<GenreListItemModel, Unit>? = @static <expression>
  stable isSelected: Boolean = @static false
  stable onSelect: Function1<String, Unit>? = @static <expression>
  stable onEditCollectionClick: Function1<String, Unit>? = @static <expression>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.icon.AddToCollectionIcon(
  stable collected: Boolean
  stable modifier: Modifier? = @static <expression>
  stable nameWithDisambiguation: String? = @static ""
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.icon.AddToCollectionIconButton(
  unstable entityListItemModel: EntityListItemModel
  stable onClick: Function1<String, Unit>
  stable modifier: Modifier? = @static <expression>
)
restartable skippable fun ly.david.musicsearch.ui.common.image.InitializeImageLoader()
restartable skippable fun ly.david.musicsearch.ui.common.image.LargeImage(
  stable url: String
  stable imageId: ImageId?
  stable modifier: Modifier? = @static <expression>
  stable isCompact: Boolean = @static true
  stable zoomEnabled: Boolean = @static false
  stable onClick: Function0<Unit>? = @static null
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.image.PlaceholderIcon(
  stable modifier: Modifier? = @static <expression>
  stable placeholderIcon: ImageVector? = @static null
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.image.ThumbnailImage(
  stable url: String
  stable imageId: ImageId?
  stable placeholderIcon: ImageVector?
  stable modifier: Modifier? = @static <expression>
  stable clipCircle: Boolean = @static false
  stable isSelected: Boolean = @static false
  stable size: Dp = @static <expression>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.instrument.InstrumentListItem(
  instrument: InstrumentListItemModel
  stable modifier: Modifier? = @static <expression>
  stable onInstrumentClick: @[ExtensionFunctionType] Function1<InstrumentListItemModel, Unit>? = @static <expression>
  stable isSelected: Boolean = @static false
  stable onSelect: Function1<String, Unit>? = @static <expression>
  stable onEditCollectionClick: Function1<String, Unit>? = @static <expression>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.label.LabelListItem(
  label: LabelListItemModel
  stable modifier: Modifier? = @static <expression>
  stable showIcon: Boolean = @static true
  stable showEditCollection: Boolean = @static true
  stable onLabelClick: @[ExtensionFunctionType] Function1<LabelListItemModel, Unit>? = @static <expression>
  stable isSelected: Boolean = @static false
  stable onSelect: Function1<String, Unit>? = @static <expression>
  stable onEditCollectionClick: Function1<String, Unit>? = @static <expression>
)
open scheme("[presenter]") fun ly.david.musicsearch.ui.common.list.AllEntitiesListPresenter.present(
  stable <this>: AllEntitiesListPresenter
): AllEntitiesListUiState
open fun ly.david.musicsearch.ui.common.list.BaseListPresenter.present(
  stable <this>: BaseListPresenter
): EntitiesListUiState
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.listitem.CollapsibleListSeparatorHeader(
  stable text: String
  stable collapsed: Boolean
  stable modifier: Modifier? = @static <expression>
  stable onClick: Function0<Unit>? = @static <expression>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.listitem.HighlightableText(
  stable text: String
  stable highlightedText: String
  stable modifier: Modifier? = @static <expression>
  stable fontWeight: FontWeight? = @static <expression>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.listitem.LastUpdatedFooterItem(
  stable lastUpdated: Instant
  stable modifier: Modifier? = @static <expression>
  stable now: Instant? = @dynamic <expression>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.listitem.LastUpdatedText(
  stable lastUpdated: Instant
  stable modifier: Modifier? = @static <expression>
  stable now: Instant? = @dynamic <expression>
)
fun ly.david.musicsearch.ui.common.listitem.formatPeriod(
  unstable period: DateTimePeriod
): String
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.listitem.LifeSpanText(
  lifeSpan: LifeSpanUiModel
  stable heading: String
  stable modifier: Modifier? = @static <expression>
  stable beginHeading: String? = @static ""
  stable endHeading: String? = @static ""
  stable filterText: String? = @static ""
)
fun ly.david.musicsearch.ui.common.listitem.listItemColors(
  stable isSelected: Boolean
  stable enabled: Boolean = @static true
): ListItemColors
fun ly.david.musicsearch.ui.common.listitem.getEnabledColor(
  stable enabled: Boolean
): Color
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable]]") fun ly.david.musicsearch.ui.common.listitem.ListSeparatorHeader(
  stable text: String
  stable modifier: Modifier? = @static <expression>
  stable endContent: Function2<Composer, Int, Unit>? = @static null
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.listitem.ListSeparatorHeader(
  stable text: String
  stable numberOfImages: Int?
  stable modifier: Modifier? = @static <expression>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable]]") fun ly.david.musicsearch.ui.common.listitem.SwipeToDeleteListItem(
  stable modifier: Modifier? = @static <expression>
  stable disable: Boolean = @static false
  stable onDelete: Function0<Unit>? = @static <expression>
  stable content: @[ExtensionFunctionType] Function3<RowScope, Composer, Int, Unit>? = @static <expression>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable]]") fun ly.david.musicsearch.ui.common.listitem.SwipeToDeleteListItem(
  stable onDelete: Function0<Unit>
  stable modifier: Modifier? = @static <expression>
  stable dismissContent: @[ExtensionFunctionType] Function3<RowScope, Composer, Int, Unit>? = @static <expression>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.listitem.SwipeToDeleteBackground(
  stable alignment: Alignment
)
fun ly.david.musicsearch.ui.common.locale.getAnnotatedName(
  unstable <this>: NameWithDisambiguationAndAliases?
): AnnotatedString
abstract fun ly.david.musicsearch.ui.common.musicbrainz.MusicBrainzLoginPresenter.present(
  stable <this>: Presenter<MusicBrainzLoginUiState>
): MusicBrainzLoginUiState
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.paging.EntitiesPagingListUi(
  uiState: EntitiesPagingListUiState
  stable modifier: Modifier? = @static <expression>
  stable selectedIds: ImmutableSet<String>? = @static <expression>
  stable now: Instant? = @dynamic <expression>
  stable onItemClick: Function2<@[ParameterName(name = 'entity')] MusicBrainzEntityType, @[ParameterName(name = 'id')] String, Unit>? = @static <expression>
  stable onSelect: Function1<String, Unit>? = @static <expression>
  stable onEditCollectionClick: Function1<String, Unit>? = @static <expression>
  unstable requestForMissingCoverArtUrl: SuspendFunction1<@[ParameterName(name = 'id')] String, Unit>? = @dynamic <expression>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.paging.FooterLoadingIndicator()
restartable skippable scheme("[androidx.compose.ui.UiComposable, [_]]") fun ly.david.musicsearch.ui.common.paging.ScreenWithPagingLoadingAndError(
  lazyPagingItems: LazyPagingItems<T>
  stable modifier: Modifier? = @static <expression>
  stable lazyListState: LazyListState? = @dynamic <expression>
  stable customNoResultsText: String? = @static ""
  stable keyed: Boolean = @static false
  stable itemContent: @[ExtensionFunctionType] Function4<LazyItemScope, @[ParameterName(name = 'value')] T?, Composer, Int, Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.paging.AppendFooter(
  unused stable <this>: LazyItemScope
  lazyPagingItems: LazyPagingItems<T>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.place.CoordinateListItem(
  coordinates: CoordinatesUiModel
  stable modifier: Modifier? = @static <expression>
  stable label: String? = @static null
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.place.PlaceListItem(
  place: PlaceListItemModel
  stable modifier: Modifier? = @static <expression>
  stable onPlaceClick: @[ExtensionFunctionType] Function1<PlaceListItemModel, Unit>? = @static <expression>
  stable onSelect: Function1<String, Unit>? = @static <expression>
  stable isSelected: Boolean = @static false
  stable onEditCollectionClick: Function1<String, Unit>? = @static <expression>
)
restartable skippable scheme("[0, [0]]") fun ly.david.musicsearch.ui.common.preview.PreviewTheme(
  stable darkTheme: Boolean = @dynamic <expression>
  stable content: Function2<Composer, Int, Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable]]") fun ly.david.musicsearch.ui.common.preview.PreviewWithSharedElementTransition(
  stable content: Function2<Composer, Int, Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.recording.RecordingListItem(
  recording: RecordingListItemModel
  stable modifier: Modifier? = @static <expression>
  stable onRecordingClick: @[ExtensionFunctionType] Function1<RecordingListItemModel, Unit>? = @static <expression>
  stable isSelected: Boolean = @static false
  stable onSelect: Function1<String, Unit>? = @static <expression>
  stable onEditCollectionClick: Function1<String, Unit>? = @static <expression>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.relation.RelationListItem(
  relation: RelationListItemModel
  stable modifier: Modifier? = @static <expression>
  stable onItemClick: Function2<@[ParameterName(name = 'entity')] MusicBrainzEntityType, @[ParameterName(name = 'id')] String, Unit>? = @static <expression>
)
abstract scheme("[presenter]") fun ly.david.musicsearch.ui.common.relation.RelationsPresenter.present(
  stable <this>: Presenter<RelationsUiState>
): RelationsUiState
open fun ly.david.musicsearch.ui.common.relation.RelationsPresenterImpl.present(
  stable <this>: RelationsPresenterImpl
): RelationsUiState
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.relation.UrlListItem(
  relation: RelationListItemModel
  stable modifier: Modifier? = @static <expression>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.release.ReleaseListItem(
  release: ReleaseListItemModel
  stable modifier: Modifier? = @static <expression>
  stable showMoreInfo: Boolean = @static true
  unstable requestForMissingCoverArtUrl: SuspendFunction0<Unit>? = @dynamic <expression>
  stable onClick: @[ExtensionFunctionType] Function1<ReleaseListItemModel, Unit>? = @static <expression>
  stable isSelected: Boolean = @static false
  stable onSelect: Function1<String, Unit>? = @static <expression>
  stable onEditCollectionClick: Function1<String, Unit>? = @static <expression>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.releasegroup.ReleaseGroupListItem(
  releaseGroup: ReleaseGroupListItemModel
  stable showType: Boolean
  stable modifier: Modifier? = @static <expression>
  unstable requestForMissingCoverArtUrl: SuspendFunction0<Unit>? = @dynamic <expression>
  stable onClick: @[ExtensionFunctionType] Function1<ReleaseGroupListItemModel, Unit>? = @static <expression>
  stable isSelected: Boolean = @static false
  stable onSelect: Function1<String, Unit>? = @static <expression>
  stable onEditCollectionClick: Function1<String, Unit>? = @static <expression>
)
open fun ly.david.musicsearch.ui.common.screen.RecordVisit.RecordVisit(
  stable mbid: String
  stable title: String
  stable entity: MusicBrainzEntityType
  stable searchHint: String?
  <this>: RecordVisit
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.series.SeriesListItem(
  series: SeriesListItemModel
  stable modifier: Modifier? = @static <expression>
  stable onSeriesClick: @[ExtensionFunctionType] Function1<SeriesListItemModel, Unit>? = @static <expression>
  stable isSelected: Boolean = @static false
  stable onSelect: Function1<String, Unit>? = @static <expression>
  stable onEditCollectionClick: Function1<String, Unit>? = @static <expression>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.text.TextInput(
  stable instructions: AnnotatedString
  stable textLabel: String
  stable textHint: String
  stable text: String
  stable buttonText: String
  stable modifier: Modifier? = @static <expression>
  stable onTextChange: Function1<String, Unit>? = @static <expression>
  stable onButtonClick: Function0<Unit>? = @static <expression>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.text.TextWithHeading(
  stable heading: String
  stable text: String
  stable modifier: Modifier? = @static <expression>
  stable filterText: String? = @static ""
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.text.TextWithIcon(
  stable imageVector: ImageVector
  stable text: String
  stable modifier: Modifier? = @static <expression>
  stable iconSize: Int = @static 24
  stable style: TextStyle? = @dynamic <expression>
)
restartable skippable scheme("[0, [0]]") fun ly.david.musicsearch.ui.common.theme.BaseTheme(
  unstable appPreferences: AppPreferences
  stable darkTheme: Boolean = @dynamic <expression>
  stable content: Function2<Composer, Int, Unit>
)
fun ly.david.musicsearch.ui.common.theme.getSubTextColor()
fun ly.david.musicsearch.ui.common.theme.getSeedColor(
  unstable <this>: AppPreferences
): Color
fun ly.david.musicsearch.ui.common.theme.TextStyles.getHeaderTextStyle(
  unused stable <this>: TextStyles
): TextStyle
fun ly.david.musicsearch.ui.common.theme.TextStyles.getCardBodyTextStyle(
  unused stable <this>: TextStyles
): TextStyle
fun ly.david.musicsearch.ui.common.theme.TextStyles.getCardBodySubTextStyle(
  unused stable <this>: TextStyles
): TextStyle
fun ly.david.musicsearch.ui.common.theme.useMaterialYou(
  unstable <this>: AppPreferences
): Boolean
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.topappbar.AddAllToCollectionMenuItem(
  <this>: OverflowMenuScope
  stable tab: Tab?
  unstable entityIds: Set<String>
  stable overlayHost: OverlayHost
  unstable coroutineScope: CoroutineScope
  stable snackbarHostState: SnackbarHostState
  stable onLoginClick: Function0<Unit>
  stable modifier: Modifier? = @static <expression>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.topappbar.AddToCollectionActionToggle(
  stable collected: Boolean
  stable entity: MusicBrainzEntityType
  stable entityId: String
  stable overlayHost: OverlayHost
  unstable coroutineScope: CoroutineScope
  stable snackbarHostState: SnackbarHostState
  stable onLoginClick: Function0<Unit>
  stable modifier: Modifier? = @static <expression>
  stable nameWithDisambiguation: String? = @static ""
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.topappbar.CopyToClipboardMenuItem(
  <this>: OverflowMenuScope
  stable entityId: String
  stable modifier: Modifier? = @static <expression>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.topappbar.DeleteMenuItem(
  <this>: OverflowMenuScope
  stable selectionState: SelectionState
  stable onClick: Function0<Unit>
  stable modifier: Modifier? = @static <expression>
)
scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.topappbar.DotsFlashing.Dot(
  stable alpha: Float
)
fun ly.david.musicsearch.ui.common.topappbar.DotsFlashing.animateAlphaWithDelay(
  stable delay: Int
): State<Float>
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.topappbar.DotsFlashing(
  stable modifier: Modifier? = @static <expression>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.topappbar.MoreInfoToggleMenuItem(
  <this>: OverflowMenuScope
  stable showMoreInfo: Boolean
  stable onToggle: Function1<Boolean, Unit>
  stable modifier: Modifier? = @static <expression>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.topappbar.OpenInBrowserMenuItem(
  <this>: OverflowMenuScope
  stable url: String
  stable modifier: Modifier? = @static <expression>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.topappbar.RefreshMenuItem(
  <this>: OverflowMenuScope
  stable onClick: Function0<Unit>
  stable modifier: Modifier? = @static <expression>
  stable show: Boolean = @static true
  stable tab: Tab? = @static null
)
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable]]") fun ly.david.musicsearch.ui.common.topappbar.ScrollableTopAppBar(
  stable modifier: Modifier? = @static <expression>
  stable onBack: Function0<Unit>? = @static <expression>
  stable showBackButton: Boolean = @static true
  stable entity: MusicBrainzEntityType? = @static null
  stable title: String? = @static ""
  stable subtitle: String? = @static ""
  stable scrollBehavior: TopAppBarScrollBehavior? = @static null
  stable containerColor: Color = @static <expression>
  stable actions: Function2<Composer, Int, Unit>? = @static <expression>
  stable overflowDropdownMenuItems: @[ExtensionFunctionType] Function3<OverflowMenuScope, Composer, Int, Unit>? = @static null
  stable subtitleDropdownMenuItems: @[ExtensionFunctionType] Function3<OverflowMenuScope, Composer, Int, Unit>? = @static null
  stable additionalBar: @[ExtensionFunctionType] Function3<ColumnScope, Composer, Int, Unit>? = @static <expression>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable]]") fun ly.david.musicsearch.ui.common.topappbar.ScrollableTopAppBar(
  stable modifier: Modifier? = @static <expression>
  stable onBack: Function0<Unit>? = @static <expression>
  stable showBackButton: Boolean = @static true
  stable entity: MusicBrainzEntityType? = @static null
  stable annotatedString: AnnotatedString? = @static <expression>
  stable subtitle: String? = @static ""
  stable scrollBehavior: TopAppBarScrollBehavior? = @static null
  stable containerColor: Color = @static <expression>
  stable actions: Function2<Composer, Int, Unit>? = @static <expression>
  stable overflowDropdownMenuItems: @[ExtensionFunctionType] Function3<OverflowMenuScope, Composer, Int, Unit>? = @static null
  stable subtitleDropdownMenuItems: @[ExtensionFunctionType] Function3<OverflowMenuScope, Composer, Int, Unit>? = @static null
  stable additionalBar: @[ExtensionFunctionType] Function3<ColumnScope, Composer, Int, Unit>? = @static <expression>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable]]") fun ly.david.musicsearch.ui.common.topappbar.TitleAndSubtitle(
  stable annotatedString: AnnotatedString
  stable entity: MusicBrainzEntityType? = @static null
  stable subtitle: String? = @static ""
  stable subtitleDropdownMenuItems: @[ExtensionFunctionType] Function3<OverflowMenuScope, Composer, Int, Unit>? = @static null
)
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable]]") fun ly.david.musicsearch.ui.common.topappbar.SubtitleWithOverflow(
  stable subtitle: String? = @static ""
  stable subtitleDropdownMenuItems: @[ExtensionFunctionType] Function3<OverflowMenuScope, Composer, Int, Unit>? = @static null
)
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable]]") fun ly.david.musicsearch.ui.common.topappbar.OverflowMenu(
  stable overflowDropdownMenuItems: @[ExtensionFunctionType] Function3<OverflowMenuScope, Composer, Int, Unit>? = @static null
)
fun ly.david.musicsearch.ui.common.topappbar.rememberSelectionState(
  stable totalCount: Int = @static 0
): SelectionState
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.topappbar.SortToggleMenuItem(
  <this>: OverflowMenuScope
  stable sorted: Boolean
  stable onToggle: Function1<Boolean, Unit>
  stable modifier: Modifier? = @static <expression>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.topappbar.StatsMenuItem(
  <this>: OverflowMenuScope
  stable statsScreen: StatsScreen
  stable overlayHost: OverlayHost
  unstable coroutineScope: CoroutineScope
  stable modifier: Modifier? = @static <expression>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.topappbar.TabsBar(
  stable modifier: Modifier? = @static <expression>
  unstable tabsTitle: List<String>? = @static <expression>
  stable selectedTabIndex: Int = @static 0
  stable onSelectTabIndex: Function1<Int, Unit>? = @static <expression>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable]]") fun ly.david.musicsearch.ui.common.topappbar.ToggleMenuItem(
  <this>: OverflowMenuScope
  stable toggleOnText: String
  stable toggleOffText: String
  stable toggled: Boolean
  stable onToggle: Function1<Boolean, Unit>
  stable modifier: Modifier? = @static <expression>
  stable leadingIcon: Function2<Composer, Int, Unit>? = @static null
)
fun ly.david.musicsearch.ui.common.topappbar.rememberTopAppBarFilterState(
  stable initialFilterText: String? = @static ""
  stable initialIsFilterMode: Boolean = @static false
): TopAppBarFilterState
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable]]") fun ly.david.musicsearch.ui.common.topappbar.TopAppBarWithFilter(
  stable modifier: Modifier? = @static <expression>
  stable onBack: Function0<Unit>? = @static <expression>
  stable showBackButton: Boolean = @static true
  stable entity: MusicBrainzEntityType? = @static null
  stable title: String? = @static ""
  stable subtitle: String? = @static ""
  stable scrollBehavior: TopAppBarScrollBehavior? = @static null
  stable overflowDropdownMenuItems: @[ExtensionFunctionType] Function3<OverflowMenuScope, Composer, Int, Unit>? = @static null
  stable subtitleDropdownMenuItems: @[ExtensionFunctionType] Function3<OverflowMenuScope, Composer, Int, Unit>? = @static null
  stable topAppBarFilterState: TopAppBarFilterState? = @dynamic <expression>
  stable selectionState: SelectionState? = @dynamic <expression>
  stable additionalActions: Function2<Composer, Int, Unit>? = @static <expression>
  stable additionalBar: Function2<Composer, Int, Unit>? = @static <expression>
  stable onSelectAllToggle: Function0<Unit>? = @static <expression>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable]]") fun ly.david.musicsearch.ui.common.topappbar.TopAppBarWithFilterInternal(
  stable annotatedString: AnnotatedString
  stable modifier: Modifier? = @static <expression>
  stable onBack: Function0<Unit>? = @static <expression>
  stable showBackButton: Boolean = @static true
  stable entity: MusicBrainzEntityType? = @static null
  stable subtitle: String? = @static ""
  stable scrollBehavior: TopAppBarScrollBehavior? = @static null
  stable overflowDropdownMenuItems: @[ExtensionFunctionType] Function3<OverflowMenuScope, Composer, Int, Unit>? = @static null
  stable subtitleDropdownMenuItems: @[ExtensionFunctionType] Function3<OverflowMenuScope, Composer, Int, Unit>? = @static null
  stable topAppBarFilterState: TopAppBarFilterState? = @dynamic <expression>
  stable selectionState: SelectionState? = @dynamic <expression>
  stable additionalActions: Function2<Composer, Int, Unit>? = @static <expression>
  stable additionalBar: Function2<Composer, Int, Unit>? = @static <expression>
  stable onSelectAllToggle: Function0<Unit>? = @static <expression>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.track.TrackListItem(
  track: TrackListItemModel
  stable modifier: Modifier? = @static <expression>
  stable onRecordingClick: Function1<@[ParameterName(name = 'id')] String, Unit>? = @static <expression>
)
open fun ly.david.musicsearch.ui.common.track.TracksByReleasePresenter.present(
  stable <this>: TracksByReleasePresenter
): TracksByReleaseUiState
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.wikimedia.WikipediaSection(
  extract: WikipediaExtract
  stable modifier: Modifier? = @static <expression>
  stable filterText: String? = @static ""
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ly.david.musicsearch.ui.common.work.WorkListItem(
  work: WorkListItemModel
  stable modifier: Modifier? = @static <expression>
  stable onWorkClick: @[ExtensionFunctionType] Function1<WorkListItemModel, Unit>? = @static <expression>
  stable isSelected: Boolean = @static false
  stable onSelect: Function1<String, Unit>? = @static <expression>
  stable onEditCollectionClick: Function1<String, Unit>? = @static <expression>
)
