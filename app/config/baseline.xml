<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues></ManuallySuppressedIssues>
  <CurrentIssues>
    <ID>ComplexCondition:ReleaseGroupsPagedList.kt$ReleaseGroupsPagedList$sorted &amp;&amp; rg2 != null &amp;&amp; (rg1?.primaryType != rg2.primaryType || rg1?.secondaryTypes != rg2.secondaryTypes)</ID>
    <ID>ComposableParamOrder:ArtistDetailsScreen.kt$ArtistDetailsScreen</ID>
    <ID>ComposableParamOrder:BigCoverArt.kt$PainterImage</ID>
    <ID>ComposableParamOrder:DetailsWithErrorHandling.kt$DetailsWithErrorHandling</ID>
    <ID>ComposableParamOrder:EventDetailsScreen.kt$EventDetailsScreen</ID>
    <ID>ComposableParamOrder:EventStatsScreen.kt$EventStatsScreen</ID>
    <ID>ComposableParamOrder:EventsByPlaceScreen.kt$EventsByPlaceScreen</ID>
    <ID>ComposableParamOrder:ExperimentalSettingsScaffold.kt$SettingsScreen</ID>
    <ID>ComposableParamOrder:ExposedDropdownMenuBox.kt$ExposedDropdownMenuBox</ID>
    <ID>ComposableParamOrder:HistoryScaffold.kt$HistoryScreen</ID>
    <ID>ComposableParamOrder:InstrumentDetailsScreen.kt$InstrumentDetailsScreen</ID>
    <ID>ComposableParamOrder:InstrumentStatsScreen.kt$InstrumentStatsScreen</ID>
    <ID>ComposableParamOrder:LabelDetailsScreen.kt$LabelDetailsScreen</ID>
    <ID>ComposableParamOrder:LabelStatsScreen.kt$LabelStatsScreen</ID>
    <ID>ComposableParamOrder:PlaceDetailsScreen.kt$PlaceDetailsScreen</ID>
    <ID>ComposableParamOrder:PlaceStatsScreen.kt$PlaceStatsScreen</ID>
    <ID>ComposableParamOrder:RecordingDetailsScreen.kt$RecordingDetailsScreen</ID>
    <ID>ComposableParamOrder:RecordingStatsScreen.kt$RecordingStatsScreen</ID>
    <ID>ComposableParamOrder:RecordingsByWorkScreen.kt$RecordingsByWorkScreen</ID>
    <ID>ComposableParamOrder:RecordingsListScreen.kt$RecordingsListScreen</ID>
    <ID>ComposableParamOrder:ReleaseGroupStatsScreen.kt$ReleaseGroupStatsScreen</ID>
    <ID>ComposableParamOrder:ReleaseGroupsListScreen.kt$ReleaseGroupsListScreen</ID>
    <ID>ComposableParamOrder:ReleaseStatsScreen.kt$ReleaseStatsScreen</ID>
    <ID>ComposableParamOrder:ReleasesByArtistScreen.kt$ReleasesByArtistScreen</ID>
    <ID>ComposableParamOrder:ReleasesByLabelScreen.kt$ReleasesByLabelScreen</ID>
    <ID>ComposableParamOrder:ReleasesByRecordingScreen.kt$ReleasesByRecordingScreen</ID>
    <ID>ComposableParamOrder:ReleasesByReleaseGroupScreen.kt$ReleasesByReleaseGroupScreen</ID>
    <ID>ComposableParamOrder:ReleasesListScreen.kt$ReleasesListScreen</ID>
    <ID>ComposableParamOrder:ScrollableTopAppBar.kt$ScrollableTopAppBar</ID>
    <ID>ComposableParamOrder:ScrollableTopAppBar.kt$TitleBar</ID>
    <ID>ComposableParamOrder:SearchMusicBrainzScreen.kt$SearchMusicBrainzScreen</ID>
    <ID>ComposableParamOrder:SeriesDetailsScreen.kt$SeriesDetailsScreen</ID>
    <ID>ComposableParamOrder:SeriesStatsScreen.kt$SeriesStatsScreen</ID>
    <ID>ComposableParamOrder:SettingsScaffold.kt$SettingsScreen</ID>
    <ID>ComposableParamOrder:ThreeSectionListItem.kt$ThreeSectionListItem</ID>
    <ID>ComposableParamOrder:TopAppBarWithFilter.kt$TopAppBarWithFilter</ID>
    <ID>ComposableParamOrder:TopAppBarWithFilter.kt$TopAppBarWithFilterInternal</ID>
    <ID>ComposableParamOrder:TracksInReleaseScreen.kt$TracksInReleaseScreen</ID>
    <ID>ComposableParamOrder:WorkDetailsScreen.kt$WorkDetailsScreen</ID>
    <ID>ComposableParamOrder:WorkStatsScreen.kt$WorkGroupStatsScreen</ID>
    <ID>CyclomaticComplexMethod:SearchMusicBrainzScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable internal fun SearchMusicBrainzScreen( modifier: Modifier = Modifier, lazyListState: LazyListState = rememberLazyListState(), snackbarHostState: SnackbarHostState, onItemClick: (destination: Destination, id: String, title: String?) -&gt; Unit = { _, _, _ -&gt; }, searchQuery: String? = null, searchOption: MusicBrainzResource? = null, viewModel: SearchMusicBrainzViewModel = hiltViewModel() )</ID>
    <ID>ForbiddenComment:AreaDetailsScreen.kt$// TODO: api doesn't seem to include area containment</ID>
    <ID>ForbiddenComment:ArtistDetailsScreen.kt$// TODO: area</ID>
    <ID>ForbiddenComment:ArtistDetailsScreen.kt$// TODO: begin area</ID>
    <ID>ForbiddenComment:ArtistDetailsScreen.kt$// TODO: end area</ID>
    <ID>ForbiddenComment:ArtistDetailsScreen.kt$// TODO: isni code</ID>
    <ID>ForbiddenComment:ArtistDetailsScreen.kt$// todo: ipis code</ID>
    <ID>ForbiddenComment:ArtistScaffold.kt$// TODO: disclaimer when turning on sort if we have not gotten all release groups</ID>
    <ID>ForbiddenComment:ArtistScaffold.kt$// TODO: generalize switch menu item</ID>
    <ID>ForbiddenComment:BigCoverArt.kt$// TODO: handle error with retry</ID>
    <ID>ForbiddenComment:EventDetailsScreen.kt$// TODO: set list</ID>
    <ID>ForbiddenComment:ExperimentalSettingsScaffold.kt$// TODO: sharedpreference to use artist sort name throughout app</ID>
    <ID>ForbiddenComment:ExperimentalSettingsViewModel.kt$ExperimentalSettingsViewModel$// TODO: can we avoid flow { emit { ?</ID>
    <ID>ForbiddenComment:ExperimentalSettingsViewModel.kt$ExperimentalSettingsViewModel$// TODO: should use passed in stringRes</ID>
    <ID>ForbiddenComment:ExperimentalSettingsViewModel.kt$ExperimentalSettingsViewModel$// TODO: this type of setting should go in AppPreferences</ID>
    <ID>ForbiddenComment:ExposedDropdownMenuBox.kt$// TODO: this can't properly take up the full size allotted to it</ID>
    <ID>ForbiddenComment:GenreScaffold.kt$// TODO: genre browsing isn't supported by API</ID>
    <ID>ForbiddenComment:HistoryViewModel.kt$HistoryViewModel$// TODO: if we allow different sorting, then it will multiple these queries</ID>
    <ID>ForbiddenComment:LabelDetailsScreen.kt$// TODO: area</ID>
    <ID>ForbiddenComment:LabelDetailsScreen.kt$// TODO: lifespan, founded, defunct for end</ID>
    <ID>ForbiddenComment:LabelListItem.kt$// TODO: area</ID>
    <ID>ForbiddenComment:LabelListItem.kt$// TODO: lifespan</ID>
    <ID>ForbiddenComment:LocalRemoteProgressBar.kt$// TODO: "cached" is misleading here</ID>
    <ID>ForbiddenComment:LocalRemoteProgressBar.kt$// TODO: better copy</ID>
    <ID>ForbiddenComment:NavigationGraph.kt$// TODO: [low] should rethink this structure once we introduce more non-MB-resource destinations</ID>
    <ID>ForbiddenComment:PagingLoadingAndErrorHandler.kt$// TODO: Issue with indicator remaining on screen without delay in refresh</ID>
    <ID>ForbiddenComment:PagingLoadingAndErrorHandler.kt$// TODO: cannot refresh</ID>
    <ID>ForbiddenComment:PagingLoadingAndErrorHandler.kt$// TODO: going to another tab, and coming back will show same error message (doesn't make another call)</ID>
    <ID>ForbiddenComment:PlaceListItem.kt$// TODO: too much information on list item?</ID>
    <ID>ForbiddenComment:PlaceTab.kt$PlaceTab.RELATIONSHIPS$// TODO: Should exclude event-rels because they appear to be the same as the results from browse events by place</ID>
    <ID>ForbiddenComment:RelationsList.kt$RelationsList$// TODO: consider removing Header</ID>
    <ID>ForbiddenComment:ReleaseDetailsScreen.kt$// TODO: Works for Latn but not Jpan or Kore</ID>
    <ID>ForbiddenComment:ReleaseGroupListItem.kt$// TODO: have 2 modes: query and browse where some data is displayed differently</ID>
    <ID>ForbiddenComment:ReleaseListItem.kt$// TODO: catalog number</ID>
    <ID>ForbiddenComment:ReleaseListItem.kt$// TODO: rethink showing release country -&gt; could be misleading, and expensive joins</ID>
    <ID>ForbiddenComment:ReleaseListItem.kt$// TODO: we probably need preferences to show/hide some of the content in this item</ID>
    <ID>ForbiddenComment:ReleaseListItem.kt$// TODO: we'll likely run into 429 when loading many images at once, not much we can do about that right now</ID>
    <ID>ForbiddenComment:ReleaseScaffold.kt$// TODO: [low] if you spam click this it won't work</ID>
    <ID>ForbiddenComment:ReleaseScaffold.kt$// TODO: test refreshing this screen</ID>
    <ID>ForbiddenComment:ReleasesByArtistViewModel.kt$ReleasesByArtistViewModel$// TODO: ideal for selecting labels. though where would those labels be shown?</ID>
    <ID>ForbiddenComment:ReleasesListScreen.kt$// TODO: Previewing compose paging currently not supported: https://issuetracker.google.com/issues/194544557#comment18</ID>
    <ID>ForbiddenComment:ScrollableTopAppBar.kt$// TODO: Can we split these concerns somehow?</ID>
    <ID>ForbiddenComment:ScrollableTopAppBar.kt$// TODO: can we generalize adding a dropdown menu to a clickable composable?</ID>
    <ID>ForbiddenComment:SearchMusicBrainzScreen.kt$// TODO: Seems like this is currently broken</ID>
    <ID>ForbiddenComment:SearchMusicBrainzScreen.kt$// TODO: should see album type rather than year</ID>
    <ID>ForbiddenComment:SeriesDetailsScreen.kt$// TODO: not enough info to warrant its own tab?</ID>
    <ID>ForbiddenComment:SettingsScaffold.kt$// TODO: sharedpreference to use artist sort name throughout app</ID>
    <ID>ForbiddenComment:TextWithHeading.kt$// TODO: selecting this starting from heading will behave strangely for text with multiple lines</ID>
    <ID>ForbiddenComment:ThreeSectionListItem.kt$// TODO: replaceable with material3 ListItem:</ID>
    <ID>ForbiddenComment:TopAppBarWithFilter.kt$// TODO: Filters</ID>
    <ID>ForbiddenComment:TopAppBarWithFilter.kt$// TODO: expand out from the icon</ID>
    <ID>ForbiddenComment:TopAppBarWithFilter.kt$// TODO: only do them when first clicking on search icon</ID>
    <ID>ForbiddenComment:TopAppBarWithFilter.kt$// TODO: when returning, focus is in front of search text</ID>
    <ID>ForbiddenComment:WorkListItem.kt$// TODO: artists</ID>
    <ID>ForbiddenComment:WorkListItem.kt$// TODO: writers</ID>
    <ID>ForbiddenComment:WorkScaffold.kt$// TODO: browsing rather than lookup recording-rels doesn't include attributes</ID>
    <ID>LongParameterList:ReleaseScaffoldViewModel.kt$ReleaseScaffoldViewModel$( override val releaseDao: ReleaseDao, private val mediumDao: MediumDao, private val trackDao: TrackDao, override val lookupHistoryDao: LookupHistoryDao, override val coverArtArchiveApiService: CoverArtArchiveApiService, private val repository: ReleaseRepository, private val relationsList: RelationsList, )</ID>
    <ID>MagicNumber:AddRelationshipsSection.kt$3</ID>
    <ID>MagicNumber:AddRelationshipsSection.kt$4</ID>
    <ID>MagicNumber:AddRelationshipsSection.kt$5</ID>
    <ID>MagicNumber:AddRelationshipsSection.kt$6</ID>
    <ID>MagicNumber:AddRelationshipsSection.kt$7</ID>
    <ID>MagicNumber:DotsFlashing.kt$0.2f</ID>
    <ID>MagicNumber:DotsFlashing.kt$4</ID>
    <ID>MagicNumber:PlaceDetailsScreen.kt$123.4567</ID>
    <ID>MatchingDeclarationName:Annotations.kt$ExcludeFromJacocoGeneratedReport</ID>
    <ID>MatchingDeclarationName:PreviewAnnotations.kt$DefaultPreviews</ID>
    <ID>MatchingDeclarationName:ReleaseGroupsListScreen.kt$ReleaseGroupsListViewModel : ViewModelGetReleaseGroupCoverArtPath</ID>
    <ID>MatchingDeclarationName:ReleasesListScreen.kt$ReleasesListViewModel : ViewModelGetReleaseCoverArtPath</ID>
    <ID>MatchingDeclarationName:Type.kt$TextStyles</ID>
    <ID>MaxLineLength:EventListItem.kt$EventPreviewParameterProvider$disambiguation = "“Where It’s At: The Rolling Stone State Of The Union”, a Rolling Stone Magazine 30th anniversary special"</ID>
    <ID>MaxLineLength:ExperimentalSettingsViewModel.kt$ExperimentalSettingsViewModel$emit(regex.matches("Theme") || regex.matches("Light") || regex.matches("Dark") || regex.matches("System"))</ID>
    <ID>MaxLineLength:InstrumentDetailsScreen.kt$description</ID>
    <ID>MaxLineLength:LabelListItem.kt$LabelCardPreviewParameterProvider$disambiguation = "1991 - 2001 group/division of Sony Music Entertainment (Japan) - used to organize imprints; not a release label"</ID>
    <ID>MaxLineLength:ReleaseListItem.kt$// Since we don't store release events when browsing releases, releaseEvents will be empty until</ID>
    <ID>MaxLineLength:ReleaseListItem.kt$text = "${countryCode.toFlagEmoji()} $countryCode" + additionalReleaseEvents.transformThisIfNotNullOrEmpty { " $it" }</ID>
    <ID>ModifierMissing:DevSettingsSection.kt$DevSettingsSection</ID>
    <ID>ModifierMissing:ExperimentalSettingsScaffold.kt$ExperimentalSettingsScaffold</ID>
    <ID>ModifierMissing:SettingSwitch.kt$SettingSwitch</ID>
    <ID>ModifierReused:ExposedDropdownMenuBox.kt$DropdownMenuItem( modifier = modifier.semantics { testTag = option.resourceName }, text = { Row(verticalAlignment = CenterVertically) { ResourceIcon( modifier = Modifier.padding(end = 8.dp), resource = option ) Text(text = stringResource(id = option.getDisplayTextRes())) } }, onClick = { onSelectOption(option) expanded = false } )</ID>
    <ID>ModifierReused:ExposedDropdownMenuBox.kt$ExposedDropdownMenu( modifier = modifier, expanded = expanded, onDismissRequest = { expanded = false } ) { options.forEach { option -&gt; Surface( modifier = Modifier.fillMaxSize(), color = if (selectedOption == option) { MaterialTheme.colorScheme.primary.copy(alpha = 0.2f) } else { MaterialTheme.colorScheme.background } ) { DropdownMenuItem( modifier = modifier.semantics { testTag = option.resourceName }, text = { Row(verticalAlignment = CenterVertically) { ResourceIcon( modifier = Modifier.padding(end = 8.dp), resource = option ) Text(text = stringResource(id = option.getDisplayTextRes())) } }, onClick = { onSelectOption(option) expanded = false } ) } } }</ID>
    <ID>ModifierReused:ExposedDropdownMenuBox.kt$ExposedDropdownMenuBox( expanded = expanded, onExpandedChange = { expanded = !expanded }, modifier = modifier ) { TextField( modifier = modifier.menuAnchor(), readOnly = true, shape = RectangleShape, value = stringResource(id = selectedOption.getDisplayTextRes()), onValueChange = { }, label = { Text(stringResource(id = R.string.resource)) }, trailingIcon = { ExposedDropdownMenuDefaults.TrailingIcon( expanded = expanded ) }, colors = ExposedDropdownMenuDefaults.textFieldColors() ) // Focusing on this "consumes" a back press, and is independent of onDismissRequest. ExposedDropdownMenu( modifier = modifier, expanded = expanded, onDismissRequest = { expanded = false } ) { options.forEach { option -&gt; Surface( modifier = Modifier.fillMaxSize(), color = if (selectedOption == option) { MaterialTheme.colorScheme.primary.copy(alpha = 0.2f) } else { MaterialTheme.colorScheme.background } ) { DropdownMenuItem( modifier = modifier.semantics { testTag = option.resourceName }, text = { Row(verticalAlignment = CenterVertically) { ResourceIcon( modifier = Modifier.padding(end = 8.dp), resource = option ) Text(text = stringResource(id = option.getDisplayTextRes())) } }, onClick = { onSelectOption(option) expanded = false } ) } } } }</ID>
    <ID>ModifierReused:ExposedDropdownMenuBox.kt$TextField( modifier = modifier.menuAnchor(), readOnly = true, shape = RectangleShape, value = stringResource(id = selectedOption.getDisplayTextRes()), onValueChange = { }, label = { Text(stringResource(id = R.string.resource)) }, trailingIcon = { ExposedDropdownMenuDefaults.TrailingIcon( expanded = expanded ) }, colors = ExposedDropdownMenuDefaults.textFieldColors() )</ID>
    <ID>ModifierWithoutDefault:ReleaseGroupsByArtistScreen.kt$modifier</ID>
    <ID>SwallowedException:ArtistScaffoldViewModel.kt$ArtistScaffoldViewModel$ex: Exception</ID>
    <ID>SwallowedException:EventScaffoldViewModel.kt$EventScaffoldViewModel$ex: Exception</ID>
    <ID>SwallowedException:GenreScaffoldViewModel.kt$GenreScaffoldViewModel$ex: Exception</ID>
    <ID>SwallowedException:InstrumentScaffoldViewModel.kt$InstrumentScaffoldViewModel$ex: Exception</ID>
    <ID>SwallowedException:LabelScaffoldViewModel.kt$LabelScaffoldViewModel$ex: Exception</ID>
    <ID>SwallowedException:PlaceScaffoldViewModel.kt$PlaceScaffoldViewModel$ex: Exception</ID>
    <ID>SwallowedException:RecordingScaffoldViewModel.kt$RecordingScaffoldViewModel$ex: Exception</ID>
    <ID>SwallowedException:ReleaseGroupScaffoldViewModel.kt$ReleaseGroupScaffoldViewModel$ex: Exception</ID>
    <ID>SwallowedException:ReleaseGroupsListScreen.kt$ex: Exception</ID>
    <ID>SwallowedException:ReleaseScaffoldViewModel.kt$ReleaseScaffoldViewModel$ex: Exception</ID>
    <ID>SwallowedException:SeriesScaffoldViewModel.kt$SeriesScaffoldViewModel$ex: Exception</ID>
    <ID>SwallowedException:WorkScaffoldViewModel.kt$WorkScaffoldViewModel$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:ArtistScaffoldViewModel.kt$ArtistScaffoldViewModel$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:EventScaffoldViewModel.kt$EventScaffoldViewModel$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:GenreScaffoldViewModel.kt$GenreScaffoldViewModel$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:InstrumentScaffoldViewModel.kt$InstrumentScaffoldViewModel$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:LabelScaffoldViewModel.kt$LabelScaffoldViewModel$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:PlaceScaffoldViewModel.kt$PlaceScaffoldViewModel$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:RecordingScaffoldViewModel.kt$RecordingScaffoldViewModel$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:ReleaseGroupScaffoldViewModel.kt$ReleaseGroupScaffoldViewModel$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:ReleaseGroupsListScreen.kt$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:ReleaseScaffoldViewModel.kt$ReleaseScaffoldViewModel$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:ReleasesListScreen.kt$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:SeriesScaffoldViewModel.kt$SeriesScaffoldViewModel$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:WorkScaffoldViewModel.kt$WorkScaffoldViewModel$ex: Exception</ID>
    <ID>UnnecessaryAbstractClass:PreferencesModule.kt$PreferencesModuleBinds$PreferencesModuleBinds</ID>
    <ID>UnstableCollections:AreaStatsScreen.kt$List&lt;Tab&gt;</ID>
    <ID>UnstableCollections:ArtistStatsScreen.kt$List&lt;Tab&gt;</ID>
    <ID>UnstableCollections:EventStatsScreen.kt$List&lt;Tab&gt;</ID>
    <ID>UnstableCollections:ExposedDropdownMenuBox.kt$List&lt;MusicBrainzResource&gt;</ID>
    <ID>UnstableCollections:InstrumentStatsScreen.kt$List&lt;Tab&gt;</ID>
    <ID>UnstableCollections:LabelStatsScreen.kt$List&lt;Tab&gt;</ID>
    <ID>UnstableCollections:MultipleChoiceDialog.kt$List&lt;String&gt;</ID>
    <ID>UnstableCollections:PlaceStatsScreen.kt$List&lt;Tab&gt;</ID>
    <ID>UnstableCollections:RecordingStatsScreen.kt$List&lt;Tab&gt;</ID>
    <ID>UnstableCollections:ReleaseGroupStatsScreen.kt$List&lt;Tab&gt;</ID>
    <ID>UnstableCollections:ReleaseStatsScreen.kt$List&lt;Tab&gt;</ID>
    <ID>UnstableCollections:ScrollableTopAppBar.kt$List&lt;String&gt;</ID>
    <ID>UnstableCollections:SeriesStatsScreen.kt$List&lt;Tab&gt;</ID>
    <ID>UnstableCollections:SettingWithDialogChoices.kt$List&lt;String&gt;</ID>
    <ID>UnstableCollections:StatsScreen.kt$List&lt;Tab&gt;</ID>
    <ID>UnstableCollections:TopAppBarWithFilter.kt$List&lt;String&gt;</ID>
    <ID>UnstableCollections:WorkStatsScreen.kt$List&lt;Tab&gt;</ID>
    <ID>UnusedPrivateMember:ReleasesByArtistViewModel.kt$ReleasesByArtistViewModel$private val coverArtArchiveApiService: CoverArtArchiveApiService</ID>
  </CurrentIssues>
</SmellBaseline>
