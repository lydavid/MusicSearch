restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun SearchSpotifyBottomSheetContent(
  spotifyHistory: SpotifyHistoryListItemModel?
  stable searchMusicBrainz: Function2<@[ParameterName(name = 'query')] String, @[ParameterName(name = 'id')] MusicBrainzEntity, Unit>? = @static $composer.startReplaceGroup(1849434622)
val tmp0_group = $composer.cache(false) {
  {     <unused var>  :   String  ,   <unused var>  :   MusicBrainzEntity   ->

  }

}

$composer.endReplaceGroup()
tmp0_group@ly.david.musicsearch.android.feature.spotify.history.SearchSpotifyBottomSheetContent
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewSearchSpotifyBottomSheetContent()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun SpotifyHistoryCard(
  spotifyHistory: SpotifyHistoryListItemModel
  stable modifier: Modifier? = @static Companion
  stable onClick: @[ExtensionFunctionType] Function1<SpotifyHistoryListItemModel, Unit>? = @static $composer.startReplaceGroup(1849434622)
val tmp0_group = $composer.cache(false) {
  {

  }

}

$composer.endReplaceGroup()
tmp0_group@ly.david.musicsearch.android.feature.spotify.history.SpotifyHistoryCard
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewSpotifyHistoryCard()
fun present(
  stable <this>: SpotifyHistoryPresenter
): SpotifyUiState
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun SpotifyHistoryUi(
  stable state: SpotifyUiState
  stable modifier: Modifier? = @static Companion
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun SpotifyHistoryUi(
  lazyPagingItems: LazyPagingItems<ListItemModel>
  stable modifier: Modifier? = @static Companion
  stable topAppBarFilterState: TopAppBarFilterState? = @dynamic TopAppBarFilterState()
  stable lazyListState: LazyListState? = @dynamic LazyListState()
  stable onBack: Function0<Unit>? = @static $composer.startReplaceGroup(1849434622)
val tmp0_group = $composer.cache(false) {
  {

  }

}

$composer.endReplaceGroup()
tmp0_group@ly.david.musicsearch.android.feature.spotify.history.SpotifyHistoryUi
  stable searchMusicBrainz: Function2<@[ParameterName(name = 'query')] String, @[ParameterName(name = 'entity')] MusicBrainzEntity, Unit>? = @static $composer.startReplaceGroup(1849434622)
val tmp1_group = $composer.cache(false) {
  {     <unused var>  :   String  ,   <unused var>  :   MusicBrainzEntity   ->

  }

}

$composer.endReplaceGroup()
tmp1_group@ly.david.musicsearch.android.feature.spotify.history.SpotifyHistoryUi
  stable onMarkForDeletion: Function1<SpotifyHistoryListItemModel, Unit>? = @static $composer.startReplaceGroup(1849434622)
val tmp2_group = $composer.cache(false) {
  {     it  :   SpotifyHistoryListItemModel   ->

  }

}

$composer.endReplaceGroup()
tmp2_group@ly.david.musicsearch.android.feature.spotify.history.SpotifyHistoryUi
  stable onUndoMarkForDeletion: Function1<SpotifyHistoryListItemModel, Unit>? = @static $composer.startReplaceGroup(1849434622)
val tmp3_group = $composer.cache(false) {
  {     it  :   SpotifyHistoryListItemModel   ->

  }

}

$composer.endReplaceGroup()
tmp3_group@ly.david.musicsearch.android.feature.spotify.history.SpotifyHistoryUi
  stable onDelete: Function1<SpotifyHistoryListItemModel, Unit>? = @static $composer.startReplaceGroup(1849434622)
val tmp4_group = $composer.cache(false) {
  {     it  :   SpotifyHistoryListItemModel   ->

  }

}

$composer.endReplaceGroup()
tmp4_group@ly.david.musicsearch.android.feature.spotify.history.SpotifyHistoryUi
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun SpotifyHistoryContent(
  lazyPagingItems: LazyPagingItems<ListItemModel>
  stable modifier: Modifier? = @static Companion
  stable lazyListState: LazyListState? = @dynamic LazyListState()
  stable searchMusicBrainz: Function2<@[ParameterName(name = 'query')] String, @[ParameterName(name = 'entity')] MusicBrainzEntity, Unit>? = @static $composer.startReplaceGroup(1849434622)
val tmp0_group = $composer.cache(false) {
  {     <unused var>  :   String  ,   <unused var>  :   MusicBrainzEntity   ->

  }

}

$composer.endReplaceGroup()
tmp0_group@ly.david.musicsearch.android.feature.spotify.history.SpotifyHistoryContent
  stable onDelete: Function1<SpotifyHistoryListItemModel, Unit>? = @static $composer.startReplaceGroup(1849434622)
val tmp1_group = $composer.cache(false) {
  {     it  :   SpotifyHistoryListItemModel   ->

  }

}

$composer.endReplaceGroup()
tmp1_group@ly.david.musicsearch.android.feature.spotify.history.SpotifyHistoryContent
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PreviewNowPlayingHistoryUi()
